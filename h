BASH(1)                     General Commands Manual                    BASH(1)

名名前前
       bash - GNU Bourne-Again SHell

書書式式
       bbaasshh [options] [file]

著著作作権権
       Bash is Copyright (C) 1989-2011 by the Free Software Foundation, Inc.

説説明明
       bbaasshh は、標準入力やファイルから読み込んだコマンドを実行する、 sshh 互換の
       コマンド言語インタプリタです。 bbaasshh には、_K_o_r_n シェルや _C  シェル  (kksshh
       や ccsshh)  の便利な機能も採り入れられています。

       bbaasshh  は  IEEE POSIX specification (IEEE Standard 1003.1)  の Shell and
       Utilities に準拠する実装を目指しています。 bbaasshh はデフォルトで POSIX 準
       拠に設定することもできます。

オオププシショョンン
       組み込みコマンド  sseett  の説明で述べられている  1 文字のシェルオプション
       を、 起動時に指定できます。 それに加えて、bbaasshh は以下のオプションを起動
       時に解釈します。

       --cc _s_t_r_i_n_g --cc オプションが指定されると、コマンドが _s_t_r_i_n_g から読み込まれ
                 ます。 _s_t_r_i_n_g  の後に引き数があれば、これらは  位置パラメータ
                 (positional  parameter: $$00 から始まるパラメータ) に代入されま
                 す。
       --ii        オプションが指定されると、 bbaasshh は _対_話_的(interactive)   に動
                 作します。
       --ll        ログインシェル (後述の 起起動動 セクションを参照)  として起動され
                 たかのように bbaasshh を動作させます。
       --rr        --rr   オプションが指定されると、   bbaasshh   は    _制_限_さ_れ_た_状_態
                 _(_r_e_s_t_r_i_c_t_e_d_) となります (後述の 制制限限付付ききののシシェェルル を参照)。
       --ss        --ss  オプションが指定された場合と、 オプションを全て処理した後
                 に引き数が残っていなかった場合には、 コマンドは標準入力から読
                 み込まれます。  このオプションを使うと、 対話的シェルを起動す
                 るときに 位置パラメータを設定できます。
       --DD        二重引用符によるクォート文字列 (double-quoted strings)  に  $$
                 が前置されたものを、全てリストして標準出力に出力します。 これ
                 らは、カレントロケールが CC または PPOOSSIIXX 以外のときに、 翻訳の
                 対象となるべき文字列です。  このオプションを指定すると、 自動
                 的に --nn オプションも指定されたことになります。 つまりコマンド
                 は全く実行されません。
       [[--++]]OO [[_s_h_o_p_t___o_p_t_i_o_n]]
                 _s_h_o_p_t___o_p_t_i_o_n  には、組み込みコマンド sshhoopptt (後述の シシェェルルのの組組
                 みみ込込みみココママンンドド を参照) に与えるのと同じシェルのオプションを指
                 定します。  _s_h_o_p_t___o_p_t_i_o_n が有効なオプションであれば、 --OO でオ
                 プションが設定されます。      ++OO       で設定解除になります。
                 _s_h_o_p_t___o_p_t_i_o_n  を指定しない場合、 sshhoopptt で指定できるオプション
                 の名前と値が標準出力に表示されます。 このとき、++OO  では、入力
                 として再利用できる形で出力されます。
       ----        ---- はオプションの終わりを示し、それ以降のオプション処理を行い
                 ません。 ----  以降の引き数は全て、ファイル名や引き数として扱わ
                 れます。 引き数 -- は ---- と同じです。

       bbaasshh が解釈するオプションには複数の文字からなるものもたくさんあります。
       このようなオプションを認識させるためには、 コマンドライン中で 1  文字の
       オプションよりも前に置かなければなりません。

       ----ddeebbuuggggeerr
              シェルの実行を開始する前に、デバッグモードを準備します。  拡張デ
              バッグモードを有効にします  (後述の組み込みコマンド   sshhoopptt   の
              eexxttddeebbuugg オプションを参照)。
       ----dduummpp--ppoo--ssttrriinnggss
              --DD と同じですが、 出力は GNU _g_e_t_t_e_x_t の ppoo (ポータブルオブジェク
              ト) ファイル形式で行われます。
       ----dduummpp--ssttrriinnggss
              --DD と同じです。
       ----hheellpp 使用方法についてのメッセージを標準出力に表示し、正常終了します。
       ----iinniitt--ffiillee _f_i_l_e
       ----rrccffiillee _f_i_l_e
              対話的シェルとして起動された場合、  個人用の標準の初期化ファイル
              _~_/_._b_a_s_h_r_c  の代わりに _f_i_l_e からコマンドを実行します (後述の 起起動動
              セクションを参照)。

       ----llooggiinn
              --ll と同じです。

       ----nnooeeddiittiinngg
              シェルが対話的動作の場合、コマンドラインを読み込むときに     GNU
              rreeaaddlliinnee ライブラリを使用しません。

       ----nnoopprrooffiillee
              システム全体用の起動ファイル  _/_e_t_c_/_p_r_o_f_i_l_e  および個人用の初期化
              ファイル _~_/_._b_a_s_h___p_r_o_f_i_l_e, _~_/_._b_a_s_h___l_o_g_i_n, _~_/_._p_r_o_f_i_l_e のいずれも読
              み込みません。デフォルトでは、 bbaasshh はログインシェルとして起動さ
              れたときに これらのファイルを読み込みます (後述の 起起動動  セクショ
              ンを参照)。

       ----nnoorrcc シェルが対話的動作を行う場合に、個人用初期化ファイル   _~_/_._b_a_s_h_r_c
              の読み込み・実行を行いません。シェルが sshh として起動された場合に
              は、このオプションはデフォルトで有効になります。

       ----ppoossiixx
              bbaasshh  の動作のうち、デフォルトの振舞いが  POSIX 標準と異なる部分
              を、POSIX 標準に準拠するように変更します (_p_o_s_i_x _モ_ー_ド)。

       ----rreessttrriicctteedd
              シェルを制限された状態にします (後述の 制制限限付付ききののシシェェルル セクショ
              ンを参照)。

       ----vveerrbboossee
              --vv と同じです。

       ----vveerrssiioonn
              実行された bbaasshh のバージョン情報を標準出力に表示し、正常終了しま
              す。

引引きき数数
       オプション処理の後に引き数が残っており、かつ --cc  オプションと  --ss  オプ
       ションのいずれも指定されていない場合、 最初の引き数はファイル名とみなさ
       れ、 そのファイルにシェルコマンドが記述されているとみなされます。  この
       ような形で  bbaasshh が起動された場合、 $$00 にそのファイルの名前が設定されま
       す (残りの引き数は位置パラメータに設定されます)。 bbaasshh はこのファイルか
       らコマンドの読み込みと実行を行い、そして終了します。  bbaasshh の終了ステー
       タスは、 このスクリプト中で実行された最後のコマンドの終了ステータスにな
       ります。 コマンドが全く実行されなければ、終了ステータスは 0 です。 ファ
       イルは最初にカレントディレクトリから探し、見つけられなかった場合には、
       PPAATTHH の中のディレクトリからスクリプトを探します。

起起動動
       _ロ_グ_イ_ン_シ_ェ_ル_(_l_o_g_i_n  _s_h_e_l_l_)とは、0 番目の引き数の最初の文字が -- である
       シェル、または ----llooggiinn オプション付きで起動されたシェルのことです。

       _対_話_的_なシェルとは、  オプションでない引き数がなく、   標準入力と標準エ
       ラー出力がいずれも端末に接続されていて  (これは  _i_s_a_t_t_y(3) で調べられま
       す)、 --cc オプションが指定されていない状態で起動されたシェル、または  --ii
       オプション付きで起動されたシェルのことです。  bbaasshh が対話的に動作してい
       る場合には、 PPSS11 が設定され、 $$--  に  ii  が含まれます。  これを利用する
       と、対話的動作の状態であるかどうかを、 シェルスクリプトや起動ファイルの
       内部で調べられます。

       以下の段落では、  bbaasshh   がどのように起動ファイルを実行するかを説明しま
       す。  以下のファイルのいずれかが、 「存在しているが読み込みできない」場
       合は、 bbaasshh はエラーを報告します。ファイル名に含まれるチルダは、 後述の
       展展開開 セクションにおける チチルルダダ展展開開 の項目で述べるように展開されます。

       bbaasshh  が対話的なログインシェルとして起動されるか、 ----llooggiinn オプション付
       きの非対話的シェルとして起動されると、 _/_e_t_c_/_p_r_o_f_i_l_e  ファイルが存在すれ
       ば、 bbaasshh はまずここからコマンドを読み込んで実行します。 このファイルを
       読んだ後、 bbaasshh は _~_/_._b_a_s_h___p_r_o_f_i_l_e, _~_/_._b_a_s_h___l_o_g_i_n, _~_/_._p_r_o_f_i_l_e をこの 順
       番で探します。  bbaasshh は、この中で最初に見つかり、かつ読み込みが可能であ
       るファイルから コマンドを読み込んで実行します。 ----nnoopprrooffiillee  オプション
       を使ってシェルを起動すれば、 この動作を行わないようにできます。

       ログインシェルが終了するときには、   _~_/_._b_a_s_h___l_o_g_o_u_t  ファイルがあれば、
       bbaasshh はこれを読み込んで実行します。

       ログインシェルでない対話的シェルとして起動されると、 _~_/_._b_a_s_h_r_c ファイル
       があれば、  bbaasshh  はここからコマンドを読み込み、実行します。 この動作は
       ----nnoorrcc オプションで行わないようにできます。 ----rrccffiillee _f_i_l_e  オプションを
       使うと、  コマンドの読み込みと実行を _~_/_._b_a_s_h_r_c からでなく _f_i_l_e から行わ
       せることができます。

       (例えばシェルスクリプトを実行するために) 非対話的に起動されると、  bbaasshh
       は環境変数  BBAASSHH__EENNVV を調べ、この変数が定義されていればその値を展開し、
       得られた値をファイル名とみなして、 そこからコマンドの読み込みと実行を行
       います。 つまり bbaasshh は以下のコマンドが実行されたのと同じように動作しま
       す:
              if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
       ただし、ファイル名を探すために PPAATTHH  環境変数の値が使われることはありま
       せん。

       sshh という名前で bbaasshh を起動すると、 bbaasshh は古くからある sshh の起動動作を
       できるだけ真似しようとします。 また POSIX  標準にもできるだけ従おうとし
       ます。 対話的なログインシェルとして起動されると、 あるいは ----llooggiinn オプ
       ション付きの非対話的シェルとして起動されると、         このシェルはまず
       _/_e_t_c_/_p_r_o_f_i_l_e と _~_/_._p_r_o_f_i_l_e の順でコマンドの読み込みと実行をしようとしま
       す。 ----nnoopprrooffiillee オプションを使うと、この動作を行わないようにできます。
       sshh  という名前の対話的シェルとして起動されると、 bbaasshh は環境変数 EENNVV を
       調べ、この変数が定義されていればその値を展開し、 展開で得た値をコマンド
       の読み込みと実行を行うためのファイル名として使います。  sshh という名前で
       起動されたシェルは、 ほかの起動ファイルからコマンドの読み込みと起動を行
       うことはないので、  ----rrccffiillee オプションは全く効果を持ちません。 sshh とい
       う名前の非対話的シェルとして起動されると、 このシェルはほかの起動ファイ
       ルを何も読み込みません。  sshh として起動された場合、 bbaasshh は起動ファイル
       の読み込みを行った後に _P_O_S_I_X モードに入ります。

       ----ppoossiixx コマンドラインオプション等により bbaasshh が _P_O_S_I_X モードで起動され
       ると、  bbaasshh は起動ファイルに関して POSIX 標準に従います。 このモードで
       は、対話的シェルは EENNVV 環境変数を展開し、  展開して得られた名前のファイ
       ルからコマンドの読み込みと実行を行います。 ほかの起動ファイルは全く読み
       込みません。

       bbaasshh は、リモートシェルデーモン _r_s_h_d やセキュアシェルデーモン  _s_s_h_d  に
       よって実行された場合など、標準入力がネットワーク接続に接続された 状態で
       実行されたかどうかを調べます。 この方法によって実行されていると bbaasshh が
       判断した場合、 _~_/_._b_a_s_h_r_c が存在し、かつ読み込み可能であれば、 bbaasshh はコ
       マンドをこのファイルから読み込んで実行します。 sshh  として呼び出された場
       合には、この動作は行いません。  ----nnoorrcc オプションを使えばこの動作を禁止
       できますし、 ----rrccffiillee  オプションを使えばほかのファイルを読ませるように
       もできます。  しかし一般的には _r_s_h_d は これらのオプションを付けてシェル
       を起動しませんし、 指定もできないようになっています。

       シェルが実ユーザ (グループ) ID と異なる実効ユーザ (グループ) ID  で起動
       され、  かつ --pp オプションが与えられていない場合は、 起動ファイルは全く
       読み込まれず、シェル関数は環境から継承されず、   SSHHEELLLLOOPPTTSS,   BBAASSHHOOPPTTSS,
       CCDDPPAATTHH,  GGLLOOBBIIGGNNOORREE  が環境変数に含まれていても無視され、 実効ユーザ ID
       には実ユーザ ID  が設定されます。  --pp  オプションが起動時に与えられた場
       合、 起動時の動作は同じですが、 実効ユーザ ID は再設定されません。

定定義義
       このドキュメントの残りの部分では、 以下の定義を使用します。
       ブブラランンクク ((bbllaannkk))
              空白文字またはタブ文字
       単単語語 ((wwoorrdd))
              シェルが  1 単位とみなす文字の並び。 トトーーククンン ((ttookkeenn)) とも言われ
              ます。
       名名前前 ((nnaammee))
              英数字とアンダースコア文字だけから構成され、  かつ最初の文字が英
              字かアンダースコア文字である _単_語。 識識別別子子 ((iiddeennttiiffiieerr)) とも言わ
              れます。
       メメタタ文文字字 ((mmeettaacchhaarraacctteerr))
              クォートされていない場合に、単語区切りとなる文字。  以下の文字の
              うちのいずれかです:
              ||  && ;; (( )) << >> ssppaaccee ttaabb
       制制御御演演算算子子 ((ccoonnttrrooll ooppeerraattoorr))
              制御機能を持つ _ト_ー_ク_ン。 以下のシンボルのうちのいずれかです:
              |||| && &&&& ;; ;;;; (( )) || ||&& <<nneewwlliinnee>>

予予約約語語
       _予_約_語  _(_r_e_s_e_r_v_e_d _w_o_r_d_) とはシェルにとって特別な意味を持つ単語です。 以
       下の単語がクォートされておらず、 かつ単純なコマンド (simple command) の
       先頭の単語  (後述の シシェェルルのの文文法法 を参照) であるか、 ccaassee コマンドや ffoorr
       コマンドの 3 番目の単語である場合には、予約語として認識されます:

       !! ccaassee  ddoo ddoonnee eelliiff eellssee eessaacc ffii ffoorr ffuunnccttiioonn iiff iinn sseelleecctt tthheenn  uunnttiill
       wwhhiillee {{ }} ttiimmee [[[[ ]]]]

シシェェルルのの文文法法
   単単純純ななココママンンドド ((SSiimmppllee CCoommmmaannddss))
       単純なコマンド (_s_i_m_p_l_e _c_o_m_m_a_n_d) とは、 変数の代入を並べたもの (これは省
       略可能です)  の後に、  ブランク区切りの単語とリダイレクションを記述し、
       最後に制御演算子を置いたものです。 最初の単語は実行するコマンドを指定し
       ます。 これは 0 番目の引き数となります。 残りの単語は起動されるコマンド
       に引き数として渡されます。

       単純なコマンドの返り値はコマンドの終了コードですが、シグナル _n を受けて
       コマンドが終了した場合には 128+_n となります。

   パパイイププラライインン ((PPiippeelliinnee))
       _パ_イ_プ_ラ_イ_ン _(_p_i_p_e_l_i_n_e_)は、制御演算子 || または ||&& で区切った 1 つ以上の
       コマンドの並びです。 パイプラインのフォーマットを以下に示します:

              [ttiimmee [--pp]] [ ! ] _c_o_m_m_a_n_d [ [||⎪||&&] _c_o_m_m_a_n_d_2 ... ]

       _c_o_m_m_a_n_d の標準出力は _c_o_m_m_a_n_d_2 の標準入力にパイプで接続されます。 この接
       続は、 コマンドで指定したどのリダイレクションよりも先に実行されます (後
       述の リリダダイイレレククトト を参照)。 ||&& を使うと、_c_o_m_m_a_n_d の標準エラー出力もパイ
       プを通して _c_o_m_m_a_n_d_2 の標準入力に接続されます。 これは 22>>&&11 || の短縮形で
       す。  この標準エラー出力の暗黙のリダイレクションは、 コマンドに指定され
       た全てのリダイレクションの後に実行されます。

       ppiippeeffaaiill オプションが有効になっている場合を除き、  パイプラインの返却ス
       テータスは最後のコマンドの終了ステータスになります。  ppiippeeffaaiill が有効に
       なっている場合には、 0 以外のステータスを返した最後の (一番右の) コマン
       ドの値が  パイプラインの返却ステータスになり、 全てのコマンドが正常終了
       した場合にのみ 0 になります。 パイプラインの前に、予約語である !! がある
       場合、  そのパイプラインの終了ステータスは上記の終了ステータスを 論理否
       定したものになります。 値を返す前に、シェルはパイプライン中の全てのコマ
       ンドが終了するのを待ちます。

       パイプラインの前に予約語 ttiimmee がある場合、コマンドの実行にかかった 経過
       時間・ユーザ時間・システム時間がパイプラインの終了時に報告されます。 --pp
       オプションを指定すると、  出力フォーマットが  POSIX  仕様に変わります。
       シェルが _p_o_s_i_x _モ_ー_ド のときには、 後に続くのが `-'  で始まるトークンで
       あれば ttiimmee を予約語と認識しません。 変数 TTIIMMEEFFOORRMMAATT には、経過時間情報
       の表示の仕方を指定するフォーマット文字列を 設定できます (後述の  シシェェルル
       変変数数 の項の TTIIMMEEFFOORRMMAATT に関する説明を参照)。

       シェルが  _p_o_s_i_x _モ_ー_ド のときには、ttiimmee の直後が 改行でもかまいません。
       この場合、シェルと子プロセスがそれまでに消費した ユーザ時間とシステム時
       間を出力します。         このときにも、経過時間情報のフォーマットを変数
       TTIIMMEEFFOORRMMAATT で指定できます。

       パイプライン中の各コマンドは、それぞれ別のプロセスとして    (つまりサブ
       シェル内で) 実行されます。

   リリスストト
       _リ_ス_ト _(_l_i_s_t_) とは、1つ以上のパイプラインを演算子 ;;, &&, &&&&, |||| のいずれ
       かで区切って並べたものです。パイプラインの最後に ;;, &&, <<nneewwlliinnee>> のいず
       れかを置くこともできます。

       リスト演算子のうち、 &&&& と |||| の優先順位は同じです。これらの次に、 ;; と
       && が同じ優先順位で続きます。

       _リ_ス_ト 中では、コマンドの区切りとして、  セミコロンの代わりに一つ以上の
       改行が使われることもあります。

       コマンドが制御演算子 && で終わっている場合、シェルはコマンドをサブシェル
       内で _バ_ッ_ク_グ_ラ_ウ_ン_ド _(_b_a_c_k_g_r_o_u_n_d_) で実行します。  シェルはコマンドが終
       了するのを待たずに、返却ステータス 0 を返します。 コマンドを ;; で区切っ
       た場合には、これらは順番に実行されます。 シェルはそれぞれのコマンドが終
       了するのを順番に待ちます。 返却ステータスは、最後に実行したコマンドの終
       了ステータスになります。

       AND リストと OR リストは、それぞれ制御演算子 &&&& と ||||  で区切られたパイ
       プラインの並びです。 AND リストと OR リストは左結合で実行されます。 AND
       リストは

              _c_o_m_m_a_n_d_1 &&&& _c_o_m_m_a_n_d_2

       という形式であり、  _c_o_m_m_a_n_d_1  が終了ステータス   0   を返した場合に限り
       _c_o_m_m_a_n_d_2 が実行されます。

       OR リストは

              _c_o_m_m_a_n_d_1 |||| _c_o_m_m_a_n_d_2

       という形式であり、 _c_o_m_m_a_n_d_1 が 0 以外の終了ステータスを返した場合に限り
       _c_o_m_m_a_n_d_2 が実行されます。 AND リストと OR リストの返却ステータスは、 リ
       スト中で最後に実行されたコマンドの終了ステータスです。

   複複合合ココママンンドド ((CCoommppoouunndd CCoommmmaannddss))
       _複_合_コ_マ_ン_ド _(_c_o_m_p_o_u_n_d _c_o_m_m_a_n_d_) を以下に示します:

       (_l_i_s_t) _l_i_s_t  はサブシェル内で実行されます (後述の ココママンンドド実実行行環環境境 のの項項
              をを参参照照))。。 シェルの環境に影響を与えるような変数の代入や組み込みコ
              マンドは、 コマンドの終了後に影響を残しません。 返却ステータスは
              _l_i_s_t の終了ステータスです。

       { _l_i_s_t; }
              _l_i_s_t が単に現在のシェル環境で実行されます。 _l_i_s_t  の最後は改行文
              字かセミコロンでなければなりません。これは        _グ_ル_ー_プ_コ_マ_ン
              _ド_(_g_r_o_u_p _c_o_m_m_a_n_d_) と呼ばれます。返却ステータスは  _l_i_s_t  の終了ス
              テータスです。  メタ文字である  (( や )) と違い、 {{ と }} は _予_約_語
              であり、予約語として認識される場所に現われる必要があることに注意
              してください。  これらは単語分割の対象とならないため、 _リ_ス_ト と
              の間が空白またはシェルのメタ文字で分かれている必要があります。

       ((_e_x_p_r_e_s_s_i_o_n))
              _e_x_p_r_e_s_s_i_o_n が後述の 算算術術式式評評価価  で説明される規則に従って評価され
              ます。  式の値が 0 でない場合、返却ステータスは 0 になります。そ
              うでない場合、  返されるステータスは  1  になります。これは  lleett
              ""_e_x_p_r_e_s_s_i_o_n"" と全く同じものです。

       [[[[ _e_x_p_r_e_s_s_i_o_n ]]]]
              条件式  _e_x_p_r_e_s_s_i_o_n の評価値に従って 0 または 1 を返します。 式は
              後述の 条条件件式式 で説明する、プライマリによって構成されます。  単語
              分割とパス名展開は  [[[[  と ]]]] の間の単語に対しては行われません。
              チルダ展開、パラメータと変数の展開、算術式展開、コマンド置換、
              プロセス置換、クォート除去は実行されます。 --ff などの条件演算子が
              プライマリとして認識されるためには、  クォートされていてはいけま
              せん。

              [[[[  においては、<< 演算子と >> 演算子は、 現在のロケールにおける辞
              書順で比較します。

              ==== 演算子と !!== 演算子が使われたとき、 演算子の右の文字列はパター
              ンと解釈され、    後述のパパタターーンンママッッチチンンググで説明する規則に従って
              マッチングが行われます。 シェルオプション nnooccaasseemmaattcchh が有効であ
              れば、  アルファベットの大文字と小文字を考慮せずにマッチングが行
              われます。 返り値は、==== 演算子では文字列がマッチしたときに、  !!==
              演算子では文字列がマッチしなかったときに 0 となり、 そうでない場
              合に 1  となります。  パターン中のどの部分でも、クォートすること
              で、 ただの文字列としてマッチングさせることができます。

              そのほか、二項演算子  ==~~ もあります。 優先順位は ==== や !!== と同じ
              です。 これを使うと、右辺の文字列は拡張正規表現とみなされ、 それ
              に従って (_r_e_g_e_x(3) にあるように) マッチングが行われます。 文字列
              がパターンにマッチすれば返り値は 0 であり、 マッチしなければ返り
              値は 1 になります。 正規表現が文法的に誤っていれば、条件式の返り
              値は 2 になります。  シェルオプション  nnooccaasseemmaattcchh  が有効であれ
              ば、  アルファベットの大文字と小文字を考慮せずにマッチングが行わ
              れます。 パターン中のどの部分でも、クォートすることで、 ただの文
              字列としてマッチングさせることができます。  正規表現中の括弧によ
              る部分式にマッチした部分文字列は、配列変数 BBAASSHH__RREEMMAATTCCHH に保存さ
              れます。  BBAASSHH__RREEMMAATTCCHH のインデックス 0 の要素は、文字列のうち正
              規表現全体にマッチした部分になります。 BBAASSHH__RREEMMAATTCCHH のインデック
              ス  _n の要素は、文字列のうち、 正規表現中の _n 番目の括弧による部
              分式にマッチした部分になります。

              式は以下の演算子を使って繋げられます。  以下に演算子を優先度の順
              に示します:

              (( _e_x_p_r_e_s_s_i_o_n ))
                     _e_x_p_r_e_s_s_i_o_n  の値を返します。これを用いて、 演算子の通常の
                     優先度を変更できます。
              !! _e_x_p_r_e_s_s_i_o_n
                     _e_x_p_r_e_s_s_i_o_n が偽ならば真になります。
              _e_x_p_r_e_s_s_i_o_n_1 &&&& _e_x_p_r_e_s_s_i_o_n_2
                     _e_x_p_r_e_s_s_i_o_n_1 と _e_x_p_r_e_s_s_i_o_n_2 が両方とも真であれば真になりま
                     す。
              _e_x_p_r_e_s_s_i_o_n_1 |||| _e_x_p_r_e_s_s_i_o_n_2
                     _e_x_p_r_e_s_s_i_o_n_1 と _e_x_p_r_e_s_s_i_o_n_2 のどちらかが真であれば真となり
                     ます。

              _e_x_p_r_e_s_s_i_o_n_1 の値だけで条件式全体の返り値が決定できれば、 &&&& 演算
              子と |||| 演算子は _e_x_p_r_e_s_s_i_o_n_2 を実行しません。

       ffoorr _n_a_m_e [ [ iinn [ _w_o_r_d _._._. ] ] ; ] ddoo _l_i_s_t ; ddoonnee
              iinn に続く単語のリストが展開され、要素のリストが生成されます。 変
              数  _n_a_m_e  には、このリストの各要素が順番にセットされ、そのたびに
              _l_i_s_t  が実行されます。「iinn _w_o_r_d」が省略された場合、 ffoorr コマンド
              は、設定されている位置パラメータそれぞれに対して _l_i_s_t を一度ずつ
              実行します(後述の  パパララメメーータタ を参照)。 返却ステータスは実行され
              た最後のコマンドの終了ステータスになります。 iinn に続く要素を展開
              した結果が空となった場合、  コマンドは全く実行されず、返却ステー
              タス 0 が返されます。

       ffoorr (( _e_x_p_r_1 ; _e_x_p_r_2 ; _e_x_p_r_3 )) ; ddoo _l_i_s_t ; ddoonnee
              最初に、算術式 _e_x_p_r_1  が、後述の  算算術術式式評評価価  で説明される規則に
              従って評価されます。 次に、算術式 _e_x_p_r_2 がゼロになるまで繰り返し
              評価されます。 算術式 _e_x_p_r_2 の評価結果がゼロでなければ、そのたび
              ごとに_l_i_s_tが実行され、  算術式 _e_x_p_r_3 が評価されます。 どの算術式
              も、省略された場合は、 評価結果が  1  であったものとして振舞いま
              す。 返却ステータスは _l_i_s_t 中で実行された 最後のコマンドの終了ス
              テータスとなりますが、  算術式のいずれかが不正である場合には偽と
              なります。

       sseelleecctt _n_a_m_e [ iinn _w_o_r_d ] ; ddoo _l_i_s_t ; ddoonnee
              iinn に続く単語のリストが展開され、要素のリストが生成されます。 展
              開された単語の集合が番号付きで標準エラー出力に出力されます。
              「iinn _w_o_r_d」が省略された場合、 位置パラメータが出力されます (後述
              の パパララメメーータタ を参照)。続いて PPSS33 プロンプトが表示され、標準入力
              から 1 行の読み込みが行われます。 表示された単語のいずれかに対応
              する数字がこの行に含まれていれば、 _n_a_m_e の値としてその単語が設定
              されます。  行が空であれば、単語とプロンプトが再び表示されます。
              EOF を読み込むとコマンドが終了します。  これ以外の値の場合には、
              _n_a_m_e には空文字列が設定されます。読み込んだ行は変数 RREEPPLLYY に格納
              されます。 bbrreeaakk コマンドが実行されるまで、選択を行うたびに _l_i_s_t
              が実行されます。 sseelleecctt の終了ステータスは、 _l_i_s_t 中で最後に実行
              したコマンドの終了ステータスですが、    コマンドが全く実行されな
              かった場合には 0 となります。

       ccaassee _w_o_r_d iinn [ [(] _p_a_t_t_e_r_n [ || _p_a_t_t_e_r_n ] ... ) _l_i_s_t ;; ] ... eessaacc
              ccaassee コマンドは最初に _w_o_r_d を展開し、それぞれの _p_a_t_t_e_r_n に対して
              順にマッチングを試みます。 マッチングの際にはパス名展開  (後述の
              パパスス名名展展開開  を参照) と同じ規則が用いられます。 _w_o_r_d には、チルダ
              展開、パラメータと変数の展開、算術式展開、  コマンド置換、プロセ
              ス置換、クォート除去が実行されます。 それぞれの _p_a_t_t_e_r_n は、チル
              ダ展開、パラメータと変数の展開、  算術式展開、コマンド置換、プロ
              セス置換、クォート除去のうえで比較されます。    シェルオプション
              nnooccaasseemmaattcchh が有効であれば、  アルファベットの大文字と小文字を考
              慮せずにマッチングが行われます。  マッチするものが見つかると、こ
              れに対応する _l_i_s_t が実行されます。  ;;;;  演算子を使うと、  最初に
              マッチしたパターン以降のマッチングは試みられません。 ;;;; の代わり
              に ;;&& を使うと、 その次のパターンに対応する _l_i_s_t  の実行に続きま
              す。 ;;;; の代わりに ;;;;&& を使うと、 次のパターンがあればそのマッチ
              ングを試み、 マッチすれば対応する _l_i_s_t を実行します。 マッチする
              パターンが無ければ、終了ステータスは 0 になります。 マッチするも
              のがあったら、終了ステータスは _l_i_s_t 中で最後に実行されたコマンド
              の終了ステータスになります。

       iiff _l_i_s_t; tthheenn _l_i_s_t_; [ eelliiff _l_i_s_t; tthheenn _l_i_s_t; ] ... [ eellssee _l_i_s_t; ] ffii
              最初に  iiff  _l_i_s_t  が実行されます。_l_i_s_t の終了ステータスが 0 なら
              ば、tthheenn _l_i_s_t が実行されます。 そうでなければ eelliiff _l_i_s_t がそれぞ
              れ順番に実行され、  _l_i_s_t  の終了ステータスが  0 ならば、対応する
              tthheenn _l_i_s_t が実行され、コマンドが終了します。そうでなければ、eellssee
              _l_i_s_t  が (もし存在すれば) 実行されます。終了ステータスは最後に実
              行されたコマンドの終了ステータスとなります。どの条件も真と評価さ
              れず、コマンドが全く実行されなかった場合、終了ステータスは  0 と
              なります。

       wwhhiillee _l_i_s_t_-_1; ddoo _l_i_s_t_-_2; ddoonnee
       uunnttiill _l_i_s_t_-_1; ddoo _l_i_s_t_-_2; ddoonnee
              wwhhiillee コマンドは、_l_i_s_t_-_1 中の最後のコマンドが終了ステータス 0 を
              返す間、繰り返して  _l_i_s_t_-_2  を実行します。uunnttiill コマンドは wwhhiillee
              コマンドとほぼ同じですが、  評価の条件が逆となる点が異なります。
              _l_i_s_t_-_2 は _l_i_s_t_-_1 中の最後のコマンドが 0 以外の終了ステータスを返
              す限りずっと実行されます。 wwhhiillee コマンドと uunnttiill コマンドの終了
              ステータスは、  ddoo _l_i_s_t_-_2 で実行された最後のコマンドの終了ステー
              タスになりますが、 コマンドが全く実行されなかった場合には 0 にな
              ります。

   ココププロロセセスス ((CCoopprroocceesssseess))
       _コ_プ_ロ_セ_ス _(_c_o_p_r_o_c_e_s_s_) とは、予約語 ccoopprroocc で始まるシェルのコマンドのこ
       とです。 コプロセスは、コマンドが制御演算子 &&  で終わっているときのよう
       に、  サブシェルで非同期に実行されます。 実行したシェルとコプロセスの間
       には、双方向のパイプが設けられます

       コプロセスのフォーマットを以下に示します:

              ccoopprroocc [_N_A_M_E] _c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n_s]

       これにより _N_A_M_E という名前のコプロセスが作られます。 _N_A_M_E  が指定されな
       い場合、デフォルトの名前は  _C_O_P_R_O_C となります。 _c_o_m_m_a_n_d が _単_純_な_コ_マ_ン
       _ド (前述) のときには、 _N_A_M_E は指定できません。 指定すると、単純なコマン
       ドの最初の単語として扱われます。 コプロセスが実行されると、実行したシェ
       ルのコンテキストに _N_A_M_E という名前の配列変数 (後述の 配配列列 を参照)  が作
       られます。 _c_o_m_m_a_n_d の標準出力は、実行しているシェルのファイル・ディスク
       リプターの一つと パイプによって接続されます。  このファイル・ディスクリ
       プターは  _N_A_M_E[0]  に代入されます。  _c_o_m_m_a_n_d の標準入力は、実行している
       シェルのファイル・ディスクリプターの一つと パイプによって接続されます。
       このファイル・ディスクリプターは  _N_A_M_E[1]  に代入されます。  このパイプ
       は、コマンドで指定されたほかのリダイレクトより先に設けられます  (後述の
       リリダダイイレレククトト を参照)。 ファイル・ディスクリプターは、標準的な単語展開に
       より、 シェルのコマンドの引き数やリダイレクションに指定できます。  コプ
       ロセスの実行で生成されたシェルのプロセス  ID は、変数 _N_A_M_E_PID の値にな
       ります。 コプロセスの終了を待つには、組み込みコマンド wwaaiitt を使います。

       コプロセスの返却ステータスは、_c_o_m_m_a_n_d の終了ステータスです。

   関関数数定定義義
       シェル関数とは、単純なコマンドとして呼び出されて、   新しい位置パラメー
       ターの一式を持つ複合コマンドを実行するもののことです。 シェル関数は以下
       の形式で宣言します:

       _n_a_m_e () _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n]
       ffuunnccttiioonn _n_a_m_e [()] _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d [_r_e_d_i_r_e_c_t_i_o_n]
              これによって   _n_a_m_e   という名前の関数が定義されます。    予約語
              ffuunnccttiioonn は省略可能です。 予約語 ffuunnccttiioonn が与えられた場合、括弧
              は省略可能です。 関数の _実_体 は複合コマンド _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d  で
              す (前述の 複複合合ココママンンドド を参照)。 多くの場合、 { と } に挟まれた
              コマンドの _リ_ス_ト が用いられますが、 前述の 複複合合ココママンンドド  で挙げ
              たどのコマンドを用いてもかまいません。  単純なコマンドの名前とし
              て _n_a_m_e を指定するといつでも  _c_o_m_p_o_u_n_d_-_c_o_m_m_a_n_d  が実行されます。
              関数の定義で指定されたリダイレクション (後述の リリダダイイレレククトト を参
              照)  は、関数が実行されるときに処理されます。   関数定義の終了ス
              テータスは、文法エラーが起きた場合や、  読み込み専用の関数が同じ
              名前で定義されていた場合を除き、0 です。  関数を実行したときの終
              了ステータスは、実体の中で最後に実行されたコマンドの終了ステータ
              スになります (後述の 関関数数 を参照)。

ココメメンントト ((CCOOMMMMEENNTTSS))
       シェルが対話的でない場合、または対話的なシェルにおいて 組み込みコマンド
       の sshhoopptt に対する iinntteerraaccttiivvee__ccoommmmeennttss オプションが有効となっている (後
       述の シシェェルルのの組組みみ込込みみココママンンドド を参照すること) 場合には、 ## で始まる単語
       があると、その単語とその行の残りの文字が全て無視されます。 対話シェルで
       は、 iinntteerraaccttiivvee__ccoommmmeennttss  オプションが有効でなければコメントは使えませ
       ん。対話シェルでは、  iinntteerraaccttiivvee__ccoommmmeennttss オプションはデフォルトで有効
       になっています。

ククォォーートト
       _ク_ォ_ー_ト _(_q_u_o_t_i_n_g_) を使うと、  特定の文字や単語が持つシェルに対する特別
       な意味をなくせます。 クォートを用いると、特殊文字の特殊な扱いを無効にし
       たり、 予約語が予約語として識別されることを防いだり、  パラメータの展開
       を防いだりできます。

       前述の  定定義義 で挙げた_メ_タ_文_字 _(_m_e_t_a_c_h_a_r_a_c_t_e_r_s_) にはそれぞれ特殊な意味が
       あるので、 その文字自身を表すためにはクォートしなければなりません。

       コマンドの履歴展開の機能 (後述の 履履歴歴のの展展開開 を参照)  が使われているとき
       には、_履_歴_展_開  文字 (通常は !!) の 履歴展開を防ぐためにはクォートしなけ
       ればなりません。

       クォートの方法には、 _エ_ス_ケ_ー_プ_文_字_(_e_s_c_a_p_e  _c_h_a_r_a_c_t_e_r_),  シングルクォー
       ト、ダブルクォートの 3 種類があります。

       クォートされていないバックスラッシュ  (\\)  は _エ_ス_ケ_ー_プ_文_字 です。エス
       ケープ文字は <newline> という例外を除き、 後に続く文字 1 つの文字として
       の値を保持させます。 \\<newline> という組み合わせが現われ、 かつバックス
       ラッシュ自身がクォートされていない場合には、 \\<newline>  は行を継続する
       ことを表します  (つまり、入力ストリームから改行文字が削除され、実質的に
       無視されます)。

       シングルクォートで文字を囲むと、 クォート内部のそれぞれの文字は文字とし
       ての値を保持します。 シングルクォートの間にシングルクォートを置くことは
       できません。 これはバックスラッシュを前に付けても同じです。

       ダブルクォートで文字を囲むとクォート内部の全ての文字は文字としての値を
       保持しますが、  $$, ``, \\ は例外となります。 履歴展開が有効なときには、 !!
       がこれに加わります。 $$ と ``  はダブルクォートの内部でも特殊な意味を失い
       ません。  バックスラッシュの場合は、次の文字が $$, ``, "", \\, <<nneewwlliinnee>> の
       いずれかである場合に限り特殊な意味を失いません。 前にバックスラッシュを
       付ければ、     ダブルクォート文字をダブルクォートによるクォートの内部で
       クォートできます。 履歴展開は有効であれば実行されますが、ダブルクォート
       中の  !! がバックスラッシュでエスケープされている場合を除きます。 !! の前
       のバックスラッシュは削除されません。

       特殊なパラメータである ** と @@  は、ダブルクォート内部でも特殊な意味を失
       いません (後述の パパララメメーータタ を参照)。

       $$'_s_t_r_i_n_g' の形式を持つ単語は特殊な扱いを受けます。 この単語は _s_t_r_i_n_g に
       展開され、 それから ANSI  C  標準で仕様が決められている、  バックスラッ
       シュでエスケープされている文字に置き換えられます。 バックスラッシュエス
       ケープシーケンスは、 (もし存在すれば) 以下のようにデコードされます:
              \\aa     警告 (ベル)
              \\bb     バックスペース
              \\ee
              \\EE     エスケープ文字
              \\ff     フォームフィード
              \\nn     改行
              \\rr     復帰 (carriage return)
              \\tt     水平タブ
              \\vv     垂直タブ
              \\\\     バックスラッシュ
              \\''     シングルクォート
              \\""     ダブルクォート
              \\_n_n_n   8 進値が _n_n_n である 8 ビット文字 (1  文字につき数字  1〜3
                     桁)
              \\xx_H_H   16 進値が _H_H である 8 ビット文字 (16 進で 1〜2 桁)。
              \\uu_H_H_H_H 16  進値が _H_H_H_H であるユニコード (ISO/IEC 10646) 文字 (16
                     進 1〜4 桁)。
              \\UU_H_H_H_H_H_H_H_H
                     16 進値が _H_H_H_H_H_H_H_H であるユニコード (ISO/IEC 10646)  文字
                     (16 進 1〜8 桁)。
              \\cc_x    control-_x の文字

       展開された結果はシングルクォートされているのと同じ状態で、 ドル記号は存
       在しなかったかのように扱われます。

       ダブルクォートされた文字列の前にドル記号があると ($$"_s_t_r_i_n_g")、 文字列は
       現在のロケールに従って変換されます。 現在のロケールが CC または PPOOSSIIXX な
       らば、 ドル記号は無視されます。文字列が変換されたり置換されたりした場合
       には、 その結果はダブルクォートされているのと同じ状態になります。

パパララメメーータタ
       _パ_ラ_メ_ー_タ  _(_p_a_r_a_m_e_t_e_r_)  は値を保持するためのものです。パラメータは  _名
       _前、 数字、後述の 特特殊殊ななパパララメメーータタ で挙げる特殊文字のいずれかで表現され
       ます。シェルでの用法においては、  _変_数_(_v_a_r_i_a_b_l_e_) とは _名_前 で表現された
       パラメータです。 変数は_値と 0 個以上の_属_性を持ちます。  属性は  ddeeccllaarree
       組み込みコマンド  (後述の  シシェェルルのの組組みみ込込みみココママンンドド の ddeeccllaarree の項を参
       照) で設定されます。

       パラメータに値が代入されていれば、 そのパラメータは設定 (set)  されてい
       ると言われます。 空文字列も有効な値です。一度値を設定すると、組み込みコ
       マンドの uunnsseett を使わなければ削除 (unset) できません (後述の シシェェルルのの組組
       みみ込込みみココママンンドド を参照)。

       _変_数 には、以下の構文で代入できます:

              _n_a_m_e=[_v_a_l_u_e]

       _v_a_l_u_e    が与えられなかった場合、変数には空文字列が代入されます。全ての
       _v_a_l_u_e に対して、チルダ展開、パラメータと変数の展開、コマンド置換、 算術
       式展開、クォート除去が行われます (後述の 展展開開 を参照)。変数の 整整数数 属性
       が設定されている場合 (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照)、$((...))
       の展開を使っていなくても  _v_a_l_u_e  に対しての算術展開が行われます (後述の
       算算術術式式展展開開 を参照)。 特特殊殊パパララメメーータタ  で後述する  ""$$@@""  という例外を除い
       て、単語の分割は行われません。  パス名展開も実行されません。 代入文は組
       み込みコマンドの aalliiaass, ddeeccllaarree, ttyyppeesseett, eexxppoorrtt, rreeaaddoonnllyy, llooccaall  の引
       き数でも使われます。

       代入文でシェル変数や配列のインデックスに値を代入する場面では、  += 演算
       子を使って変数の直前の値に追加したり加算したりできます。 +=  を_整_数属性
       が設定された変数に対して使うと、  _値は算術式展開として評価され、 変数の
       現在の値に加算されます。 += を配列変数への複合代入 (後述の 配配列列 を参照)
       で使うと、 変数の現在の値は (= を使ったときとは違って) 削除されません。
       インデックスによる配列の場合は、新しい値が最大のインデックス より一つ大
       きいインデックスから配列に追加されます。 連想配列の場合は、新しいキーと
       値の組が追加されます。 文字列の値の変数に対して使うと、_値が展開されて、
       変数の元の値の後に追加されます。

   位位置置パパララメメーータタ((PPoossiittiioonnaall PPaarraammeetteerrss))
       _位_置_パ_ラ_メ_ー_タ  _(_p_o_s_i_t_i_o_n_a_l _p_a_r_a_m_e_t_e_r_) は、1 桁以上の数値で表されるパラ
       メータです。ただし 0 は含みません。  位置パラメータは、シェルが起動され
       たときにシェルの引き数が代入されますが、  組み込みコマンドの sseett を使っ
       て代入し直すこともできます。 代入文を使って位置パラメータへの代入を行う
       ことはできません。  シェル関数が実行されると、 位置パラメータは一時的に
       置き換えられます (後述の 関関数数 を参照)。

       2 桁以上の数値を含む位置パラメータを展開するときには、ブレース ({})  で
       囲まなければなりません (後述の 展展開開 を参照)。

   特特殊殊パパララメメーータタ
       シェルはいくつかのパラメータを特別扱いします。 このようなパラメータは参
       照されるだけであり、 値を代入することは許されません。
       **      (1 から始まる) 全ての位置パラメータに展開されます。 ダブルクォー
              トの内部で展開が行われたときは、  それぞれのパラメータを特別な変
              数である IIFFSS の最初の文字で区切って並べた 1 つの単語に展開されま
              す。つまり、  "$$**"  は  "$$11_c$$22_c......" と同じです。 ここで _c は変数
              IIFFSS の値の最初の文字です。 IIFFSS  が設定されていなければ、パラメー
              タは空白で区切られます。  IIFFSS が空文字列の場合、パラメータの間に
              は区切り文字は入らず、 全てのパラメータは繋げられます。
       @@      (1 から始まる) 全ての位置パラメータに展開されます。 ダブルクォー
              トの内部で展開が行われたときは、  それぞれのパラメータは別々の単
              語に展開されます。 つまり "$$@@" は "$$11" "$$22" ... と同じです。  単
              語の中でダブルクォートの展開が行われるときには、  最初のパラメー
              タの展開結果に元の単語のダブルクォートより前の部分が      結び付
              き、最後のパラメータの展開結果に元の単語のダブルクォートより  後
              の部分が結び付きます。 位置パラメータがない場合には、"$$@@" や  $$@@
              を展開しても無かったことになります (つまり取り除かれます)。
       ##      位置パラメータの個数を示す 10 進値に展開されます。
       ??      最後に実行されたフォアグラウンドのパイプラインの  終了ステータス
              に展開されます。
       --      現在のオプションフラグに展開されます。  これは起動のときに指定し
              たり、組み込みコマンド  sseett  で設定したり、(  --ii オプション等で)
              シェル自身が設定したりします。
       $$      シェルのプロセス ID に展開されます。 () を使ったサブシェルの内部
              では、$  はサブシェルではなく、 現在のシェルのプロセス ID に展開
              されます。
       !!      最後に実行されたバックグラウンド (非同期) コマンドの プロセス ID
              に展開されます。
       00      シェルまたはシェルスクリプトの名前に展開されます。  これはシェル
              の初期化時に設定されます。  コマンドを記述したファイルを指定して
              bbaasshh  を起動した場合、 $$00 にはそのファイルの名前が設定されます。
              --cc オプションを付けて bbaasshh  を起動した場合、実行する文字列の後に
              引き数があれば、その最初の値が $$00 に設定されます。引き数がなけれ
              ば、 bbaasshh を起動するときに使用した名前が引き数 0  として与えられ
              $$00 に設定されます。
       __      シェルの起動時には、環境または引き数リストで渡された、  実行する
              シェルまたはシェルスクリプトの絶対パス名が設定されます。  その後
              では、直前のコマンドに対する最後の引き数 (展開後のもの) に展開さ
              れます。 また、実行する各コマンドの完全なパス名が設定され、 その
              コマンドの環境にエクスポートされます。  メールをチェックするとき
              には、  このパラメータは現在チェックしているメールファイル名を保
              持します。

   シシェェルル変変数数
       以下の変数はシェルが設定します:

       BBAASSHH   現在実行している bbaasshh を起動したときに使われた、完全なファイル名
              に展開されます。
       BBAASSHHOOPPTTSS
              コロン区切りのリストで、有効になっているシェルのオプションを示し
              ます。  リスト中のそれぞれの単語は、組み込みコマンド sshhoopptt の --ss
              オプション (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照) に対する有効
              な引き数になっています。  BBAASSHHOOPPTTSS に現われるオプションは、sshhoopptt
              コマンドで _o_n と表示されるものです。  もし  bbaasshh  を起動したとき
              に、この変数が環境変数に設定されていれば、  起動ファイルを読み込
              む前に、リストにある全てのシェルオプションが    有効に設定されま
              す。 この変数は読み込み専用です。
       BBAASSHHPPIIDD
              現在の bbaasshh のプロセス ID に展開されます。 bbaasshh を再初期化しない
              サブシェルのような、いくつかの環境においては、 $$$$ と値が異なりま
              す。
       BBAASSHH__AALLIIAASSEESS
              エイリアスの内部的なリストに対応する連想配列変数です。  エイリア
              スは通常、組み込みコマンド aalliiaass で操作します。 この配列に要素を
              追加すると、エイリアスのリストにも追加されます。  配列から要素を
              削除すると、エイリアスがリストから削除されます。
       BBAASSHH__AARRGGCC
              bbaasshh  の現在の呼び出しスタックについて、フレームごとの引き数の数
              が並んだ配列変数です。現在のサブルーチン   (シェル関数や、..   か
              ssoouurrccee で実行されたスクリプト)  の引き数の数が、スタックの一番上
              に置かれます。サブルーチンが実行されると、渡されたパラメータの数
              が  BBAASSHH__AARRGGCC  に追加されます。シェルが  BBAASSHH__AARRGGCC  を設定するの
              は、拡張デバッグモードのときだけです     (後述の組み込みコマンド
              sshhoopptt の eexxttddeebbuugg オプションを参照)。
       BBAASSHH__AARRGGVV
              bbaasshh  の現在の呼び出しスタックについて、全ての引き数が並んだ配列
              変数です。一連の呼び出しのうち、最後に呼ばれたサブルーチンの最後
              の引き数が、スタックの一番上に置かれます。最初に呼ばれたサブルー
              チンの最初の引き数が、スタックの一番下になります。サブルーチンが
              実行されると、渡されたパラメータが    BBAASSHH__AARRGGVV     に追加されま
              す。シェルが  BBAASSHH__AARRGGVV を設定するのは、拡張デバッグモードのとき
              だけです (後述の組み込みコマンド sshhoopptt の eexxttddeebbuugg  オプションを
              参照)。
       BBAASSHH__CCMMDDSS
              bbaasshh が内部に持つ、コマンドのハッシュテーブルに対応する 連想配列
              変数です。 ハッシュテーブルは通常、組み込みコマンド hash  で操作
              します。  この配列に要素を追加すると、ハッシュテーブルにも追加さ
              れます。  配列から要素を削除すると、ハッシュテーブルから削除され
              ます。
       BBAASSHH__CCOOMMMMAANNDD
              現在実行しているか実行しようとしているコマンドです。  ただし、ト
              ラップによってシェルが実行しているコマンドは別で、      その場合
              は、トラップの発動時に実行していたコマンドになります。
       BBAASSHH__EEXXEECCUUTTIIOONN__SSTTRRIINNGG
              起動オプション --cc で指定されたコマンドです。
       BBAASSHH__LLIINNEENNOO
              ソースファイル中の行番号からなる配列変数で、    それぞれの要素は
              FFUUNNCCNNAAMMEE      の各要素が呼び出された位置に対応します。      つま
              り、$${{BBAASSHH__LLIINNEENNOO[[_$_i]]}}  はソースファイル  ($${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}})
              中で$${{FFUUNNCCNNAAMMEE[[_$_i]]}} が呼び出された行番号です。  別のシェル関数か
              ら参照されると  $${{BBAASSHH__LLIINNEENNOO[[_$_i_-_1]]}} になります。 現在の行番号は
              LLIINNEENNOO で取得できます。
       BBAASSHH__RREEMMAATTCCHH
              条件コマンド [[[[ 中の二項演算子 ==~~ により設定される配列変数です。
              インデックス   0  の要素は、正規表現全体にマッチする部分文字列で
              す。 インデックス _n の要素は、_n 番目の括弧による部分式に  マッチ
              した部分文字列です。 この変数は読み込み専用です。
       BBAASSHH__SSOOUURRCCEE
              ソースファイル名からなる配列変数で、それぞれの要素は配列変数
              FFUUNNCCNNAAMMEE  の要素のシェル関数がそれぞれ定義されたファイル名に対応
              します。       シェル関数       $${{FFUUNNCCNNAAMMEE[[_$_i]]}}       はファイル
              $${{BBAASSHH__SSOOUURRCCEE[[_$_i]]}} で定義され、 $${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}}  から呼ばれ
              ています。
       BBAASSHH__SSUUBBSSHHEELLLL
              サブシェルやサブシェル環境が作成されるたびに 1 ずつ増えます。 初
              期値は 0 です。
       BBAASSHH__VVEERRSSIINNFFOO
              読み込み専用の配列変数で、配列の各要素は現在実行されている  bbaasshh
              のバージョン情報を持っています。  配列変数の要素に代入される内容
              を以下に示します:
              BBAASSHH__VVEERRSSIINNFFOO[[0]]        メジャーバージョン番号 (_リ_リ_ー_ス)。
              BBAASSHH__VVEERRSSIINNFFOO[[1]]        マイナーバージョン番号 (_バ_ー_ジ_ョ_ン)。
              BBAASSHH__VVEERRSSIINNFFOO[[2]]        パッチレベル。
              BBAASSHH__VVEERRSSIINNFFOO[[3]]        ビルドバージョン。
              BBAASSHH__VVEERRSSIINNFFOO[[4]]        リリースステータス (_b_e_t_a_1 など)。
              BBAASSHH__VVEERRSSIINNFFOO[[5]]        MMAACCHHTTYYPPEE の値。
       BBAASSHH__VVEERRSSIIOONN
              現在実行している bbaasshh のバージョンを示す文字列に展開されます。
       CCOOMMPP__CCWWOORRDD
              現在カーソル位置がある単語の 配列変数 $${{CCOOMMPP__WWOORRDDSS}} におけるイン
              デックスです。 この変数はプログラム補完機能 (後述の ププロロググララムム補補
              完完 を参照)  から呼ばれたシェル関数においてのみ有効です。
       CCOOMMPP__KKEEYY
              現在の補完関数を呼び出したキー     (またはキーシーケンスの最後の
              キー) です。
       CCOOMMPP__LLIINNEE
              現在のコマンドラインです。  この変数はプログラム補完機能 (後述の
              ププロロググララムム補補完完 を参照)  から呼ばれたシェル関数や外部コマンドにお
              いてのみ有効です。
       CCOOMMPP__PPOOIINNTT
              現在のコマンドの先頭からの相対値として与えられた  カーソル位置の
              インデックスです。  現在のカーソル位置が現在の現在のコマンドの最
              後にある場合、  この変数の値は  $${{##CCOOMMPP__LLIINNEE}} と等しくなります。
              この変数はプログラム補完機能 (後述の ププロロググララムム補補完完 を参照) から
              呼ばれたシェル関数や外部コマンドにおいてのみ有効です。
       CCOOMMPP__TTYYPPEE
              補完関数を呼び出した補完のタイプに対応する整数値が設定されます。
              _T_A_B は通常の補完です。 _?  は連続したタブ入力による候補のリスト表
              示です。 _! は途中まで補完した後の候補のリスト表示です。 _@ は、部
              分的な補完ができないときの候補のリスト表示です。 _%  はメニュー補
              完  (menu completion)です。 この変数はプログラム補完機能 (後述の
              ププロロググララムム補補完完 を参照)  から呼ばれたシェル関数と外部コマンドにお
              いてのみ有効です。
       CCOOMMPP__WWOORRDDBBRREEAAKKSS
              単語補完のときに rreeaaddlliinnee ライブラリが単語分割の区切り文字として
              扱う文字の並びです。 CCOOMMPP__WWOORRDDBBRREEAAKKSS を unset すると、この変数の
              特殊な性質はなくなります。後で再び set しても元には戻りません。
       CCOOMMPP__WWOORRDDSS
              現在のコマンドラインの各単語からなる配列変数  (後述の 配配列列 参照)
              です。    コマンドラインは     rreeaaddlliinnee     と同じように前述した
              CCOOMMPP__WWOORRDDBBRREEAAKKSS  によって単語に分割されます。 この変数はプログラ
              ム補完機能 (後述の ププロロググララムム補補完完 を参照) から呼ばれたシェル関数
              においてのみ有効です。
       CCOOPPRROOCC 無名のコプロセス  (前述の ココププロロセセスス を参照)  が入出力するファイ
              ル・ディスクリプターを保持する配列変数 (後述の 配配列列 参照) です。
       DDIIRRSSTTAACCKK
              現在のディレクトリスタックの内容を持つ配列変数 (後述の 配配列列 を参
              照) です。組み込みコマンド ddiirrss を使うと、スタック中のディレクト
              リがスタック順に表示されます。 配列変数の要素に代入を行うと、 既
              にスタックに入っているディレクトリを変更できますが、  ディレクト
              リの追加と削除を行うためには、組み込みコマンドの ppuusshhdd  と  ppooppdd
              を使わなければなりません。    この変数に代入を行っても現在の作業
              ディレクトリは変わりません。 DDIIRRSSTTAACCKK を uunnsseett  すると、この変数
              の特殊な性質はなくなります。後で再び   sseett  しても元には戻りませ
              ん。
       EEUUIIDD   現在のユーザの実効ユーザ ID に展開されます。  初期化はシェルの起
              動時に行われます。 この変数は読み込み専用です。
       FFUUNNCCNNAAMMEE
              現在の呼び出しスタックにある全てのシェル関数名が  入った配列変数
              です。 インデックス  0  の要素は、実行中のシェル関数の名前です。
              最も下の要素  (最大のインデックスの要素) は "main".  です。 この
              変数は、シェル関数を実行している間のみ存在します。 FFUUNNCCNNAAMMEE への
              代入は効果がなく、エラーステータスを返します。 FFUUNNCCNNAAMMEE を uunnsseett
              すると、この変数の特殊な性質はなくなります。後で再び sseett  しても
              元には戻りません。

              この変数の各要素は、BBAASSHH__LLIINNEENNOO や BBAASSHH__SSOOUURRCCEE の各要素に 対応し
              ます。  これらを参照することで、呼び出しスタックの状態を確認でき
              ます。  例えば、$${{FFUUNNCCNNAAMMEE[[_$_i]]}}  はファイル $${{BBAASSHH__SSOOUURRCCEE[[_$_i_+_1]]}}
              の行番号 $${{BBAASSHH__LLIINNEENNOO[[_$_i]]}} から呼び出されたものです。  組み込み
              コマンド  ccaalllleerr を実行すると、これらの情報から 現在の呼び出しス
              タックを表示します。
       GGRROOUUPPSS 現在のユーザがメンバになっているグループのリストを含んだ配列変数
              です。 GGRROOUUPPSS への代入は効果がなく、エラーステータスを返します。
              GGRROOUUPPSS が unset された場合はこの変数の特殊な性質はなくなります。
              その後に再設定されたとしても元に戻りません。
       HHIISSTTCCMMDD
              現在のコマンドの履歴番号 (履歴リストにおけるインデックス) です。
              HHIISSTTCCMMDD を uunnsseett  すると、この変数の特殊な性質はなくなります。後
              で再び sseett しても元には戻りません。
       HHOOSSTTNNAAMMEE
              現在のホスト名が自動的に設定されます。
       HHOOSSTTTTYYPPEE
              bbaasshh  を実行するマシンの種類をユニークに記述する文字列が自動的に
              設定されます。 デフォルト値はシステム依存です。
       LLIINNEENNOO この変数が参照されると、その場所ごとに、  スクリプトや関数におけ
              る現在の行番号  (1  から始まります) を表す 10 進値に置き換わりま
              す。スクリプトや関数の内部でない場合には、  意味のある値が代入さ
              れることは保証されません。  LLIINNEENNOO を uunnsseett すると、この変数の特
              殊な性質はなくなります。後で再び sseett しても元には戻りません。
       MMAACCHHTTYYPPEE
              bbaasshh を実行するシステムの種類を完全に指定する文字列が、 GNU 標準
              の  _c_p_u_-_c_o_m_p_a_n_y_-_s_y_s_t_e_m の形式で設定されます。 デフォルト値はシス
              テム依存です。
       MMAAPPFFIILLEE
              組み込みコマンド mmaappffiillee に変数名が指定されなかったときに 読み込
              んだテキストを保持する配列変数 (後述の 配配列列 を参照) です。
       OOLLDDPPWWDD ccdd コマンドで設定された、1 つ前の作業ディレクトリ。
       OOPPTTAARRGG 組み込みコマンド  ggeettooppttss で処理した最後のオプション引き数の値で
              す (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照)。
       OOPPTTIINNDD 組み込みコマンド ggeettooppttss  で次に処理されるオプション引き数のイン
              デックスです (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照)。
       OOSSTTYYPPEE bbaasshh  を実行するオペレーティングシステムを記述する文字列が自動的
              に設定されます。 デフォルト値はシステム依存です。
       PPIIPPEESSTTAATTUUSS
              フォアグラウンドで最後に実行したパイプラインの各プロセスの  終了
              ステータスのリストを含む配列変数です (後述の 配配列列 を参照)。 パイ
              プラインには 1 つのコマンドしかなくてもかまいません。
       PPPPIIDD   そのシェルの親のプロセス ID。この変数は読み込み専用です。
       PPWWDD    ccdd コマンドで設定された現在の作業ディレクトリ。
       RRAANNDDOOMM このパラメータが参照されるたびに、 0 から 32767 までのランダムな
              整数が生成されます。 RRAANNDDOOMM に値を代入すると、乱数の列を初期化で
              きます。 RRAANNDDOOMM を uunnsseett  すると、この変数の特殊な性質はなくなり
              ます。後で再び sseett しても元には戻りません。
       RREEAADDLLIINNEE__LLIINNEE
              rreeaaddlliinnee の編集バッファの内容です。 "bind -x" (後述の シシェェルルのの組組
              みみ込込みみココママンンドド を参照) で使います。
       RREEAADDLLIINNEE__PPOOIINNTT
              rreeaaddlliinnee  の編集バッファでの挿入ポイントの位置です。  "bind  -x"
              (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照) で使います。
       RREEPPLLYY  組み込みコマンド rreeaadd に引き数が与えられなかったときに読み込まれ
              た行が設定されます。
       SSEECCOONNDDSS
              このパラメータを参照すると、シェルが起動されてからの秒数が返され
              ます。  SSEECCOONNDDSS に値を代入した場合、それ以降の参照において返され
              る値は、      代入された値と代入以降の秒数を足した値になります。
              SSEECCOONNDDSS  を uunnsseett すると、この変数の特殊な性質はなくなります。後
              で再び sseett しても元には戻りません。
       SSHHEELLLLOOPPTTSS
              コロン区切りのリストで、有効になっているシェルのオプションを示し
              ます。 リスト中のそれぞれの単語は、組み込みコマンド sseett の --oo オ
              プション (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照) に対する有効な
              引き数になっています。  SSHHEELLLLOOPPTTSS  に入っているオプションは、sseett
              --oo を実行した場合にも _o_n であると報告されます。 この変数が  bbaasshh
              の起動時に環境変数に入っていた場合、  どの初期化ファイルを読むよ
              りも前にリスト中のシェルオプションが有効になります。  この変数は
              読み込み専用です。
       SSHHLLVVLL  bbaasshh  が起動するときに、環境変数で渡された値から  1 増やした値が
              設定されます。
       UUIIDD    現在のユーザのユーザ ID に展開されます。  初期化はシェルの起動時
              に行われます。 この変数は読み込み専用です。

       以下の変数はシェルが使用します。場合によっては、  bbaasshh がデフォルト値を
       変数に代入します。 そのような場合についてはそれぞれ注記します。

       BBAASSHH__EENNVV
              bbaasshh  がシェルスクリプトを実行するときにこの値が設定されている場
              合、  この値は (_~_/_._b_a_s_h_r_c のように) シェルを初期化するコマンドが
              書かれているファイル名と解釈されます。 BBAASSHH__EENNVV の値をファイル名
              として処理する前には、パラメータ展開、コマンド置換、  算術的展開
              が行われます。 この結果のファイルを検索する際には PPAATTHH  は使用さ
              れません。
       BBAASSHH__XXTTRRAACCEEFFDD
              有効なファイル・ディスクリプターに対応する整数をセットすると、
              bbaasshh は _s_e_t _-_x が設定されたときに、生成されたトレース出力を その
              ファイル・ディスクリプターに出力します。  BBAASSHH__XXTTRRAACCEEFFDD が unset
              されるか、新しい値が代入されると、  それまで設定されていたファイ
              ル・ディスクリプターはクローズされます。  BBAASSHH__XXTTRRAACCEEFFDD を unset
              するか空文字列を代入すると、  トレース出力は標準エラー出力に送ら
              れます。  BBAASSHH__XXTTRRAACCEEFFDD に 2 (標準エラー出力のファイル・ディスク
              リプター) を設定してしまうと、 unset  したときに標準エラー出力が
              クローズされてしまうことに 注意してください。
       CCDDPPAATTHH ccdd  コマンドの検索パスです。これは、  ccdd  コマンドで指定した対象
              ディレクトリを探すディレクトリを  コロンで区切って並べたリストで
              す。 例えば、 ".:~:/usr" といった値になります。
       CCOOLLUUMMNNSS
              組み込みコマンド sseelleecctt によって、選択されたリストを表示する際の
              端末幅の決定に用いられます。 SIGWINCH を受信すると自動的に設定さ
              れます。
       CCOOMMPPRREEPPLLYY
              bbaasshh が可能な補完候補を読み込む配列変数です。 この値はプログラム
              補完機能 (後述の ププロロググララムム補補完完 を参照) によって呼び出されたシェ
              ル関数によって生成されます。
       EEMMAACCSS  bbaasshh  が起動したときにこの環境変数が設定されて値が "t", になって
              いると、Emacs のシェルバッファで動作しているとみなし、  行編集を
              無効にします。
       EENNVV    BBAASSHH__EENNVV と類似の変数で、POSIX モードで使われます。
       FFCCEEDDIITT 組み込みコマンド ffcc が使うデフォルトのエディタです。
       FFIIGGNNOORREE
              ファイル名補完  (後述の  RREEAADDLLIINNEE  を参照)  を行う際に無視するサ
              フィックスを コロンで区切って並べたリストです。 FFIIGGNNOORREE のエント
              リのいずれかにサフィックスがマッチするファイル名は、  ファイル名
              補完にマッチするファイルのリストから除外されます。  例えば値とし
              て ".o:~" を設定します。
       FFUUNNCCNNEESSTT
              0  より大きい数値を設定すると、関数呼び出しを何重まで許すかの 最
              大レベルを決めます。  このレベルを超えて関数を呼び出すと、コマン
              ドが異常終了します。
       GGLLOOBBIIGGNNOORREE
              パス名展開で無視するファイル名の集合を定義するパターンを  コロン
              で区切って並べたリストです。  パス名展開パターンにマッチするファ
              イル名が   GGLLOOBBIIGGNNOORREE   内のパターンのどれかにもマッチする場合、
              マッチしたもののリストから削除されます。
       HHIISSTTCCOONNTTRROOLL
              履歴リストに入れるコマンドを制御する値をコロンで区切って並べたリ
              ストです。  _i_g_n_o_r_e_s_p_a_c_e の値が設定されていると、 空空白白 文字で始ま
              る行は履歴リストに入りません。  _i_g_n_o_r_e_d_u_p_s  の値が設定されている
              と、      履歴の最後の行にマッチする行は履歴リストに入りません。
              _i_g_n_o_r_e_b_o_t_h を指定すると _i_g_n_o_r_e_s_p_a_c_e と _i_g_n_o_r_e_d_u_p_s の両方が指定さ
              れます。  _e_r_a_s_e_d_u_p_s の値が設定されていると、行が保存される前に、
              現在の行に一致する過去の行が履歴リストから削除されます。  上記以
              外の値を設定しても無視されます。  HHIISSTTCCOONNTTRROOLL が設定されていない
              場合や、不正な値が設定されている場合には、  シェルのパーザが読み
              込んだ全ての行は HHIISSTTIIGGNNOORREE の値が示す条件の下で履歴リストに保存
              されます。 複数行にまたがる複合コマンドの場合は 2 番目以降の行が
              調べられることはありません。よって、これらは  HHIISSTTCCOONNTTRROOLL の値に
              関わらず履歴に追加されます。
       HHIISSTTFFIILLEE
              コマンド履歴が保存されるファイルの名前 (後述の 履履歴歴  を参照)。デ
              フォルト値は  _~_/_._b_a_s_h___h_i_s_t_o_r_y です。 設定されていない場合、 対話
              シェルが終了するときに履歴の保存が行われません。
       HHIISSTTFFIILLEESSIIZZEE
              履歴ファイルに保持する履歴の最大数です。この変数に値が代入された
              場合、  その行数を越えないように、必要に応じて古いエントリを削除
              して履歴ファイルを 切り詰めます。 デフォルト値は 500  です。対話
              シェルが終了するときにも、  履歴ファイルのサイズはファイル書き込
              みの後にこのサイズに切り詰められます。
       HHIISSTTIIGGNNOORREE
              どのコマンド行を履歴リストに保存するかを決めるために使うパターン
              を コロンで区切って並べたリストです。 それぞれのパターンは行の先
              頭から比較され、 行全体と完全に一致しなければなりません (`**'  が
              暗黙的に追加されるこ とはありません)。行に対する各パターンの評価
              は HHIISSTTCCOONNTTRROOLL で指定したチェックが行われた後で実行されます。 通
              常のシェルのパターンマッチング文字以外に、  `&&' が履歴の前の行に
              マッチします。 バックスラッシュを使って  `&&'  をエスケープできま
              す。 マッチングを試みる前にバックスラッシュは取り除かれます。 複
              数行にまたがる複合コマンドの場合、2   番目以降の行は調べられませ
              ん。  よって、これらは HHIISSTTIIGGNNOORREE の値に関わらず履歴に追加されま
              す。
       HHIISSTTSSIIZZEE
              コマンド履歴に記憶するコマンドの数 (後述の HHIISSTTOORRYY を参照)。  デ
              フォルトは 500 です。
       HHIISSTTTTIIMMEEFFOORRMMAATT
              この変数に空でない値が設定されると、 組み込みコマンド hhiissttoorryy で
              履歴エントリを表示するときに      タイムスタンプを表示するための
              _s_t_r_f_t_i_m_e(3) の書式文字列 として使われます。 この変数が設定される
              と、ほかのシェルのセッションでも使えるように  タイムスタンプは履
              歴ファイルに書き込まれます。  タイムスタンプはほかの履歴行と区別
              するために履歴のコメントとなります。
       HHOOMMEE   現在のユーザのホームディレクトリです。 組み込みコマンド ccdd  のデ
              フォルトの引き数になります。  この変数の値は、チルダ展開を実行す
              るときにも使われます。
       HHOOSSTTFFIILLEE
              _/_e_t_c_/_h_o_s_t_s と同じフォーマットであり、 シェルがホスト名を補完する
              必要があるときに読み込むファイルの名前を示します。  シェルの実行
              中でも補完するホスト名のリストを変更できます。  この変数が変更さ
              れた次の機会にホスト名の補完を試みるとき、 bbaasshh は新しいファイル
              の内容を既存のデータベースに追加します。 HHOOSSTTFFIILLEE が設定されてい
              るがその値が空文字列の場合や、  読み込めるファイルの名前ではない
              場合には、   bbaasshh   は補完可能なホスト名のリストを取得するために
              _/_e_t_c_/_h_o_s_t_s を使用します。 HHOOSSTTFFIILLEE が unset された場合は、ホスト
              名のリストはクリアされます。
       IIFFSS    _内_部_フ_ィ_ー_ル_ド_区_切_り_文_字 _(_I_n_t_e_r_n_a_l _F_i_e_l_d _S_e_p_a_r_a_t_o_r_) です。展開を
              行った後に単語を分割する場合や、組み込みコマンドの rreeaadd を使った
              ときに行を単語に分割する場合に使われます。  デフォルト値は  “<空
              白><タブ><改行>” です。
       IIGGNNOORREEEEOOFF
              単独で入力された  EEOOFF 文字を受け取ったときの対話シェルの動作を制
              御します。  この変数が設定されていれば、指定されている値の数だけ
              の  EEOOFF 文字を連続して行頭の文字として入力しなければ bbaasshh は終了
              しません。この変数に数値以外の値が設定されている場合や、  空の値
              が設定されている場合には、デフォルト値として  10  が使われます。
              この変数が存在しなければ、 EEOOFF  文字はシェルへの入力の終わりを示
              します。
       IINNPPUUTTRRCC
              rreeaaddlliinnee    の起動ファイルのファイル名です。これはデフォルト値の
              _~_/_._i_n_p_u_t_r_c (後述の RREEAADDLLIINNEE を参照) を上書きします。
       LLAANNGG   ロケールカテゴリが LLCC__ で始まる変数によって明示的に指定されて い
              ない場合、そうしたカテゴリのロケールを決定するのに使用されます。
       LLCC__AALLLL この変数はロケールカテゴリを指定する  LLCC__ 変数と LLAANNGG の値に優先
              します。
       LLCC__CCOOLLLLAATTEE
              この変数はパス名展開の結果をソートするときに使用される照合順序
              と、  パス名展開とパターンマッチングにおける  範囲表現、等値クラ
              ス、照合順序の動作を決定します。
       LLCC__CCTTYYPPEE
              この変数は、パス名展開とパターンマッチングにおける  文字の解釈と
              文字クラスに含まれる文字を決めます。
       LLCC__MMEESSSSAAGGEESS
              この変数は、$$  の後に続くダブルクォートされた文字列の 翻訳に使う
              ロケールを決めます。
       LLCC__NNUUMMEERRIICC
              この変数は数字のフォーマットに使用するロケールカテゴリを決定しま
              す。
       LLIINNEESS  組み込みコマンド sseelleecctt によって、選択されたリストを表示する際の
              行数の決定に用いられます。 SSIIGGWWIINNCCHH を受信すると自動的に設定され
              ます。
       MMAAIILL   このパラメータにファイル名またはディレクトリ名が設定されてお
              り、かつ変数 MMAAIILLPPAATTHH が設定されていなければ、 bbaasshh は指定された
              ファイルまたはMaildier形式のディレクトリへの  メールの到着をユー
              ザに通知します。
       MMAAIILLCCHHEECCKK
              bbaasshh がメールをチェックする頻度を (秒数で) 指定します。 デフォル
              ト値は 60 秒です。 メールをチェックする時間になると、 シェルはプ
              ライマリのプロンプトを表示する前にチェックを行います。  この変数
              が  unset された場合、 あるいはこの変数に 0 以上の数値以外が代入
              された場合は、 シェルはメールのチェックを行いません。
       MMAAIILLPPAATTHH
              メールのチェックに使うファイル名をコロンで区切って並べたリストで
              す。 特定のファイルにメールが到着したときに出力される メッセージ
              は、`?'  を使ってファイル名をメッセージから区切ることによって 指
              定できます。メッセージのテキスト中で使われたときは、 $$__ は現在の
              メールファイルの名前に展開されます。 設定例:
              MMAAIILLPPAATTHH='/var/mail/bfox?"You  have  mail":~/shell-mail?"$_  has
              mail!"'
              この変数のデフォルト値は bbaasshh が与えますが、 bbaasshh が使うユーザの
              メールファイルの位置はシステム依存です (/var/mail/$$UUSSEERR 等)。
       OOPPTTEERRRR 値として  1   が設定されている場合、   bbaasshh   は組み込みコマンド
              ggeettooppttss  (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照) を使って生成し
              たエラーメッセージを表示します。  シェルが起動されたり、シェルス
              クリプトが実行されたりするたびに、  OOPPTTEERRRR  は  1 に初期化されま
              す。
       PPAATTHH   コマンドの検索パスです。  シェルがコマンドを検索するディレクトリ
              をコロンで区切って並べたリストです  (後述の  ココママンンドドのの実実行行 を参
              照)。 PPAATTHH 中の長さ 0 の (空の) ディレクトリ名は、カレントディレ
              クトリを示します。   空のディレクトリ名は、2  つのコロンを並べる
              か、 先頭や末尾のコロンで表します。 デフォルトのパスはシステム依
              存で、  bbaasshh をインストールしたシステム管理者が設定します。 一般
              的な値は  ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin''
              です。
       PPOOSSIIXXLLYY__CCOORRRREECCTT
              bbaasshh  が起動したときにこの環境変数が設定されていると、  起動オプ
              ション ----ppoossiixx  を指定したときと同じように、どの初期化ファイルを
              読むよりも前に シェルが _p_o_s_i_x _モ_ー_ド になります。 シェルの実行中
              にこの変数が設定されると、 bbaasshh は _s_e_t _-_o _p_o_s_i_x コマンドを実行し
              たときと同じように、_p_o_s_i_x _モ_ー_ド が有効になります。
       PPRROOMMPPTT__CCOOMMMMAANNDD
              設定されていると、プライマリプロンプトを出す前に毎回、  この値が
              コマンドとして実行されます。
       PPRROOMMPPTT__DDIIRRTTRRIIMM
              0 より大きい値が設定されると、  プロンプト文字列のエスケープシー
              ケンス  \\ww  や  \\WW  (後述の  ププロロンンププトト  を参照)  を展開するとき
              に、ディレクトリがパス名の最後からこの数だけ残ります。  削られた
              部分は省略記号に置き換えられます。
       PPSS11    このパラメータの値は展開されてプライマリのプロンプト文字列として
              使われます。   (後述の   ププロロンンププトト   を参照)、   デフォルト値は
              “\\ss--\\vv\\$$ ” です。
       PPSS22    このパラメータの値は  PPSS11 と同じように展開され、セカンダリのプロ
              ンプト文字列として使われます。 デフォルト値は “>> ” です。
       PPSS33    このパラメータの値は sseelleecctt コマンド (前述の  シシェェルルのの文文法法  を参
              照) のプロンプトとして使われます。
       PPSS44    このパラメータは   PPSS11  と同じように展開されます。この値は実行ト
              レース中に bbaasshh が表示する各コマンド前に出力されます。  複数段の
              間接レベル (levels of indirection) を示すときは、 PPSS44 の最初の文
              字が必要に応じて複数回表示されます。 デフォルト値は “++ ” です。
       SSHHEELLLL  この環境変数にシェルのフルパス名が保存されています。  シェルを起
              動したときに設定されていない場合は、 bbaasshh が現在のユーザのログイ
              ンシェルのフルパス名を代入します。
       TTIIMMEEFFOORRMMAATT
              このパラメータの値は、予約語である ttiimmee が先頭に付いているパイプ
              ラインに対して、  時間情報の表示の仕方を指定するフォーマット文字
              列として使われます。 %%  は、時間の値などに展開される  エスケープ
              シーケンスを示すための文字です。  エスケープシーケンスとその意味
              を以下に示します。 ただし、ブレース ([])  は省略可能であることを
              表しま す。
              %%%%        %% 文字そのもの。
              %%[[_p]][[ll]]RR  経過した秒数。
              %%[[_p]][[ll]]UU  ユーザモードで使われた CPU の秒数。
              %%[[_p]][[ll]]SS  システムモードで使われた CPU の秒数。
              %%PP        CPU のパーセンテージ。(%U + %S) / %R で算出されます。

              _p 省略可能で、_精_度 _(_p_r_e_c_i_s_i_o_n_) が何桁であるかを指定します。 つま
              り小数点以下の桁数を指定します。この値が 0 ならば、 小数点や小数
              の部分は出力されません。 また、小数点以下で指定できるのは 3 桁ま
              でです。 つまり、_p の値が 3 より大きければ 3 に変更されます。  _p
              を指定しなければ、この値は 3 となります。

              ll は省略可能ですが、指定すると、分を含み、 _M_Mm_S_S._F_F という形式の
              長いフォーマットになります。 小数を含むかどうかは _p の値によって
              決まります。

              この変数が設定されていなければ、             bbaasshh             は
              $$''\\nnrreeaall\\tt%%33llRR\\nnuusseerr\\tt%%33llUU\\nnssyyss%%33llSS''  という値が指定されているか
              のように動作します。  この値が空文字列ならば、時間の情報は表示さ
              れません。  フォーマット文字列の表示の際には、末尾に改行文字が追
              加されます。
       TTMMOOUUTT  0  より大きい値を設定すると、  TTMMOOUUTT の値が組み込みコマンド rreeaadd
              のデフォルトのタイムアウト値となります。 sseelleecctt コマンドは、端末
              からの入力の際に TTMMOOUUTT 秒入力がないと終了します。 対話シェルでは
              この値は、プライマリのプロンプトを出してから  入力を待つ秒数とし
              て解釈されます この秒数待って入力が来ないと、 bbaasshh は終了します
       TTMMPPDDIIRR 設定すると、値を  bbaasshh がシェル用にテンポラリファイルを作る ディ
              レクトリ名として使います。
       aauuttoo__rreessuummee
              この変数は、ユーザがジョブ制御をするときの方法を変更します。  こ
              の変数を設定した場合、1 語からなるリダイレクトなしの単純なコマン
              ドを  入力すると、停止中のジョブの実行再開候補として扱われます。
              曖昧な指定は許されず、入力された文字列で始まるジョブが複数ある場
              合には、 最後にアクセスされたものが選ばれます。 停止中のジョブの
              _名_前    とは、コマンドを起動する際に使ったコマンドラインのことで
              す。 この変数の値に _e_x_a_c_t が設定されている場合、  与えられた文字
              列は停止中のジョブの名前に    正確にマッチしなければなりません。
              _s_u_b_s_t_r_i_n_g  が設定されている場合は、   与えられた文字列は停止中の
              ジョブの名前の部分文字列に  マッチする必要があります。 _s_u_b_s_t_r_i_n_g
              という値は、ジョブ識別子の %%??  に似た機能を持っています  (後述の
              ジジョョブブ制制御御 を参照)。 これ以外の値が設定されている場合、 与えられ
              た文字列は停止中のジョブの名前の      先頭部分でなければなりませ
              ん。これはジョブ識別子の %%_s_t_r_i_n_g と似た機能を持っています。
       hhiissttcchhaarrss
              2  文字または 3 文字で、 履歴の展開とトークン分割 (後述の 履履歴歴のの
              展展開開  を参照)  を制御します。  最初の文字は  _履_歴_展_開   (history
              expansion) _文_字_で_あ_り_、 _履_歴_展_開_の_先_頭_を_示_す_文_字_で_す_。_通_常_、_こ_れ
              _は _`!!_' _で_す_。 _2 _番_目_の_文_字_は _簡_易_置_換 _(_q_u_i_c_k _s_u_b_s_t_i_t_u_t_i_o_n_)  _文_字
              _で_あ_り_、_直_前_に_入_力_し_た_コ_マ_ン_ド_の_文_字_列_を  _別_の_文_字_列_に_置_き_換_え_て
              _再_実_行_す_る_た_め_の_省_略_表_現_と_し_て_使_い_ま_す_。 _デ_フ_ォ_ル_ト_値_は  _`^^_'  _で
              _す_。  _3 _番_目_の_文_字_は_省_略_可_能_で_す_。_単_語_の_先_頭_で_こ_の_文_字_が_見_つ_か_る
              _と_、 _行_の_残_り_の_部_分_が_コ_メ_ン_ト_と_な_る_よ_う_な_文_字_を_指_定_し_ま_す_。 _こ_れ
              _は_通_常_は  _`##_' _で_す_。 _履_歴_コ_メ_ン_ト_文_字_が_あ_る_と_、 _そ_の_行_の_残_り_の_単
              _語_に_対_す_る_履_歴_置_換_は_ス_キ_ッ_プ_さ_れ_ま_す_。  _こ_の_文_字_が_あ_る_か_ら_と_い_っ
              _て_、  _必_ず_し_も_シ_ェ_ル_の_パ_ー_ザ_が_行_の_残_り_の_部_分_を_コ_メ_ン_ト_と_し_て_扱_う
              _わ_け_で_は_あ_り_ま_せ_ん_。

   配配列列
       bbaasshh は 1  次元のインデックスによる配列と連想配列の変数を扱うことができ
       ます。  全ての変数は配列として使用できます。 ddeeccllaarree 組み込みコマンドを
       使えば、明示的に配列を宣言できます。 配列のサイズの上限はありませんし、
       メンバのインデックス付けや代入を 連続的にしなければならないという条件も
       ありません。 インデックスによる配列は整数 (算術式を含む) で参照します。
       インデックスは 0 から始まります。 連想配列は任意の文字列で参照します。

       変数の代入の際に _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e という記法が使われた場合、配列は
       自動的に生成されます。 _s_u_b_s_c_r_i_p_t は算術式として扱われますが、この式は評
       価すると  数値になるものでなければなりません。 _s_u_b_s_c_r_i_p_t を評価すると 0
       未満の数になる場合、最大のインデックス +1  からのオフセットとして扱われ
       ます。つまり、subscript  が -1 のときは、配列の最後の要素を参照します。
       インデックスによる配列を明示的に宣言するには、 ddeeccllaarree --aa _n_a_m_e を使いま
       す    (後述の    シシェェルルのの組組みみ込込みみココママンンドド    を参照)。    ddeeccllaarree    --aa
       _n_a_m_e[[_s_u_b_s_c_r_i_p_t]] も許されます。このとき _s_u_b_s_c_r_i_p_t は無視されます。

       連想配列は ddeeccllaarree --AA _n_a_m_e で作ります。

       組み込みコマンドの ddeeccllaarree と rreeaaddoonnllyy を使うと、配列変数に対して属性を
       設定できます。 どの属性も配列のメンバ全てに対して適用されます。

       配列の代入は  _n_a_m_e=((value_1  ...  value_n)) という形式の複合代入 (compound
       assignment)   を用いて行います。   ここでそれぞれの   _v_a_l_u_e    の形式は
       [_s_u_b_s_c_r_i_p_t]=_s_t_r_i_n_g  です。  インデックスによる配列では、ブラケット ([])
       と subscript は省略できます。 ブラケットと subscript を省略しなかった場
       合、  そのインデックスに対して代入が行われます。 省略した場合には、代入
       される要素のインデックスは、 その文の中で直前に代入されたインデックスに
       1 を加えたものになります。 インデックスは 0 から始まります。

       連想配列への代入では、subscript は省略できません。

       この記法は組み込みコマンド ddeeccllaarree でも使えます。個別の配列要素に対する
       代入は、先に説明した _n_a_m_e[_s_u_b_s_c_r_i_p_t]=_v_a_l_u_e の記法を使って行います。

       配列の任意の要素は、${_n_a_m_e[_s_u_b_s_c_r_i_p_t]} を使って参照できます。  パス名展
       開との衝突を避けるためにブレースが必要です。  _s_u_b_s_c_r_i_p_t  が @@ か ** なら
       ば、配列の参照は _n_a_m_e の全ての要素に展開されます。この 2 つの添字が異な
       るのは、   単語がダブルクォートの内部にある場合だけです。  単語がダブル
       クォートされていれば、${_n_a_m_e[*]} は 1 つの単語に展開されます。 この単語
       は、配列の各メンバの値を特殊変数  IIFFSS  の最初の値で区切って並べたもので
       す。一方、${_n_a_m_e[@]} は、 _n_a_m_e の各要素を別々の単語に展開します。  配列
       のメンバが全くないときは、${_n_a_m_e[@]}  は空の単語に展開されます。 単語の
       中でダブルクォートの展開が行われるときには、 元の単語のダブルクォートよ
       り前の部分の後に  最初のパラメータの展開結果がつながり、 最後のパラメー
       タの展開結果の後に 元の単語のダブルクォートより後の部分がつながります。
       これは特殊パラメータ  **  や @@ の展開に似ています (前述の 特特殊殊パパララメメーータタ
       を参照)。 ${#_n_a_m_e[_s_u_b_s_c_r_i_p_t]} は ${_n_a_m_e[_s_u_b_s_c_r_i_p_t]}  の長さに展開されま
       す。  _s_u_b_s_c_r_i_p_t  が  **  または  @@ の場合は、 配列中の要素数に展開されま
       す。添字なしで配列変数を参照すると、 0 番目の要素を参照したことになりま
       す。

       配列変数は  subscript に対して値が代入されていれば 設定されているとみな
       されます。 空文字列は有効な値です。

       組み込みコマンドの        uunnsseett         は配列の削除に使われます。uunnsseett
       _n_a_m_e[_s_u_b_s_c_r_i_p_t] とすると、インデックスが _s_u_b_s_c_r_i_p_t である配列の要素が削
       除されます。 パス名展開による意図しない副作用に注意してください。 uunnsseett
       _n_a_m_e  (_n_a_m_e は配列) または uunnsseett _n_a_m_e[_s_u_b_s_c_r_i_p_t] (_s_u_b_s_c_r_i_p_t が ** または
       @@) とすると、 配列全体が削除されます。

       組み込みコマンドの ddeeccllaarree, llooccaall, rreeaaddoonnllyy いずれにおいても、 --aa  オプ
       ションでインデックスによる配列を指定できます。  --AA また、オプションで連
       想配列を指定できます。 両方が指定されたときには、 --AA が優先します。  組
       み込みコマンド  rreeaadd では、 --aa オプションを使えば標準入力から読み込んだ
       単語のリストを 配列に代入できます。 組み込みコマンド sseett と ddeeccllaarree  で
       は、別の変数への代入に再利用できるような形で配列の値を表示します。

展展開開
       展開はコマンドラインが単語へ分割された後に  (コマンドライン上で) 行われ
       ます。行われる展開は 7 種類あります: _ブ_レ_ー_ス_展_開 _(_b_r_a_c_e _e_x_p_a_n_s_i_o_n_), _チ
       _ル_ダ_展_開   _(_t_i_l_d_e  _e_x_p_a_n_s_i_o_n_),  _パ_ラ_メ_ー_タ_と_変_数_の_展_開  _(_p_a_r_a_m_e_t_e_r  _a_n_d
       _v_a_r_i_a_b_l_e _e_x_p_a_n_s_i_o_n_), _コ_マ_ン_ド_置_換  _(_c_o_m_m_a_n_d  _s_u_b_s_t_i_t_u_t_i_o_n_),  _算_術_式_展_開
       _(_a_r_i_t_h_m_e_t_i_c   _e_x_p_a_n_s_i_o_n_),   _単_語_の_分_割   _(_w_o_r_d  _s_p_l_i_t_t_i_n_g_),  _パ_ス_名_展_開
       _(_p_a_t_h_n_a_m_e _e_x_p_a_n_s_i_o_n_)。

       展開の順序は次のようになります:  ブレース展開、チルダ展開、パラメータ・
       変数・算術式展開、コマンド置換 (左から右へ)、単語分割、パス名展開。

       これらに加えて _プ_ロ_セ_ス_置_換 _(_p_r_o_c_e_s_s _s_u_b_s_t_i_t_u_t_i_o_n_) をサポートできるシス
       テムもあります。

       展開した部分の単語の数が変化することがあるのは、ブレース展開、 単語の分
       割、パス名展開だけです。ほかの展開では、  1 つの単語は 1 つの単語に展開
       されます。 この規則の唯一の例外は先に説明した "$$@@" と "$${{_n_a_m_e[[@@]]}}" の展
       開 ( パパララメメーータタ を参照) だけです。

   ブブレレーースス展展開開
       _ブ_レ_ー_ス_展_開 _(_b_r_a_c_e _e_x_p_a_n_s_i_o_n_) を使うと、任意の文字列を生成できます。こ
       の仕組みは _パ_ス_名_展_開に似ていますが、  生成されたファイル名が実在する必
       要はありません。  ブレース展開されるパターンは、 _前_置_部_分 _(_p_r_e_a_m_b_l_e_: _省
       _略_可_能_)、  対になるブレースで囲んだコンマ区切りの文字列またはシーケンス
       式、  _後_置_部_分 _(_p_o_s_t_s_c_r_i_p_t_: _省_略_可_能_) を順に並べたものです。 前置部分は
       ブレース内にある文字列それぞれの先頭部分に追加され、 後置部分は左から右
       に順に展開されて得られた それぞれの文字列の末尾に追加されます。

       ブレース展開は入れ子にできます。 展開して得られた文字列はソートされず、
       左から右への順番がそのまま残ります。 例えば a{{d,c,b}}e は `ade ace  abe'
       と展開されます。

       シーケンス式は  {{_x...._y[[...._i_n_c_r]]}} の形になります。_x と _y は整数または 1 つ
       の文字で、 省略可能な _i_n_c_r は増減分の整数です。 整数が与えられると、  _x
       と  _y の間の両端を含む数を全て列挙した形に展開されます。 与る整数の前に
       _0 を付けると、全ての項が同じ幅に揃えられます。 つまり、_x か _y  のどちら
       かが  0 で始まる場合、生成される全ての項が 同じ文字数になるように、必要
       であれば前に 0 が付けられます。 文字が与えられると 辞書順で _x と _y の間
       の両端を含む文字を全て列挙した形に展開されます。  _x と _y は同じ型である
       必要があります。 incr  が与えられると、その値が各項の間の差となります。
       incr のデフォルトは、1 または -1 のうち適切な方です。

       ブレース展開はほかのどの展開よりも前に実行されます。 また、ほかの展開に
       おいて特殊な意味を持つ文字もそのまま結果に残ります。 つまり、厳密にテキ
       スト操作だけを行います。  bbaasshh は、展開の文脈やブレースの間のテキストに
       対して 文法的な解釈を適用することは一切ありません。

       正しい形のブレース展開には、クォートされていない開きブレースと   閉じブ
       レース、そしてシーケンス式か少なくとも 1 つのクォートされていないコンマ
       が 含まれていなければなりません。正しい形でないブレース展開は全て、  変
       更されないでそのまま残ります。  {{ や ,, をバックスラッシュでクォートすれ
       ば、 ブレース展開の一部と解釈されないようにできます。  パラメータ展開と
       の衝突を避けるため、文字列 $${{ はブレース展開の対象とは解釈されません。

       この仕組みは、 生成される文字列の共通先頭部分が上記の例より長い場合に、
       短縮表現としてよく使用されます:

              mkdir /usr/local/src/bash/{old,new,dist,bugs}
       または
              chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       ブレース展開の導入によって、伝統的な sshh  とは少し非互換になった部分があ
       ります。  sshh は単語の一部として開きブレースや閉じブレースが現われても特
       別扱いはせず、 そのまま出力に残します。 bbaasshh はブレース展開の結果として
       単語からブレースを取り除きます。例えば sshh に _f_i_l_e_{_1_,_2_} のように入力され
       た単語はそのままの形で出力されますが、 bbaasshh  ではこの同じ単語は展開され
       て  _f_i_l_e_1  _f_i_l_e_2  のように出力されます。 厳密に sshh と互換にしたければ、
       bbaasshh を ++BB オプションを付けて起動するか、 sseett コマンドに ++BB  オプション
       を与えてブレース展開を無効にしてください (後述する シシェェルル組組みみ込込みみココママンン
       ドド を参照)。

   チチルルダダ展展開開
       クォートされていないチルダ (`~~') で単語が始まった場合、  クォートされて
       いないスラッシュよりも前にある文字全て  (クォートされていないスラッシュ
       が無ければ全ての文字)  はチルダプレフィックス (_t_i_l_d_e_-_p_r_e_f_i_x) と解釈され
       ます。  クォートされている文字がチルダプレフィックス中に無ければ、 チル
       ダプレフィックス中のチルダ以降の文字は、 _ロ_グ_イ_ン_名 _(_l_o_g_i_n _n_a_m_e_) になる
       かもしれない文字列として扱われます。 このログイン名が空文字列ならば、チ
       ルダはシェルパラメータ HHOOMMEE の値に置き換えられます。 HHOOMMEE  が設定されて
       いない場合は、代わりにシェルを実行しているユーザの ホームディレクトリに
       置き換えられます。 ログイン名が空でなければ、  チルダプレフィックスは指
       定されたログイン名に対応する ホームディレクトリに置き換えられます。

       チルダプレフィックスが   `~+'  ならば、チルダプレフィックスはシェル変数
       PPWWDD の値に置き換えられます。 チルダプレフィックスが `~-' ならば、シェル
       変数  OOLLDDPPWWDD の値に置き換えられます (値が設定されていれば)。 チルダプレ
       フィックス中のチルダより後の文字が数値 _N であれば  (数値の前に  `+'  や
       `-'  を置くこともできます)、 チルダプレフィックスはディレクトリスタック
       内の対応する要素に置換されます。 置換される要素は、チルダプレフィックス
       を引き数として組み込みコマンド   ddiirrss  を実行したときに表示されるもので
       す。 チルダプレフィックスにおけるチルダ以降の文字が、 先行する  `+'  や
       `-' のない数値である場合は、`+' であるとみなされます。

       ログイン名が有効でない場合や、チルダ展開が失敗した場合には、 単語は置き
       換えられません。

       全ての変数代入において、 :: や ==  の直後にクォートされていないチルダプレ
       フィックスがないかチェックが行われます。 もし見つかった場合にはこれらも
       チルダ展開されます。 したがって、 PPAATTHH, MMAAIILLPPAATTHH, CCDDPPAATTHH への代入にチル
       ダを含むファイル名を使えば、 シェルは展開された値を代入します。

   パパララメメーータタのの展展開開
       `$$'  文字があると、パラメータ展開、コマンド置換、  算術式展開が行われま
       す。展開されるパラメータ名やシンボルは、 ブレースで括ることもできます。
       ブレースは省略可能ですが、 変数の直後に変数名の一部と解釈できる文字が置
       かれた場合に、 その文字と共に変数が展開されてしまうのを防ぐために用意さ
       れています。

       ブレースを使った場合、対になるのは最初に表れる  `}}' です。 ただしバック
       スラッシュでエスケープされているものや クォートされている文字列中のもの
       は含まれませんし、ブレースの内側にある   算術式展開やコマンド置換、パラ
       メータ展開に入っているものも含まれません。

       ${_p_a_r_a_m_e_t_e_r}
              _p_a_r_a_m_e_t_e_r         の値に置換されます。ブレースが必要になるのは、
              _p_a_r_a_m_e_t_e_r    が   2   桁以上の数字を持つ位置パラメータの場合や、
              _p_a_r_a_m_e_t_e_r   の直後の文字を名前の一部として解釈させたくない場合で
              す。

       _p_a_r_a_m_e_t_e_r  の最初の文字が感嘆符ならば、変数間接展開が行われます。  bbaasshh
       は残りの _p_a_r_a_m_e_t_e_r からなる変数の値を変数の名前と見なします。  そしてそ
       こで得られた名前の変数を展開した値を、置換処理の続きで使います。 これが
       _間_接_展_開 です。 ただし ${!_p_r_e_f_i_x*} や ${!!_n_a_m_e[_@]} の展開は例外です。 こ
       れは以下で説明します。 間接展開を表すには、感嘆符は左ブレースの直後に続
       ける必要があります。

       以下に示すそれぞれの場合、_w_o_r_d に対してチルダ展開、  パラメータ展開、コ
       マンド置換、算術式展開が行われます。

       部分文字列展開以外の場合、以下の形式で、  bbaasshh はパラメータが設定されて
       いるか、空ではないかを調べます。 コロンを省略した場合には設定されている
       かどうかのみを調べます。

       ${_p_a_r_a_m_e_t_e_r::--_w_o_r_d}
              デデフフォォルルトトのの値値をを使使いいまますす。  _p_a_r_a_m_e_t_e_r が設定されていないか空文字
              列であれば、 _w_o_r_d を展開したものに置換されます。そうでなければ、
              _p_a_r_a_m_e_t_e_r の値に置換されます。
       ${_p_a_r_a_m_e_t_e_r::==_w_o_r_d}
              デデフフォォルルトトのの値値をを代代入入ししまますす。  _p_a_r_a_m_e_t_e_r が設定されていないか空文
              字列であれば、  _w_o_r_d  を展開したものが  _p_a_r_a_m_e_t_e_r   に代入されま
              す。それから _p_a_r_a_m_e_t_e_r の値への置換が行われます。 位置パラメータ
              や特殊パラメータへの代入をこのように行うことはできません。
       ${_p_a_r_a_m_e_t_e_r::??_w_o_r_d}
              空空文文字字列列ままたたはは設設定定さされれてていいなないい場場合合ににエエララーーをを表表示示ししまますす。
              _p_a_r_a_m_e_t_e_r  が空文字列または設定されていない場合、_w_o_r_d を展開した
              もの (_w_o_r_d がなければ パラメータが空文字列または設定されていない
              ことを示すメッセージ) が標準エラー出力に出力されます。シェルが対
              話的でなければ、  シェルは終了します。パラメータに空文字列以外が
              設定されていれば、 _p_a_r_a_m_e_t_e_r の値への置換が行われます。
       ${_p_a_r_a_m_e_t_e_r::++_w_o_r_d}
              別別のの値値をを使使用用ししまますす。  _p_a_r_a_m_e_t_e_r が空文字列または設定されていなけ
              れば、空文字列に置換されます。 そうでなければ _w_o_r_d  を展開したも
              のに置換されます。
       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t}
       ${_p_a_r_a_m_e_t_e_r::_o_f_f_s_e_t::_l_e_n_g_t_h}
              部部分分文文字字列列展展開開。  _p_a_r_a_m_e_t_e_r を展開したものから最大 _l_e_n_g_t_h 文字を
              取り出します。 先頭の文字は _o_f_f_s_e_t で指定します。_l_e_n_g_t_h を省略す
              ると、  _o_f_f_s_e_t で指定した文字を先頭にして、 _p_a_r_a_m_e_t_e_r の残り全部
              が含まれる部分文字列に展開します。 _l_e_n_g_t_h と _o_f_f_s_e_t は算術式です
              (後述の  算算術術式式評評価価 を参照)。 _o_f_f_s_e_t を評価すると 0 未満の数にな
              る場合、この値は _p_a_r_a_m_e_t_e_r  の値の末尾からのオフセットとして使わ
              れます。 _l_e_n_g_t_h を評価すると 0 未満の数になる場合、 _p_a_r_a_m_e_t_e_r が
              @@ ではなく、配列でも連想配列でもなければ、  この値は文字数ではな
              く _p_a_r_a_m_e_t_e_r の値の末尾からのオフセットとして使われ、 展開結果は
              2 つのオフセットの間の部分文字列となります。 _p_a_r_a_m_e_t_e_r が @@ なら
              ば、結果は  _o_f_f_s_e_t  から始まる _l_e_n_g_t_h 個の位置パラメータになりま
              す。 _p_a_r_a_m_e_t_e_r が @ または *  のインデックスが付いている配列名な
              らば、 結果は配列の ${_p_a_r_a_m_e_t_e_r[_o_f_f_s_e_t]} を先頭とする要素 _l_e_n_g_t_h
              個となります。 負の _o_f_f_s_e_t  は、指定された配列の最大のインデック
              ス + 1 からの相対値と解釈されます。 連想配列に部分文字列展開した
              場合の結果は決められていません。  負のオフセットを指定するときに
              は、:- 式と混同されないよう、 1 つ以上の空白でコロンと離す必要が
              あることに注意してください。 位置パラメータを使う場合以外は、 部
              分文字列のインデックスは  0 から始まります。位置パラメータの場合
              には、 インデックスは 1 から始まります。  位置パラメータが使われ
              て _o_f_f_s_e_t が 0 の場合、 $$00 の値が先頭に置かれます。

       ${!!_p_r_e_f_i_x**}
       ${!!_p_r_e_f_i_x@@}
              前前方方一一致致すするる変変数数名名。 _p_r_e_f_i_x で始まる全ての変数の名前に展開して、
              IIFFSS 特殊変数の最初の文字によって区切ります。  ダブルクォートの中
              で _@ が使われた場合、それぞれの変数の名前は 別々の単語に展開され
              ます。

       ${!!_n_a_m_e[_@]}
       ${!!_n_a_m_e[_*]}
              配配列列ののキキーーののリリスストト。 _n_a_m_e が配列変数であれば、配列 _n_a_m_e の  イン
              デックス  (キー)  のリストに展開されます。 _n_a_m_e が配列でない場合
              は、_n_a_m_e が設定されていれば 0 に、  そうでなければ空に展開されま
              す。   ダブルクォートの中で  _@  が使われた場合、それぞれのキーは
              別々の単語に展開されます。

       ${##_p_a_r_a_m_e_t_e_r}
              パパララメメーータタのの長長ささ。  _p_a_r_a_m_e_t_e_r   の値に含まれる文字数に置換されま
              す。  _p_a_r_a_m_e_t_e_r が ** または @@ ならば、位置パラメータの数に置換さ
              れます。 _p_a_r_a_m_e_t_e_r が **  または  @@  が添字になっている配列名なら
              ば、配列中の要素数に置換されます。

       ${_p_a_r_a_m_e_t_e_r##_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r####_w_o_r_d}
              パパタターーンンにに前前方方一一致致ししたた部部分分をを取取りり除除くく。 _w_o_r_d が展開され、パス名展
              開の場合と同じようなパターンを作ります。          このパターンが
              _p_a_r_a_m_e_t_e_r   の値の先頭部分とマッチする場合、展開して得られる値は
              _p_a_r_a_m_e_t_e_r を展開した値から最短一致パターン (“##”の場合)  または最
              長一致パターン   (“####”   の場合)    を取り除いたものになります。
              _p_a_r_a_m_e_t_e_r が @@ または ** である場合、  パターンを削除する操作は全
              ての位置パラメータに順番に適用され、  展開結果はリストとして得ら
              れます。 _p_a_r_a_m_e_t_e_r が @@ または **  が添字になっている配列変数であ
              る場合、  パターンを削除する操作は配列の全ての要素に順番に適用さ
              れ、 展開結果はリストとして得られます。

       ${_p_a_r_a_m_e_t_e_r%%_w_o_r_d}
       ${_p_a_r_a_m_e_t_e_r%%%%_w_o_r_d}
              パパタターーンンにに後後方方一一致致ししたた部部分分をを取取りり除除くく。 _w_o_r_d が展開され、パス名展
              開の場合と同じようなパターンを作ります。          このパターンが
              _p_a_r_a_m_e_t_e_r   を展開した値の末尾の部分とマッチする場合、展開結果は
              _p_a_r_a_m_e_t_e_r  を展開した値から最短一致パターン (“%%” の場合)  または
              最長一致パターン  (“%%%%”  の場合)    を取り除いたものになります。
              _p_a_r_a_m_e_t_e_r  が @@ または ** である場合、 パターンを削除する操作は全
              ての位置パラメータに順番に適用され、  展開結果はリストとして得ら
              れます。  _p_a_r_a_m_e_t_e_r が @@ または ** が添字になっている配列変数であ
              る場合、  パターンを削除する操作は配列の全ての要素に順番に適用さ
              れ、 展開結果はリストとして得られます。

       ${_p_a_r_a_m_e_t_e_r//_p_a_t_t_e_r_n//_s_t_r_i_n_g}
              パパタターーンンのの置置換換。 _p_a_t_t_e_r_n が展開され、 パス名展開の場合と同じよう
              なパターンを作ります。 _p_a_r_a_m_e_t_e_r  の展開が行われ、  その値のうち
              _p_a_t_t_e_r_n  に最長一致する部分が _s_t_r_i_n_g に置換されます。 _p_a_t_t_e_r_n が
              // で始まる場合には、_p_a_t_t_e_r_n に マッチした部分は全て _s_t_r_i_n_g  に置
              換されます。  そうでない場合には、最初にマッチした部分だけが置換
              されます。 _p_a_t_t_e_r_n が ##  で始まる場合には、パターンは  _p_a_r_a_m_e_t_e_r
              を展開した値の先頭にマッチしなければなりません。 _p_a_t_t_e_r_n が %% で
              始まる場合には、パターンは _p_a_r_a_m_e_t_e_r  を展開した値の末尾にマッチ
              しなければなりません。  _s_t_r_i_n_g が空の場合には _p_a_t_t_e_r_n にマッチし
              た部分は削除されます。 またこの場合には、_p_a_t_t_e_r_n の後に続く // は
              省略可能です。  _p_a_r_a_m_e_t_e_r が @@ または ** である場合、置換操作は全
              ての位置パラメータに順番に適用され、  展開結果はリストとして得ら
              れます。  _p_a_r_a_m_e_t_e_r が @@ または ** が添字になっている配列変数であ
              る場合、 置換操作は配列の全ての要素に順番に適用され、 展開結果は
              リストとして得られます。

       ${_p_a_r_a_m_e_t_e_r^^_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r^^^^_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r,,_p_a_t_t_e_r_n}
       ${_p_a_r_a_m_e_t_e_r,,,,_p_a_t_t_e_r_n}
              大大文文字字小小文文字字のの変変換換。  _p_a_r_a_m_e_t_e_r に含まれるアルファベットの大文字
              小文字を変換します。 _p_a_t_t_e_r_n が展開され、 パス名展開の場合と同じ
              ようなパターンを作ります。 ^^ 演算子は _p_a_t_t_e_r_n にマッチした小文字
              を大文字に変換します。 ,, 演算子は _p_a_t_t_e_r_n にマッチした大文字を小
              文字に変換します。 ^^^^ 演算子と ,,,, 演算子は、マッチした全ての文字
              を変換します。 ^^ 演算子と ,, 演算子の場合は、マッチした最初の文字
              だけ変換します。  _p_a_t_t_e_r_n を省略した場合、?? を指定したものとして
              扱われ、 全ての文字にマッチします。 _p_a_r_a_m_e_t_e_r が @@ または ** であ
              る場合、大文字小文字の変換は全ての位置パラメータに順番に適用さ
              れ、 展開結果はリストとして得られます。 _p_a_r_a_m_e_t_e_r が添字に @@  ま
              たは  ** の付いた配列変数の場合は、配列の要素のそれぞれに大文字小
              文字の変換が適用され、 結果はリストに展開されます。

   ココママンンドド置置換換
       _コ_マ_ン_ド_置_換 _(_c_o_m_m_a_n_d _s_u_b_s_t_i_t_u_t_i_o_n_) を用いると、 コマンド名をコマンドの
       出力で置き換えられます。 コマンド置換には以下の 2 つの形式があります:

              $$((_c_o_m_m_a_n_d))
       または
              ``_c_o_m_m_a_n_d``

       bbaasshh は _c_o_m_m_a_n_d を実行し、 command の標準出力でコマンド置換の部分を置き
       換えます。 この際、末尾の改行文字は削除されます。  文字列の途中にある改
       行文字は削除されませんが、  単語分割の際に削除されることがあります。 コ
       マンド置換 $$((ccaatt _f_i_l_e)) は、同じ意味を持ち、 しかも高速な $$((<< _f_i_l_e)) に置
       き換え可能です。

       バッククォートを使う古い形式の置換を用いたとき、 バックスラッシュは文字
       通りの意味を保ちますが、 $$, ``, \\ の前にある場合は例外となります。  コマ
       ンド置換は、バックスラッシュが前置されていない バッククォートまでの部分
       です。 $(_c_o_m_m_a_n_d) という形式を用いたときは、 括弧の間にある全ての文字が
       コマンドとなります。 特別扱いされる文字はありません。

       コマンド置換は入れ子にできます。 バッククォート形式のときに入れ子を行う
       には、 内側のバッククォートをバックスラッシュでエスケープします。

       置換がダブルクォート内部にある場合には、 置換の結果に対する単語分割とパ
       ス名展開は行われません。

   算算術術式式展展開開
       算術式展開を使うと、算術式を評価して、その結果に置換できます。 算術式展
       開のフォーマットを次に示します:

              $$((((_e_x_p_r_e_s_s_i_o_n))))

       _e_x_p_r_e_s_s_i_o_n はダブルクォート内部にある場合と同様に扱われますが、  括弧の
       内側のダブルクォートが特別扱いされることはありません。 式に含まれる全て
       のトークンに対して、 パラメータ展開・文字列展開・コマンド置換・クォート
       の削除が行われます。 算術式置換は入れ子にできます。

       評価は後述の  算算術術式式評評価価 で示す規則に基づいて行われます。 _e_x_p_r_e_s_s_i_o_n が
       不正であれば、 bbaasshh  は評価の失敗を示すメッセージを出力し、置換を全く行
       いません。

   ププロロセセスス置置換換
       _プ_ロ_セ_ス_置_換 _(_p_r_o_c_e_s_s _s_u_b_s_t_i_t_u_t_i_o_n_) がサポートされるのは、 名前付きパイ
       プ (_F_I_F_O) または ファイル・ディスクリプターの //ddeevv//ffdd 形式での指定 をサ
       ポートしているシステムです。これは  <<((_l_i_s_t)) または >>((_l_i_s_t)) の形になりま
       す。 プロセス _l_i_s_t は、その入力や出力が _F_I_F_O または //ddeevv//ffdd 中の 何らか
       のファイルに接続された状態で実行されます。 このファイルの名前は、展開の
       結果として、 引き数の形で現在のコマンドに渡されます。 >>((_l_i_s_t))  の形式を
       使った場合、  ファイルへの書き込みは  _l_i_s_t への入力となります。 <<((_l_i_s_t))
       の形式を使った場合、 引き数として渡されたファイルは _l_i_s_t の出力を得るた
       めに読み込まれます。

       利用可能であれば、プロセス置換 (process substitution) は、 パラメータ展
       開、変数展開、コマンド置換、算術式展開と同時に行われます。

   単単語語のの分分割割
       パラメータ展開、コマンド置換、算術式展開が行われたのが、ダブル クォート
       の内側ではない場合、シェルは展開の結果をスキャンして、  _単_語_分_割 を行い
       ます。

       シェルは IIFFSS のそれぞれの文字を区切り文字として扱い、  ほかの展開の結果
       をこれらの文字によって単語に分割します。 IIFFSS が設定されていないか、その
       値がデフォルト値の <<ススペペーースス>><<タタブブ>><<改改行行>>  と全く同じならば、前段の展開
       の結果の先頭や末尾の <<ススペペーースス>>, <<タタブブ>>, <<改改行行>> の並びは無視され、 先頭
       と末尾以外の IIFFSS 文字の並びで単語が区切られます。 IIFFSS  の値がデフォルト
       以外のときに、  ススペペーースス や タブ という空白文字の並びが単語の先頭と末尾
       で無視されるのは、 その空白文字が IIFFSS の値に含まれるとき ( IIFFSS の空白文
       字の一つであるとき)  だけです。 IIFFSS に含まれ、 IIFFSS 空白文字ではない文字
       は全て、隣接する任意の IIFFSS 空白文字と一緒になってフィールドの区切りとな
       ります。  IIFFSS 空白文字の列も区切り文字として扱われます。 IIFFSS の値が空文
       字列であれば、単語分割は全く行われません。

       明示的に指定した空の引き数  (""""  または  '''')   は削除されずに残ります。
       クォートされていない暗黙的な空の引き数が、 値を持たないパラメータを展開
       した結果として得られますが、  これらは削除されます。   値を持たないパラ
       メータがダブルクォート内部で展開されると、 空である引き数となり、消され
       ずに残ります。

       展開が行われなければ単語分割も行われない点に注意してください。

   パパスス名名展展開開
       --ff オプションが指定されていなければ、単語分割を行った後に bbaasshh はそれぞ
       れの単語が  **, ??, [[ を含んでいるかどうか調べます。 これらの文字のいずれ
       かが見つかると、その単語は _パ_タ_ー_ン  とみなされ、  パターンにマッチする
       ファイル名を  アルファベット順にソートしたリストに置換されます。 マッチ
       するファイル名が見つからず、かつシェルのオプション nnuullllgglloobb  が無効なら
       ば、その単語は変更されずにそのまま残ります。  nnuullllgglloobb オプションが設定
       されていて、かつマッチするファイル名が見つからなければ、 その単語は削除
       されます。  ffaaiillgglloobb オプションが設定されていて、かつマッチするファイル
       名が見つからなければ、 エラーメッセージが表示されコマンドは実行されませ
       ん。 シェルのオプション nnooccaasseegglloobb が有効ならば、マッチングにおいてアル
       ファベットの大文字と小文字は区別さ れません。  パターンをパス名展開に使
       うとき、名前の先頭やスラッシュの直後の ““..”” は明示的にマッチさせなければ
       なりません。ただしシェルのオプション ddoottgglloobb が設定されている場合は例外
       です。  パス名のマッチングを行うとき、 スラッシュ文字は必ず明示的にマッ
       チさせなければなりません。 これ以外の場合には、 ““..””  が特別扱いされるこ
       とはありません。  シェルのオプション  nnooccaasseegglloobb,  nnuullllgglloobb,  ffaaiillgglloobb,
       ddoottgglloobb の詳しい説明については、後述の シシェェルルのの組組みみ込込みみココママンンドド  に書か
       れている sshhoopptt の説明を参照してください。

       シェル変数  GGLLOOBBIIGGNNOORREE を使って、 _パ_タ_ー_ン にマッチするファイル名の集合
       を制限できます。 GGLLOOBBIIGGNNOORREE  が設定されていれば、マッチするファイル名の
       うち GGLLOOBBIIGGNNOORREE 中のパターンにもマッチしたものは、 マッチしたもののリス
       トから取り除かれます。 ファイル名 ““..”” と ““....”” は GGLLOOBBIIGGNNOORREE  に空でない
       値が設定されていても必ず無視されます。しかし、  GGLLOOBBIIGGNNOORREE に空でない値
       を設定するとシェルオプションの ddoottgglloobb が有効になるので、 ““..””  で始まる
       ほかのファイル名は全てマッチします。  ““..””  で始めるファイル名を無視する
       古い動作をさせるには、 ““..**”” を GGLLOOBBIIGGNNOORREE  のパターンに含めてください。
       GGLLOOBBIIGGNNOORREE を unset すると、 ddoottgglloobb オプションは無効になります。

       パパタターーンンママッッチチンンググ

       パターンに含まれる文字のうち、以下の特殊パターン文字以外の文字は、 自分
       自身にマッチします。NUL 文字がパターン中に現われてはいけません。 バック
       スラッシュは直後の文字をエスケープします。 このバックスラッシュは、マッ
       チングでは無視されます 特殊パターン文字をその文字そのものにマッチさせる
       ためには、 クォートしなければなりません。

       特殊パターン文字は以下の意味を持っています:

              **      空文字列を含む、任意の文字列にマッチします。   シェルオプ
                     ション gglloobbssttaarr が有効で、 ** がパス名展開に用いられる場面
                     では、  連続する 2 つの ** だけのパターンが使われると、 そ
                     の階層以下のディレクトリとそのサブディレクトリ、 そこにあ
                     る全てのファイルにマッチします。  2 つ連続した ** の後に //
                     が続く場合には、 ディレクトリとそのサブディレクトリのみに
                     マッチします。
              ??      任意の 1 文字にマッチします。
              [[......]]  括られた文字のうち任意の  1 文字にマッチします。 2 つの文
                     字の間にハイフンを入れたものは、     _範_囲_表_現      _(_r_a_n_g_e
                     _e_x_p_r_e_s_s_i_o_n_)  を表します。 ソート順で両端を含む 2 つの文字
                     の間にある任意の 1 文字と マッチします。 ソートには現在の
                     ロケールの照合順序 (collating sequence)  と文字セットが用
                     いられます。 [[ の次の文字が !! または ^^ ならば、括られた文
                     字に含まれない任意の  1 文字にマッチします。 範囲表現にお
                     ける文字のソート順は、  現在のロケール  (およびシェル変数
                     LLCC__CCOOLLLLAATTEE  が指定されていればその値)  によって決定されま
                     す。  --  は、文字集合の最初または最後の文字として含めると
                     マッチングの対象にできます。 ]] は、文字集合の最初の文字と
                     して含めるとマッチングの対象にできます。

                     [[ と ]] の間では、_文_字_ク_ラ_ス _(_c_h_a_r_a_c_t_e_r _c_l_a_s_s_e_s_)  を指定で
                     きます。  指定には [[::_c_l_a_s_s::]] という記法を使います。ここで
                     _c_l_a_s_s は POSIX 標準で定義されている以下のクラスのいずれか
                     です:
                     aallnnuumm  aallpphhaa  aasscciiii  bbllaannkk  ccnnttrrll ddiiggiitt ggrraapphh lloowweerr pprriinntt
                     ppuunncctt ssppaaccee uuppppeerr wwoorrdd xxddiiggiitt
                     文字クラスは、そのクラスの属する任意の文字にマッチしま
                     す。 文字クラス wwoorrdd は、文字、数字、_ にマッチします。

                     [[  と ]] の間では、_等_値_ク_ラ_ス _(_e_q_u_i_v_a_l_e_n_c_e _c_l_a_s_s_) を指定で
                     きます。 指定には [[==_c==]] という記法を使います。 これは現在
                     のロケールにおける定義において    _c    と同じ    照合重み
                     (collation weight) を持つ全ての文字にマッチします。

                     [[  と  ]]  の間では、[[.._s_y_m_b_o_l..]]   という記述は照合シンボル
                     _s_y_m_b_o_l にマッチします。

       組み込みコマンドの  sshhoopptt を使ってシェルのオプション eexxttgglloobb が有効にさ
       れていると、 拡張パターンマッチング演算子がいくつか認識されるようになり
       ます。  以下の説明では、_p_a_t_t_e_r_n_-_l_i_s_t は || で区切られた 1 つ以上のパター
       ンのリストであるものとします。 以下のサブパターンを 1  つあるいは複数使
       うことにより、 複合パターンを作れます。

              ??((_p_a_t_t_e_r_n_-_l_i_s_t))
                     与えられたパターンが  0 回または 1 回現われるとマッチしま
                     す。
              **((_p_a_t_t_e_r_n_-_l_i_s_t))
                     与えられたパターンが 0 回以上現われるとマッチします。
              ++((_p_a_t_t_e_r_n_-_l_i_s_t))
                     与えられたパターンが 1 回以上現われるとマッチします。
              @@((_p_a_t_t_e_r_n_-_l_i_s_t))
                     与えられたパターンに 1 回だけマッチします。
              !!((_p_a_t_t_e_r_n_-_l_i_s_t))
                     与えられたパターンのどれでもないものにマッチします。

   ククォォーートトのの削削除除
       先に処理される展開の後、クォートされていない \\, '', "" のうち、先の展開の
       結果でないものは全て削除されます。

リリダダイイレレククトト
       シェルが解釈する特別な記法を用いると、コマンドの実行前に入出力を _リ_ダ_イ
       _レ_ク_ト できます。またリダイレクトを使うと、  現在のシェル実行環境に対し
       てファイルをオープンしたり クローズしたりできます。以下に示すリダイレク
       ト演算子は、 _単_純_な_コ_マ_ン_ド  の前や途中に置くことができ、また  _コ_マ_ン_ド
       の後に置けます。 リダイレクトは左から右へと、現われた順に処理されます。

       ファイル・ディスクリプター番号で始まるリダイレクトでは、       代わりに
       {_v_a_r_n_a_m_e} という形式の単語で始めることもできます。 この場合、>&- と <&-
       以外のリダイレクト演算子では、 シェルは 10 より大きいファイル・ディスク
       リプターを割り当て、 _v_a_r_n_a_m_e に代入します。 {_v_a_r_n_a_m_e} で始まる  >&-  や
       <&- の場合には、_v_a_r_n_a_m_e の値は クローズするファイル・ディスクリプターを
       示します。

       以下の説明においては、ファイル・ディスクリプター番号が省略され、 かつリ
       ダイレクト演算子の最初の文字が << ならば、リダイレクトは標準入力 (ファイ
       ル・ディスクリプター 0) を参照します。 リダイレクト演算子の最初の文字が
       >>  ならば、リダイレクトは標準出力 (ファイル・ディスクリプター 1) を参照
       します。

       以下の説明では、リダイレクト演算子の次の単語に対しては、 特に説明しない
       限り、  ブレース展開・チルダ展開・パラメータ展開・コマンド置換・ 算術式
       展開・クォート削除・パス名展開・単語分割が行われます。 その単語が複数の
       単語に展開された場合はエラーになります。

       リダイレクトの順番には意味がある点に注意してください。 例えば、次のコマ
       ンド

              ls >> dirlist 2>>&&1

       は標準出力と標準エラー出力を両方ともファイル   _d_i_r_l_i_s_t   に書き込みます
       が、次のコマンド

              ls 2>>&&1 >> dirlist

       では標準出力だけがファイル _d_i_r_l_i_s_t に書き込まれます。なぜなら後者の場合
       には、標準エラー出力は _d_i_r_l_i_s_t にリダイレクトされる前の標準出力の複製と
       なるからです。

       bbaasshh  は、 以下の表にあるようなファイル名がリダイレクトに使用されると、
       それらを特別に扱います。

              //ddeevv//ffdd//_f_d
                     _f_d が有効な整数ならばファイル・ディスクリプター _f_d が複製
                     されます。
              //ddeevv//ssttddiinn
                     ファイル・ディスクリプター 0 が複製されます。
              //ddeevv//ssttddoouutt
                     ファイル・ディスクリプター 1 が複製されます。
              //ddeevv//ssttddeerrrr
                     ファイル・ディスクリプター 2 が複製されます。
              //ddeevv//ttccpp//_h_o_s_t//_p_o_r_t
                     _h_o_s_t  が有効なホスト名またはインターネットアドレスで _p_o_r_t
                     が整数のポート番号ならば、 bbaasshh  は対応するソケットに対し
                     て TCP 接続のオープンを試みます。
              //ddeevv//uuddpp//_h_o_s_t//_p_o_r_t
                     _h_o_s_t  が有効なホスト名またはインターネットアドレスで _p_o_r_t
                     が整数のポート番号ならば、 bbaasshh  は対応するソケットに対し
                     て UDP 接続のオープンを試みます。

       ファイルのオープンや作成に失敗すると、リダイレクトも失敗します。

       9 より大きいファイル・ディスクリプターを使ったリダイレクトには注意が 必
       要です。シェルが内部的に使うファイル・ディスクリプターと競合する場合が
       あるからです。

   入入力力ののリリダダイイレレククトト
       入力をリダイレクトすると、   _w_o_r_d  を展開した結果の名前を持つファイルが
       オープンされ、  ファイル・ディスクリプター  _n  で読み込めるようになりま
       す。 _n が指定されていなければ、読み込みは標準入力 (ファイル・ディスクリ
       プター 0) で行われます。

       入力のリダイレクトは、一般的には以下の形式です:

              [_n]<<_w_o_r_d

   出出力力ののリリダダイイレレククトト
       出力をリダイレクトすると、  _w_o_r_d   の展開した結果の名前を持つファイルが
       オープンされ、  ファイル・ディスクリプター  _n  で書き込めるようになりま
       す。 _n が指定されていなければ、書き込みは標準出力 (ファイル・ディスクリ
       プター  1)  に行われます。 ファイルが存在しなかった場合は作成されます。
       ファイルが存在した場合はサイズ 0 に切り詰められます。

       出力のリダイレクトは、一般的には以下の形式です:

              [_n]>>_w_o_r_d

       リダイレクト演算子が >> であり、かつ 組み込みコマンド sseett  で  nnoocclloobbbbeerr
       オプションが有効になっている場合、  _w_o_r_d の展開で得たファイルが存在し、
       かつそれが通常ファイルならば、リダイレクトは失敗します。 リダイレクト演
       算子が  >>||  の場合、もしくは  リダイレクト演算子が >> で組み込みコマンド
       sseett で nnoocclloobbbbeerr オプションが有効になっていない場合、 _w_o_r_d という名前の
       ファイルが存在していてもリダイレクトが試みられます。

   リリダダイイレレククトトにによよるる追追加加出出力力
       この形式を使って出力のリダイレクトを行うと、  _w_o_r_d を展開した結果の名前
       を持つファイルがオープンされ、 ファイル・ディスクリプター _n  に対する出
       力がこのファイルに追加されるようになります。 _n を指定しなければ、標準出
       力 (ファイル・ディスクリプター 1) で追加されます。 ファイルが存在しなけ
       れば、新しく作られます。

       追加出力は一般的には以下の形式です:

              [_n]>>>>_w_o_r_d

   標標準準出出力力とと標標準準エエララーー出出力力ののリリダダイイレレククトト
       この構造を使うと、 標準出力 (ファイル・ディスクリプター 1) と標準エラー
       出力 (ファイル・ディスクリプター 2) の両方を、 _w_o_r_d  を展開した結果の名
       前を持つファイルにリダイレクトできます。

       標準出力と標準エラー出力に対する形式は 2 つあります:

              &&>>_w_o_r_d
       と
              >>&&_w_o_r_d

       両者のうち望ましいのは前者の方です。 上記は以下と同じ意味です:

              >>_w_o_r_d 2>>&&1

   標標準準出出力力とと標標準準エエララーー出出力力のの追追加加出出力力
       この構造を使うと、 標準出力 (ファイル・ディスクリプター 1) と標準エラー
       出力 (ファイル・ディスクリプター 2) の両方を、 _w_o_r_d  を展開した結果の名
       前を持つファイルに追加できます。

       標準出力と標準エラー出力の追加出力は以下の形式です:

              &&>>>>_w_o_r_d

       これは次のものと同じ意味です:

              >>>>_w_o_r_d 2>>&&1

   ヒヒアアドドキキュュメメンントト((HHeerree DDooccuummeennttss))
       この形式のリダイレクトを用いると、 シェルは現在のソースから入力を読み込
       みます。 この読み込みは _w_o_r_d を単独で含む行 (末尾にブランク文字があって
       はいけません)  が現われるまで続きます。 その行までに読み込んだ行は、 コ
       マンドの標準入力として扱われます。

       ヒアドキュメントの形式を以下に示します:

              <<<<[--]_w_o_r_d
                      _h_e_r_e_-_d_o_c_u_m_e_n_t
              _d_e_l_i_m_i_t_e_r

       _w_o_r_d に対するパラメータ展開・コマンド置換・算術式展開・  パス名展開は全
       く行われません。 _w_o_r_d が一部でもクォートされている場合は、 _d_e_l_i_m_i_t_e_r は
       _w_o_r_d のクォートをほどいた結果 (クォート文字を削除した結果) となり、  ヒ
       アドキュメントに含まれる行では展開が行われなくなります。  _w_o_r_d がクォー
       トされていなければ、 ヒアドキュメント中の全ての行に対して  パラメータ展
       開・コマンド置換・算術式展開が行われます。  _w_o_r_d がクォートされていない
       場合には、 \\<<nneewwlliinnee>> という文字列は無視され、 \\, $$, `` といった文字は \\
       を用いてクォートしなければなりません。

       リダイレクト演算子が  <<<<--  ならば、行頭にあるタブ文字は全て入力行および
       _d_e_l_i_m_i_t_e_r を含む行から取り除かれます。 これにより、シェルスクリプト中の
       ヒアドキュメントを 自然な形でインデントさせることができます。

   ヒヒアアスストトリリンンググ((HHeerree SSttrriinnggss))
       ヒアドキュメントの変形で、以下の形式です:

              <<<<<<_w_o_r_d

       _w_o_r_d は展開されてコマンドの標準入力に与えられます。

   フファァイイルル・・デディィススククリリププタターーのの複複製製
       リダイレクト演算子

              [_n]<<&&_w_o_r_d

       を使うと入力ファイル・ディスクリプターを複製できます。 _w_o_r_d が 1 桁以上
       の数値に展開された場合、 _n で示されるファイル・ディスクリプターが生成さ
       れ、  _w_o_r_d で指定された数値のファイル・ディスクリプターのコピーとなりま
       す。 _w_o_r_d  に含まれる数値が入力用にオープンされたファイル・ディスクリプ
       ターを 指していない場合、リダイレクト・エラーが起きます。 _w_o_r_d を評価し
       た結果が -- となった場合、ファイル・ディスクリプター _n  はクローズされま
       す。  _n が指定されていない場合、標準入力 (ファイル・ディスクリプター 0)
       が使われます。

       同様に、演算子

              [_n]>>&&_w_o_r_d

       を使って出力ファイル・ディスクリプターを複製できます。 _n が指定されてい
       ない場合は、標準出力 (ファイル・ディスクリプター 1) が使われます。 _w_o_r_d
       に含まれる数値が、出力用にオープンされた ファイル・ディスクリプターを指
       していない場合、  リダイレクト・エラーが起きます。特別な場合ですが、  _n
       が省略され、かつ _w_o_r_d が 1 桁以上の数字には展開されなかった場合、  前に
       説明したように標準出力と標準エラー出力がリダイレクトされます。

   フファァイイルル・・デディィススククリリププタターーのの変変更更
       リダイレクト演算子

              [_n]<<&&_d_i_g_i_t--

       を使うと、ファイル・ディスクリプターの _d_i_g_i_t を _n に変更します。 _n が指
       定されていない場合は、標準入力 (ファイル・ディスクリプター 0)  が使われ
       ます。 _d_i_g_i_t は _n に複製された後にクローズされます。

       同様に、演算子

              [_n]>>&&_d_i_g_i_t--

       を使うと、ファイル・ディスクリプターの _d_i_g_i_t を _n に変更します。 _n が指
       定されていない場合は、標準出力 (ファイル・ディスクリプター 1)  が使われ
       ます。

   読読みみ書書ききののたためめののフファァイイルル・・デディィススククリリププタターーののオオーーププンン
       リダイレクト演算子

              [_n]<<>>_w_o_r_d

       を使うと、  _w_o_r_d を展開した結果の名前を持つファイルがファイル・ディスク
       リプター _n での読み書きのためにオープンされます。 _n  が指定されていなけ
       れば、 ファイル・ディスクリプター 0 で読み書きが行われます。 ファイルが
       存在しなければ、新しく生成されます。

エエイイリリアアスス
       _エ_イ_リ_ア_ス_(_a_l_i_a_s_) を使うと、 ある単語が単純なコマンドの先頭の単語として
       使われた場合に、  この文字列を別の単語に置換できます。 シェルはエイリア
       スのリストを管理しています。  このリストは組み込みコマンドの  aalliiaass  と
       uunnaalliiaass を使って設定および削除できます (後述の シシェェルルのの組組みみ込込みみココママンンドド
       を参照)。 各コマンドの最初の単語がクォートされていない場合、 エイリアス
       かどうかが確認され、 エイリアスならばその単語はそのエイリアスのテキスト
       と置換されます。  //、$$、``、==、シェルの  _メ_タ_文_字  _(_m_e_t_a_c_h_a_r_a_c_t_e_r_s_)   や
       クォート文字はエイリアス名には使えません。 エイリアス名と置換されるテキ
       ストには、   シェルの入力として有効なものは何でも含めることができます。
       これには先に挙げた _メ_タ_文_字 も含まれます。 置換されたテキストの最初の単
       語に対しても エイリアスかどうかの評価がされますが、  最初の単語が展開さ
       れるエイリアスと同じ場合には  展開は一度しか行われません。つまり  llss が
       llss --FF のエイリアスとなっているような場合には、 bbaasshh  は置換される文字列
       を再帰的に展開することはありません。  エイリアスの値の最後の文字が _ブ_ラ
       _ン_ク_文_字 の場合、エイリアスに続く次のコマンドの単語に対しても  エイリア
       ス展開が試みられます。

       エイリアスは  aalliiaass コマンドで作成とリスト表示を行い、 uunnaalliiaass コマンド
       で削除します。

       置換されるテキストに引き数を入れる仕組みはありません。 引き数が必要なら
       ば、シェル関数を使わなければなりません (後述の 関関数数 を参照)

       シェルが対話的でないときには、 sshhoopptt コマンドによって eexxppaanndd__aalliiaasseess オ
       プションが設定されていない場合に限り、   エイリアスの展開は行われません
       (後述の シシェェルルのの組組みみ込込みみココママンンドド における sshhoopptt の説明を参照)。

       エイリアスの定義や利用に関係する規則には、紛らわしい点があります。 bbaasshh
       は、ある行に書かれているコマンドを実行する前に必ず、 少なくとも 1  回は
       行全体を読み込みます。 エイリアスが展開されるのはコマンドを読み込んだと
       きであり、 実行するときではありません。  したがって、別のコマンドと同じ
       行でエイリアス定義を行った場合には、 次の入力行が読み込まれるまではエイ
       リアスの効果は現われません。   同じ行にあるエイリアス定義の後のコマンド
       は、  新しいエイリアスの影響を受けません。 この動作は関数を実行する場合
       にも問題になります。 エイリアスが展開されるのは関数定義が読み込まれると
       きであり、  関数が実行されるときではありません。 なぜなら、関数定義自身
       も複合コマンドだからです。 その結果として、関数内で定義されたエイリアス
       は、  その関数が実行されるまでは利用できません。 安全のため、エイリアス
       定義は独立した行で行うべきです。 複合コマンド内で aalliiaass  を使ってはいけ
       ません。

       ほとんど全ての用途において、 シェル関数でエイリアスを代用できます。

関関数数
       シェル関数は、後で使うために一連のコマンドを保存するものです。 シェル関
       数の定義は既に シシェェルルのの文文法法 で説明しています。 シェル関数名が単純なコマ
       ンド名として使われた場合、   関数名に対応するコマンド群が実行されます。
       関数は現在のシェルのコンテキスト内で実行されます。 つまり、新しいプロセ
       スを生成して関数を処理することはありません  (これはシェルスクリプトと対
       照的な点です)。  関数の実行時には、関数に与えた引き数が位置パラメータと
       なります。 特殊パラメータ ## は更新され、この変更が反映されます。 特殊パ
       ラメータ 00 は変わりません。 関数の実行中は FFUUNNCCNNAAMMEE  変数の最初の要素に
       関数の名前が設定されます。

       上記以外は、シェル実行環境の状態は全て、関数とその呼び出し側で同じにな
       ります。 ただし、以下の例外があります: DDEEBBUUGG と RREETTUURRNN のトラップ (後述
       の シシェェルルのの組組みみ込込みみココママンンドド の項で、組み込みコマンド ttrraapp の説明を参照)
       は、 関数に ttrraaccee 属性 (後述の組み込みコマンド ddeeccllaarree の説明を参照) が
       与えられている場合や、--oo  functrace シシェェルルオオププシショョンンがが 組組みみ込込みみココママンンドド
       sseett にによよっってて有有効効ににななっってていいるる ((つつままりり、、全全ててのの関関数数がが DDEEBBUUGG とと RREETTUURRNN ののトト
       ララッッププをを継継承承ししてていいるる))  場場合合をを除除いいてて 継継承承さされれまませせんん。。 EERRRR トトララッッププはは、、--oo
       eerrrrttrraaccee シェルオプションが有効になっていない限り 継承されません。

       関数ローカルの変数は、組み込みコマンド  llooccaall   で宣言できます。   普通
       は、変数とその値は関数とその呼び出し側で共有されます。

       FFUUNNCCNNEESSTT 変数に 0 より大きい数値をセットすると、 関数呼び出しを何重まで
       許すかの最大レベルを決めます。 このレベルを超えて関数を呼び出すと、コマ
       ンドが異常終了します。

       組み込みコマンド rreettuurrnn が関数中で実行された場合、関数は完了し、 関数呼
       び出しの次のコマンドから実行が再開されます。 再開される前に、RREETTUURRNN  ト
       ラップに設定されたコマンドが実行されます。   関数の完了時には、位置パラ
       メータの値と特殊パラメータ ## の値は、関数の実行前の値に戻ります。

       関数の名前と定義をリスト表示するには、組み込みコマンドの   ddeeccllaarree   や
       ttyyppeesseett  を、オプション --ff を付けて実行します。 ddeeccllaarree や ttyyppeesseett をオ
       プション    --FF    で実行すると、関数名だけがリスト表示されます。     ま
       た、eexxttddeebbuugg  シェルオプションが有効になっていると、 ソースファイルと行
       番号も表示されます。 関数をエクスポートして、  サブシェルでその関数が自
       動的に定義されている状態にできます。 これを行うには、組み込みコマンドの
       eexxppoorrtt に --ff オプションを付けて実行します。 組み込みコマンドの uunnsseett に
       --ff   オプションを付けて実行することで、  関数定義を削除することもできま
       す。 同じ名前のシェル関数と変数がシェルの子プロセスにエクスポートされる
       と、  同じ環境の中に全く同じ名前のエントリが複数できてしまうことに 注意
       してください。これが問題を起こす場合には注意が必要です。

       関数は再帰させることができます。FFUUNNCCNNEESSTT 変数を使うと、  関数の呼び出し
       スタックの深さを制限し、関数の呼び出し回数を制限する   ことができます。
       デフォルトでは再帰呼び出し回数に制限は課せられていません。

算算術術式式評評価価
       シェルにおいては、特定の状況下で算術式を評価させることができます  (組み
       込みコマンドの lleett と 算算術術式式展展開開 を参照)。 評価は固定長の整数として行わ
       れ、  オーバーフローのチェックは行われません。  ただし、0  での除算はト
       ラップされ、エラーとしてのフラグが立てられます。 演算子とその優先度、結
       合規則は C 言語と同じです。 以下のリストは、 同じ優先度を持つ演算子をグ
       ループとしてまとめて列挙したものです。 優先度の高いものから順に列挙して
       います。

       _i_d++++ _i_d----
              変数を評価し、その後 increment (加算)/ decrement (減算) する。
       ++++_i_d ----_i_d
              変数を increment (加算) / decrement (減算) してから評価する。
       -- ++    単項式の負と正
       !! ~~    論理的否定とビット単位の否定
       ****     指数 (累乗)
       ** // %%  乗算、除算、剰余
       ++ --    加算と減算
       <<<< >>>>  左ビットシフトと右ビットシフト
       <<== >>== << >>
              比較
       ==== !!==  等値と非等値
       &&      ビット単位の AND
       ^^      ビット単位の排他的 OR
       ||      ビット単位の OR
       &&&&     論理的 AND
       ||||     論理的 OR
       _e_x_p_r??_e_x_p_r::_e_x_p_r
              条件付き実行
       == **== //== %%== ++== --== <<<<== >>>>== &&== ^^== ||==
              代入
       _e_x_p_r_1 ,, _e_x_p_r_2
              コンマ

       シェル変数をオペランドにすることもできます。 パラメータ展開は式の評価よ
       り前に行われます。 式の中では、シェル変数を (パラメータ展開規則を用いず
       に) 変数名で参照できます。 値が空のシェル変数や宣言されていないシェル変
       数は、  パラメータの展開の文法を使わずに名前を参照されると、 0 として評
       価されます。 変数の値は、変数が参照されたときや、ddeeccllaarree --ii によって _整
       _数  属性が設定された変数に値が代入されるときに、 算術式として評価されま
       す。 空の値は 0 として評価されます。 式で用いるためにシェル変数の  _整_数
       _属_性 を有効にする必要はありません。

       先頭が 0 である定数は 8 進数として解釈されます。 先頭が 0x または 0X な
       らば 16 進数として解釈されます。 それ以外の場合には、数値は [_b_a_s_e_#]n の
       形式で表します。ここで _b_a_s_e は 2 から 64 の間の 10 進数であり、算術的な
       意味での基数を表します。 _n はその基数における数を表します。 _b_a_s_e_#  が省
       略されると  10 進数となります。 ある桁において 9 より大きい数字を表すに
       は文字を使います。 文字を使う場合には、アルファベット小文字、大文字、@,
       _  をこの順番で使います。 _b_a_s_e が 36 以下の場合には、大文字と小文字は区
       別されず、 大文字と小文字のどちらを使っても 10 から 35 までの数字を表現
       できます。

       演算子は優先度の順に評価されます。括弧内にある部分式は最初に評価され、
       前述の優先規則よりも優先させることができます。

条条件件式式
       条件式は複合コマンド [[[[ と組み込みコマンドの tteesstt および [[ によって使用
       でき、ファイルの属性を調べたり、 文字列比較や算術式比較を行ったりできま
       す。 式は以下に示す単項のプライマリや二値のプライマリから構成されます。
       プライマリのいずれかの  _f_i_l_e 引き数が _/_d_e_v_/_f_d_/_n という形式ならば、 ファ
       イル・ディスクリプター _n が調べられます。  プライマリのいずれかの  _f_i_l_e
       引き数が _/_d_e_v_/_s_t_d_i_n、_/_d_e_v_/_s_t_d_o_u_t、_/_d_e_v_/_s_t_d_e_r_r のいずれかであれば、 対応
       するファイル・ディスクリプター 0、1、2 が調べられます。

       ほかに指定されていなければ、ファイルに対するプライマリはシンボリックリ
       ンク を辿り、リンク自身ではなくリンク先を対象とします。

       [[[[ では << と >> の演算子は現在のロケールでの辞書順で 比較します。tteesstt コ
       マンドは ASCII 順で比較します。

       --aa _f_i_l_e
              _f_i_l_e が存在すれば真となります。
       --bb _f_i_l_e
              _f_i_l_e が存在し、かつブロック特殊ファイルならば真となります。
       --cc _f_i_l_e
              _f_i_l_e が存在し、かつキャラクター特殊ファイルならば真となります。
       --dd _f_i_l_e
              _f_i_l_e が存在し、かつディレクトリならば真となります。
       --ee _f_i_l_e
              _f_i_l_e が存在すれば真となります。
       --ff _f_i_l_e
              _f_i_l_e が存在し、かつ通常ファイルならば真となります。
       --gg _f_i_l_e
              _f_i_l_e が存在し、かつ set-group-id されていれば真となります。
       --hh _f_i_l_e
              _f_i_l_e が存在し、かつシンボリックリンクならば真となります。
       --kk _f_i_l_e
              _f_i_l_e が存在し、かつ “sticky”  ビットが設定されていれば真となりま
              す。
       --pp _f_i_l_e
              _f_i_l_e が存在し、かつ名前付きパイプ (FIFO) ならば真となります。
       --rr _f_i_l_e
              _f_i_l_e が存在し、かつ読み込み可能ならば真となります。
       --ss _f_i_l_e
              _f_i_l_e が存在し、かつそのサイズが 0 より大きければ真となります。
       --tt _f_d  ファイル・ディスクリプター _f_d がオープンされており、かつ端末を参
              照していれば真となります。
       --uu _f_i_l_e
              _f_i_l_e が存在し、 かつ set-user-id  ビットが設定されていれば真とな
              ります。
       --ww _f_i_l_e
              _f_i_l_e が存在し、かつ書き込み可能ならば真となります。
       --xx _f_i_l_e
              _f_i_l_e が存在し、かつ実行可能ならば真となります。
       --GG _f_i_l_e
              _f_i_l_e が存在し、かつ (実行中のシェルの)  実効グループ ID に所有さ
              れていれば真となります。
       --LL _f_i_l_e
              _f_i_l_e が存在し、かつシンボリックリンクならば真となります。
       --NN _f_i_l_e
              _f_i_l_e が存在し、 かつ前回読み込まれた以降に修正されていれば真とな
              ります。
       --OO _f_i_l_e
              _f_i_l_e が存在し、かつ (実行中のシェルの)  実効ユーザ ID に所有され
              ていれば真となります。
       --SS _f_i_l_e
              _f_i_l_e が存在し、かつソケットならば真となります。
       _f_i_l_e_1 --eeff _f_i_l_e_2
              _f_i_l_e_1 と _f_i_l_e_2 とで デバイス番号と  i-ノード番号が同じならば真と
              なります。
       _f_i_l_e_1 -nntt _f_i_l_e_2
              _f_i_l_e_1  が (変更日時に関して) _f_i_l_e_2 より新しいか、 _f_i_l_e_1 が存在す
              るが _f_i_l_e_2 が存在しなければ、真となります。
       _f_i_l_e_1 -oott _f_i_l_e_2
              _f_i_l_e_1 が _f_i_l_e_2 より古いか、 _f_i_l_e_2 が存在するのに _f_i_l_e_1  が存在し
              なければ、真となります。
       --oo _o_p_t_n_a_m_e
              シェルオプション  _o_p_t_n_a_m_e が有効ならば真となります。後述する組み
              込みコマンド sseett に対するオプションの説明中にある --oo  オプション
              を参照してください。
       --vv _v_a_r_n_a_m_e
              シェル変数  _v_a_r_n_a_m_e がセットされている (値が代入されている) なら
              ば真となります。
       --zz _s_t_r_i_n_g
              _s_t_r_i_n_g の長さが 0 ならば真となります。
       _s_t_r_i_n_g
       --nn _s_t_r_i_n_g
              _s_t_r_i_n_g の長さが 0 でなければ真となります。

       _s_t_r_i_n_g_1 ==== _s_t_r_i_n_g_2
       _s_t_r_i_n_g_1 == _s_t_r_i_n_g_2
              文字列が同じならば真となります。 POSIX に準拠する形で tteesstt  コマ
              ンドを使う場合には == を使う必要があります。

       _s_t_r_i_n_g_1 !!== _s_t_r_i_n_g_2
              2 つの文字列が異なれば真となります。

       _s_t_r_i_n_g_1 << _s_t_r_i_n_g_2
              現在のロケールにおいて、_s_t_r_i_n_g_1 が _s_t_r_i_n_g_2 よりも 辞書順で前にあ
              る場合に真となります。

       _s_t_r_i_n_g_1 >> _s_t_r_i_n_g_2
              現在のロケールにおいて、_s_t_r_i_n_g_1 が _s_t_r_i_n_g_2 よりも 辞書順で後にあ
              る場合に真となります。

       _a_r_g_1 OOPP _a_r_g_2
              OOPP は --eeqq, --nnee, --lltt, --llee, --ggtt, --ggee.  のいずれかです。 これらの算
              術二値演算子が真を返すのはそれぞれ、 _a_r_g_1 が _a_r_g_2 に対して等しい
              場合、  等しくない場合、小さい場合、小さいか等しい場合、大きい場
              合、 大きいか等しい場合です。 _a_r_g_1 や _a_r_g_2  には、正または負の整
              数を使用できます。

単単純純ななココママンンドドのの展展開開
       単純なコマンドを実行すると、シェルは以下に示す展開、代入、   リダイレク
       ションを左から右の順で実行します。

       1.     パーザが変数代入  (コマンド名の前にあるもの)    またはリダイレク
              ションと判断した単語は、 保存されて後で処理されます。

       2.     変数代入でもリダイレクションでもない単語が展開されます。  もし展
              開の後に残っている単語があれば、  その最初の単語がコマンド名とな
              り、残りが引き数となります。

       3.     リダイレクションが前述の リリダダイイレレククトト で説明したように実行されま
              す。

       4.     変数代入の == の後にあるテキストに対して、チルダ展開、 パラメータ
              展開、コマンド置換、算術式展開、クォート削除が行われます。  この
              処理は変数を代入する前に行われます。

       コマンド名が残らなかった場合には、 変数を代入した結果が現在のシェル環境
       に効果を及ぼします。 それ以外の場合、変数は実行されるコマンドの環境に追
       加されるだけで、 現在のシェル環境には影響を与えません。  読み込み専用の
       変数に対して代入をしようとするとエラーが発生し、  そのコマンドは 0 でな
       いステータスで終了します。

       コマンド名が残らなかった場合、リダイレクションは行われますが、   現在の
       シェル環境は影響を受けません。  リダイレクションのエラーが起きると、 コ
       マンドは 0 でないステータスで終了します。

       展開の後にコマンド名が残っている場合、後述するように実行が進行します。
       そうでない場合はコマンドは終了します。 展開のいずれかがコマンド置換であ
       る場合には、 コマンドの終了ステータスは  最後に実行されたコマンド置換の
       終了ステータスになります。  コマンド置換が行われなかった場合には、 コマ
       ンドはステータス 0 で終了します。

ココママンンドドのの実実行行
       コマンドが単語に分割された後に、 単純なコマンドとそれに対する引き数リス
       ト (引き数リストは省略可能) となった場合、以下の動作が行われます。

       コマンド名にスラッシュが含まれない場合、 シェルはコマンドの位置を特定し
       ようとします。 その名前のシェル関数が存在すれば、前に 関関数数 で説明したよ
       うにその関数が呼び出されます。  名前が関数にマッチしない場合には、 シェ
       ルはシェルの組み込みコマンドのリストを探します。 マッチするものがあった
       場合、その組み込みコマンドが呼び出されます。

       名前がシェル関数も組み込みコマンドでなく、 かつスラッシュを含まない場合
       には、 bbaasshh は PPAATTHH  の各要素を検索し、その名前の実行ファイルを含むディ
       レクトリを探します。  bbaasshh はハッシュ表を使って実行ファイルの完全なパス
       名を記憶します (後述の シシェェルルのの組組みみ込込みみココママンンドド の  hhaasshh  の項を参照)。
       PPAATTHH  に含まれるディレクトリの完全な探索は、 そのコマンドがハッシュ表の
       中にない場合にのみ行われます。               探索に失敗すると、シェルは
       ccoommmmaanndd__nnoott__ffoouunndd__hhaannddllee  という名前のシェル関数の定義を探します。 存在
       する場合には、元のコマンドと元のコマンドの引き数を引き数として、 この関
       数を呼び出します。この関数の終了ステータスがシェルの 終了ステータスとな
       ります。 この関数が定義されていない場合には、シェルはエラーメッセージを
       表示して終了ステータス 127 を返します。

       検索に成功したか、コマンド名に 1 つ以上のスラッシュが含まれる場合には、
       シェルは指定されたプログラムを独立した実行環境で実行します。  引き数  0
       には指定された名前が設定され、 コマンドに対する残りの引き数には (もしあ
       れば) 指定された引き数が設定されます。

       このファイルが実行可能フォーマットでないために実行が失敗し、 かつディレ
       クトリでもない場合には、      このファイルは     _シ_ェ_ル_ス_ク_リ_プ_ト_(_s_h_e_l_l
       _s_c_r_i_p_t_)であるとみなされます。  シェルスクリプトとは、シェルのコマンドが
       書かれているファイルのことです。   シェルスクリプトを実行するためにサブ
       シェルが呼び出されます。 このサブシェルは自分自身を再初期化し、  シェル
       スクリプトを処理するために 新しいシェルが起動されたかのような結果になり
       ます。ただし、 親が記憶しているコマンドの位置 (後述の  シシェェルルのの組組みみ込込みみ
       ココママンンドド における hhaasshh の項を参照) は子にも引き継がれます。

       プログラムが ##!! で始まるファイルである場合、 最初の行の残りの部分はこの
       プログラムのインタプリタを指定します。 シェルは指定されたインタプリタを
       オペレーティングシステム上で実行します。 オペレーティングシステムは、こ
       の実行可能フォーマットを直接処理しません。   インタプリタに対する引き数
       は、  プログラムの先頭の行のインタプリタ名の後の省略可能な引き数  1  つ
       と、 その後のプログラム名、さらに (もしあれば) その後のコマンドへの引き
       数から構成されます。

ココママンンドド実実行行環環境境
       シェルは以下の要素からなる_実_行_環_境_(_e_x_e_c_u_t_i_o_n _e_n_v_i_r_o_n_m_e_n_t_)を持ちます:

       •      起動時にそのシェルが継承したオープンされているファイル。  これは
              組み込みコマンド eexxeecc に与えられている  リダイレクション機能で変
              更されます。

       •      現在の作業ディレクトリ  (current  working directory)。これは ccdd,
              ppuusshhdd, ppooppdd で設定するか、  あるいは起動時にそのシェルが継承しま
              す。

       •      ファイル作成モードのマスク。 これは uummaasskk で設定するか、あるいは
              そのシェルの親から継承します。

       •      ttrraapp で設定された現在のトラップ。

       •      シェルのパラメータ。これは変数の代入か sseett で設定されるか、 ある
              いはその環境内にある親シェルから継承します。

       •      実行中に定義されるか、その環境内にある親シェルから継承したシェル
              関数。

       •      起動時に有効にしたか (デフォルト値あるいはコマンドライン引き数で
              設定した値)、 sseett で有効にしたオプション。

       •      sshhoopptt で有効にしたオプション。

       •      aalliiaass で定義したシェルエイリアス。

       •      各種プロセスID。これにはバックグラウンドジョブや  $$$$ の値、 PPPPIIDD
              の値が含まれます。

       組み込みコマンドやシェル関数以外の単純なコマンドを実行するとき、 このコ
       マンドは独立した実行環境内で呼び出されます。 この環境は以下の要素から成
       り立っています。 特に断らない限り、この値はシェルから引き継がれます。

       •      シェルのオープンしているファイルと、  コマンドに対するリダイレク
              ションで指定した変更・追加を加えたもの。

       •      現在の作業ディレクトリ

       •      ファイル作成モードのマスク

       •      エクスポートするシェル変数や関数と、  そのコマンドに対してエクス
              ポートされた変数。 これらは環境で渡されます。

       •      シェルに捕捉されるトラップは、  そのシェルの親から継承された値に
              再設定されます。  そのシェルにより無視されるトラップは無視されま
              す。

       この独立の環境内で呼び出されたコマンドが、 (親である)  シェルの実行環境
       に影響を及ぼすことはできません。

       コマンド置換や括弧でグループ化されたコマンド、非同期コマンドは、   サブ
       シェル環境内で呼び出されます。 このサブシェル環境はシェル環境を複製した
       ものです。  ただし、シェルにより捕捉されるトラップは、 そのシェルの起動
       時に親から継承した値に再設定されます。 パイプラインの一部として起動され
       た組み込みコマンドは、 サブシェル環境で実行されます。サブシェル環境に対
       して行われた変更は、 元のシェル実行環境に影響を及ぼすことはできません。

       コマンド置換を実行するために起動されたサブシェルは、 --ee  オプションの値
       を親シェルから継承します。  _p_o_s_i_x モードでない場合、bbaasshh はそのサブシェ
       ルでは --ee オプションをクリアします。

       コマンドの後に && が付けられたときに、ジョブ制御が有効でなければ、  コマ
       ンドのデフォルトの標準入力は空ファイル  _/_d_e_v_/_n_u_l_l となります。 そうでな
       ければ、呼び出されたコマンドは、呼び出したシェルの ファイル・ディスクリ
       プターを、リダイレクトも含めて継承します。

環環境境
       プログラムの起動時には、  _環_境 _(_e_n_v_i_r_o_n_m_e_n_t_) と呼ばれる文字列の配列が渡
       されます。 これは _変_数_名-_値 のペアからなるリストで、 _変_数_名=_値 という形
       になります。

       シェルは、環境を操作する様々な方法を提供しています。 起動時には、シェル
       は自分自身の環境を調べ、 見つかった名前それぞれに対してパラメータを生成
       し、  それに自動的に子プロセスへの  _エ_ク_ス_ポ_ー_ト  _(_e_x_p_o_r_t_) の印を付けま
       す。実行されたコマンドは環境を継承します。    eexxppoorrtt     コマンドまたは
       ddeeccllaarree  --xx コマンドを用いると、 パラメータや関数の追加と削除を環境に対
       して行えます。 環境内のパラメータの値が変更されると、  新しい値は環境の
       一部となり、古い値と置き換わります。   実行されたコマンドが継承する環境
       は、 シェルの最初の環境から、 変数の値がシェル中で変更されたり、 一部の
       ペアが uunnsseett コマンドで削除されたり、 eexxppoorrtt コマンドや ddeeccllaarree --xx コマ
       ンドで追加されたりしたものになります。

       _単_純_な_コ_マ_ン_ド や関数に対する環境は、一時的に修正できます。  これは、既
       に  パパララメメーータタ の項で説明したように、パラメータ代入を前に置くことで行い
       ます。 このような代入が影響を与えるのは、  そのコマンドが参照する環境だ
       けです。

       --kk  オプションを設定 (後述の組み込みコマンド sseett を参照) すると、コマン
       ド名の前に置いたものだけではなく、 _全_て_の  パラメータ代入がそのコマンド
       の環境に影響を与えます。

       bbaasshh  が外部コマンドを起動したときには、変数 __ にはコマンドの完全なファ
       イル名が設定され、 環境変数としてそのコマンドに渡されます。

終終了了スステテーータタスス
       実行したコマンドの終了ステータスは、_w_a_i_t_p_i_d  システムコールまたはそれに
       相当する関数が返した値です。 終了ステータスは 0 から 255 の値を取ります
       が、後述するように、 125 より大きい値は特別にシェルによって使われること
       があります。 シェルの組み込みコマンドや複合コマンドの終了ステータスも、
       同じ範囲に限定されています。 環境によっては、シェルは仕様で決められた失
       敗のモードを表す 特別の値を使います。

       シェルは、終了コード  0  で終了したコマンドは正常終了したとみなします。
       終了コード 0 は成功を示します。 0 以外の終了コードは失敗を示します。 あ
       るコマンドが致命的なシグナル  _N で終了したときには、 bbaasshh は「128+_N」の
       値を終了ステータスに使います。

       コマンドが見つからなかった場合には、 そのコマンドを実行するために生成さ
       れた子プロセスが ステータス 127 を返します。 コマンドが見つかったけれど
       実行できなかった場合には、 ステータスは 126 です。

       展開やリダイレクションの際にエラーが発生し コマンドが失敗した場合には、
       0 より大きい終了ステータスが返されます。

       シェルの組み込みコマンドは、 成功した場合にはステータス 0 (_真) を返し、
       実行中にエラーが起こった場合には 0 でない値 (_偽) を返します。  組み込み
       コマンドは全て、正しくない使い方であることを示すのに  終了ステータス  2
       を返します。

       bbaasshh 自身が返す終了ステータスは、文法エラーが起きた場合を除き、  実行し
       た最後のコマンドの終了ステータスです。  文法エラーの場合には 0 でない値
       が終了ステータスとなります。 後述の組み込みコマンド eexxiitt も参照してくだ
       さい。

シシググナナルル
       bbaasshh  が対話的であり、トラップが全くないとき、bbaasshh  は SSIIGGTTEERRMM を無視し
       (したがって kkiillll 0 でではは対対話話シシェェルルはは kkiillll さされれまませせんん))、、 SSIIGGIINNTT  をを捕捕捉捉しし
       処処理理ししまますす  ((ししたたががっってて組組みみ込込みみココママンンドド wwaaiitt は割り込み可能です)。 どん
       な場合でも、bbaasshh は SSIIGGQQUUIITT  を無視します。  ジョブ制御が有効な状態なら
       ば、 bbaasshh は SSIIGGTTTTIINN, SSIIGGTTTTOOUU, SSIIGGTTSSTTPP を無視します。

       bbaasshh  が起動した外部コマンドは、 シェルが自分の親から継承した値をシグナ
       ルハンドラに設定します。 ジョブ制御が有効でないときには、非同期コマンド
       は、  継承したシグナルハンドラに加えて SSIIGGIINNTT と SSIIGGQQUUIITT も無視します。
       コマンド置換の結果として実行されたコマンドは、   キーボードで生成された
       ジョブ制御シグナルを無視します。 無視されるシグナルは SSIIGGTTTTIINN, SSIIGGTTTTOOUU,
       SSIIGGTTSSTTPP です。

       デフォルトでは、シェルは SSIIGGHHUUPP  を受け取ると終了します。  終了する前に
       は、シェルは実行中・停止中の全てのジョブに対して   SSIIGGHHUUPP  を再送信しま
       す。停止中のジョブには SSIIGGCCOONNTT が送られ、このジョブが SSIIGGHHUUPP を受け取る
       ようにします。 特定のジョブに対してシェルからシグナルが送られないように
       するためには、 組み込みコマンド ddiissoowwnn (後述の シシェェルルのの組組みみ込込みみココママンンドド
       を参照)    を使って、そのジョブをジョブテーブルから削除するか、あるいは
       ddiissoowwnn --hh を使って、 SSIIGGHHUUPP を受け取らないようにマークを付けます。

       シェルオプションの hhuuppoonneexxiitt が sshhoopptt  を使って設定されていた場合、対話
       的なログインシェルが終了するときに、  bbaasshh は SSIIGGHHUUPP を全てのジョブに送
       ります。

       コマンドの完了を待っている間に、トラップが設定されたシグナルを bbaasshh  が
       受け取ったとき、   そのトラップはコマンドが完了するまで実行されません。
       bbaasshh が組み込みコマンドの  wwaaiitt  を使って非同期コマンドを待っているとき
       に、   トラップが設定されているシグナルを受け取ると、  組み込みコマンド
       wwaaiitt は即座に復帰させられます。 この際の終了ステータスは 128 より大きい
       値になります。 また復帰するのはトラップが実行された直後です。

ジジョョブブ制制御御
       _ジ_ョ_ブ_制_御  _(_j_o_b  _c_o_n_t_r_o_l_) とは、プロセスの実行を選択的に停止 (_サ_ス_ペ_ン
       _ド_/_s_u_s_p_e_n_d) させ、 後で実行を再開させる (_リ_ジ_ュ_ー_ム_/_r_e_s_u_m_e)  機能のこと
       です。 ユーザは通常、対話的インタフェースを通してこの機能を利用します。
       対話的インタフェースは、オペレーティングシステムのカーネルの端末ドライ
       バと bbaasshh の組み合わせで提供されます。

       シェルはパイプラインごとに _ジ_ョ_ブ_(_j_o_b_) を構成します。シェルは現在実行中
       のジョブのテーブルを保存しています。 このテーブルは jjoobbss コマンドを使っ
       てリスト表示できます。  bbaasshh がジョブを非同期的に (_バ_ッ_ク_グ_ラ_ウ_ン_ド で)
       起動したときには、 bbaasshh は以下のような行を出力します:

              [1] 25647

       これは、このジョブのジョブ番号は 1 であり、  このジョブを構成するパイプ
       ライン中の最後のプロセスの  ID が 25647 であることを示しています。 1 つ
       のパイプラインに含まれる全てのプロセスは同じジョブのメンバです。   bbaasshh
       は、ジョブ制御の基礎として _ジ_ョ_ブ という抽象化機構を使います。

       ジョブ制御のためのユーザインタフェースの実装を容易にするために オペレー
       ティングシステムは _現_在_の_端_末_プ_ロ_セ_ス_の_グ_ル_ー_プ  _I_D  _(_c_u_r_r_e_n_t  _t_e_r_m_i_n_a_l
       _p_r_o_c_e_s_s _g_r_o_u_p _I_D_) という情報を管理しています。 このプロセスグループのメ
       ンバ (プロセスグループ ID が現在の端末プロセスのグループ ID  と等しいプ
       ロセス)  は、 SSIIGGIINNTT のような、キーボードで生成されたシグナルを受け取り
       ます。 このようなプロセスは _フ_ォ_ア_グ_ラ_ウ_ン_ド _(_f_o_r_e_g_r_o_u_n_d_)  にあると言わ
       れます。  _バ_ッ_ク_グ_ラ_ウ_ン_ド _(_b_a_c_k_g_r_o_u_n_d_) プロセスは、 プロセスのグループ
       ID  が端末のグループ   ID   と異なるプロセスです。   このようなプロセス
       は、キーボードで生成したシグナルの影響を受けません。 フォアグラウンドプ
       ロセスだけが端末からの読み込みが許され、 stty tostop で許可されている場
       合には出力も許されます。   バックグラウンドプロセスが端末からの読み込み
       (stty tostop が有効なときには端末への書き込みも)  を行おうとすると、 こ
       のプロセスには端末ドライバから SSIIGGTTTTIINN ((SSIIGGTTTTOOUU)) シグナルが送られます。
       このシグナルを捕捉しなければ、プロセスは停止します。

       bbaasshh が動作しているオペレーティングシステムがジョブ制御をサポートしてい
       るならば、  ユーザは bbaasshh を使ってジョブ制御を行えます。 プロセスの動作
       中に _サ_ス_ペ_ン_ド 文字 (通常は ^^ZZ, Control-Z)  を打ち込むと、そのプロセス
       は停止させられ、   bbaasshh   に制御が戻ります。   _遅_延_サ_ス_ペ_ン_ド  _(_d_e_l_a_y_e_d
       _s_u_s_p_e_n_d_) 文字 (通常は ^^YY, Control-Y) を打ち込むと、  そのプロセスは端末
       から入力を読み込もうとしたときに停止させられ、 制御が bbaasshh に戻ります。
       この時点でユーザはこのジョブの状態を操作できます。 利用できるのは、バッ
       クグラウンドで実行を継続するならば  bbgg コマンド、フォアグラウンドで実行
       を継続するならば ffgg コマンド、プロセスを kill するなら kkiillll  コマンドで
       す。^^ZZ  の効果は即座に現われるので、 未出力の出力や先行入力した文字が破
       棄されるという副作用があります。

       シェル上でジョブを参照する方法はいろいろあります。  文字  %%  はジョブ名
       (_j_o_b_s_p_e_c)  の始まりを示します。 ジョブ番号 _n は %%nn として参照できます。
       ジョブの参照には、 ジョブを起動するときに使った名前の先頭部分や  コマン
       ドライン中に現われる部分文字列を使うこともできます。  例えば、 %%ccee は停
       止中のジョブ ccee を指します。 先頭の部分がマッチするジョブが複数個ある場
       合には、  bbaasshh  はエラーを報告します。一方、 %%??ccee を用いると、文字列 ccee
       をコマンドライン中に含む任意のジョブを参照できます。 部分文字列がマッチ
       するジョブが複数個ある場合には、  bbaasshh  はエラーを報告します。 シンボル
       %%%% および %%++ は、シェルが覚えている _カ_レ_ン_ト_ジ_ョ_ブ _(_c_u_r_r_e_n_t _j_o_b_) を指し
       ます。これは、フォアグラウンドで起動されているときに停止されたか、 バッ
       クグラウンドで起動された最後のジョブです。 _前_の_ジ_ョ_ブ _(_p_r_e_v_i_o_u_s _j_o_b_) は
       %%-- を使って参照できます。 ジョブが一つしかない場合には、%%++ と %%-- のどち
       らも使っても そのジョブを参照することができます。 ジョブに関する出力  (
       jjoobbss  コマンドの出力など) では、カレントジョブには必ず ++ というフラグが
       付き、前のジョブには -- というフラグが付きます。  ジョブ名が付いていない
       単独の % もカレントジョブを示します。

       ジョブの名前だけを指定すると、 そのジョブをフォアグラウンドに持ってきま
       す。つまり、 %%11 は ““ffgg %%11”” と同義であり、 ジョブ 1 をバックグラウンドか
       らフォアグラウンドに持ってきます。  同様に ““%%11 &&”” はジョブ 1 をバックグ
       ラウンドで実行再開させます。これは ““bbgg %%11”” と同じ意味です。

       ジョブの状態が変わると、シェルはそれを即座に知ります。 通常、  bbaasshh  が
       ジョブの状態変化を報告するのは、プロンプトを出力する直前です。 これは他
       の出力を妨害しないためです。 組み込みコマンド sseett で --bb  オプションが指
       定されていると、 bbaasshh はジョブの状態の変化を即座に報告します。 子プロセ
       スが終了するたびに SSIIGGCCHHLLDD のトラップが実行されます。

       ジョブを停止させたままで (cchheecckkjjoobbss シェルオプションが 組み込みコマンド
       sshhoopptt により有効になっているときには実行中でも) bbaasshh を終了 (exit) させ
       ようとすると、シェルは警告メッセージを出力します。 cchheecckkjjoobbss オプション
       が有効のときには、ジョブとその状態を一覧表示します。   このようなときに
       は、 jjoobbss コマンドを使ってジョブの状態を調べられます。 間にコマンドを挟
       まずに bbaasshh を再び終了させようとすると、 シェルは警告を繰り返さないで、
       停止中のジョブを終了させます。

ププロロンンププトト
       対話的に動作している場合、 bbaasshh  はコマンドを読む込み準備ができたときに
       プライマリプロンプト PPSS11 を表示し、コマンドを完成させるためにまだ入力が
       必要なときに セカンダリプロンプト PPSS22 を表示します。 bbaasshh  ではこれらの
       プロンプト文字列をカスタマイズできます。 この際にはバックスラッシュでエ
       スケープされた 各種特殊文字を挿入でき、  これは以下のようにデコードされ
       ます:
              \\aa     ASCII のベル文字 (07)
              \\dd     "曜日 月 日" という形式の日付 (例: "Tue May 26")
              \\DD{{_f_o_r_m_a_t}}
                     _f_o_r_m_a_t が _s_t_r_f_t_i_m_e(3) に渡され、 その結果がプロンプト文字
                     列に挿入されます。  _f_o_r_m_a_t  が空の場合には  (ブレースは必
                     要)、 ロケールで指定された時刻表記になります。
              \\ee     ASCII のエスケープ文字 (033)
              \\hh     ホスト名のうち最初の `.' までの部分
              \\HH     ホスト名
              \\jj     シェルによって現在管理されているジョブの数
              \\ll     シェルの端末デバイスのベース名 (basename)
              \\nn     改行 (newline)
              \\rr     復帰 (carriage return)
              \\ss     シェルの名前。つまり  $$00 のベース名 (最後のスラッシュ以降
                     の部分)
              \\tt     24 時間制の HH:MM:SS 形式の現在の時刻
              \\TT     12 時間制の HH:MM:SS 形式の現在の時刻
              \\@@     12 時間制の am/pm 形式の現在の時刻
              \\AA     12 時間制の HH:MM 形式の現在の時刻
              \\uu     現在のユーザのユーザ名
              \\vv     bbaasshh のバージョン (例: 2.00)
              \\VV     bbaasshh のリリース。バージョンにパッチレベルを加えたもの (例
                     : 2.00.0)
              \\ww     現在の作業ディレクトリ。 $$HHOOMMEE の部分はチルダに短縮されま
                     す。 PPRROOMMPPTT__DDIIRRTTRRIIMM の値が適用されます。
              \\WW     現在の作業ディレクトリのベース名 $$HHOOMMEE の部分はチルダに短
                     縮されます。
              \\!!     このコマンドの履歴番号
              \\##     このコマンドのコマンド番号
              \\$$     実効 UID が 0 の場合に ##、 それ以外の場合は $$
              \\_n_n_n   8進数 _n_n_n に対応する文字
              \\\\     バックスラッシュ
              \\[[     非表示文字のシーケンスの開始。 これを使うと、プロンプト中
                     に端末の制御シーケンスを埋め込むことができます。
              \\]]     非表示文字のシーケンスを終了します。

       コマンド番号と履歴番号は異なるのが普通です:  コマンドの履歴番号とは履歴
       リスト内での位置です。 履歴リストは履歴ファイルから読み込めます (後述の
       履履歴歴 を参照)。 一方、コマンド番号は、  現在のシェルのセッション中に実行
       された一連のコマンドの列における位置です。   この文字列がデコードされた
       後、さらにパラメータ展開、コマンド置換、 算術式展開、クォート削除が適用
       されます。展開はシェルオプション  pprroommppttvvaarrss (後述の シシェェルルのの組組みみ込込みみココ
       ママンンドド の項にある  sshhoopptt  コマンドの説明を参照)  の値に基づいて行われま
       す。

RREEAADDLLIINNEE ラライイブブララリリ
       readline   は対話シェルを使うときに入力の読み込みを処理するライブラリで
       す。 ただし、シェルの起動時に ----nnooeeddiittiinngg  オプションが指定された場合に
       は使われません。  行編集は組み込みコマンド rreeaadd に --ee オプションを 指定
       したときにも使われます。  デフォルトでは、行編集に使うコマンドは  emacs
       のコマンドに似ています。 vi 形式の行編集インタフェースも使えます。 行編
       集は、組み込みコマンド sseett (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照)  に
       --oo  eemmaaccss や --oo vvii オプションを指定することで、いつでも有効にできます。
       シェルを起動した後に行編集機能を無効にするには、組み込みコマンド sseett に
       対して ++oo eemmaaccss オプションまたは ++oo vvii オプションを設定してください。

   RReeaaddlliinnee のの記記法法
       このセクションでは、emacs  形式の記法を使ってキーストロークを表します。
       コントロールキーは C-_k_e_y で表します  (例:  C-n  は  Control-N  の意味で
       す)。同様に  _メ_タ キーは M-_k_e_y で表すので、M-x は Meta-X を表すことにな
       ります。 (_メ_タ キーがないキーボードでは、M-_x は ESC _x  を表します。つま
       り、  エスケープキーを押した後に _x キーを押します。これは ESC を _メ_タ_プ
       _レ_フ_ィ_ッ_ク_ス  _(_m_e_t_a   _p_r_e_f_i_x_)   にする操作です。   M-C-_x   の組み合わせ
       は、ESC-Control-_x  つまり、エスケープキーを押した後に、コントロールキー
       を押したまま _x を押すことを意味します。)

       Readline のコマンドには数値の _引_き_数 を指定できます。通常これは繰り返し
       の回数として作用します。 ただし、場合によっては、引き数の符号が意味を持
       つこともあります。 順方向に作用するコマンド (例: kkiillll--lliinnee)  に負の引き
       数を渡すと、  コマンドは逆方向に作用します。 引き数を指定した場合の動作
       がこの説明と異なるコマンドについては後で説明します。

       コマンドがテキストを_キ_ル _(_k_i_l_l_) すると説明されているときは、 削除された
       テキストは、 後で取り出せる (_ヤ_ン_ク _(_y_a_n_k_) できる) ように保存されます。
       キルされたテキストは、_キ_ル_リ_ン_グ _(_k_i_l_l _r_i_n_g_) に保存されます。  連続して
       キルを行うと、テキストは  1 つのまとまりとして保存されるので、 全部を一
       度にヤンクできます。テキストをキルしないコマンドが挟まると、 キルリング
       上のテキストが分離されます。

   RReeaaddlliinnee のの初初期期化化
       readline   をカスタマイズするには、  コマンドを初期化ファイル  (_i_n_p_u_t_r_c
       ファイル) に追加します。 このファイルの名前は、変数 IINNPPUUTTRRCC  の値から決
       まります。 この変数が設定されていない場合のデフォルト値は _~_/_._i_n_p_u_t_r_c で
       す。 readline  ライブラリを使うプログラムが起動する際には、  この初期化
       ファイルが読み込まれ、キー割り当てと変数が設定されます。  readline の初
       期化ファイル中で使用できる基本的構文は、   以下のように少ししかありませ
       ん。 空行は無視されます。 ## で始まる行はコメントです。 $$ で始まる行は条
       件文です。 それ以外の行はキー割り当てと変数の設定です。

       デフォルトのキー割り当ては _i_n_p_u_t_r_c ファイルで変更できます。  このライブ
       ラリを使う他のプログラムからも、 独自のコマンドとキー割り当てを追加でき
       ます。

       例えば、

              M-Control-u: universal-argument
       または
              C-Meta-u: universal-argument
       を _i_n_p_u_t_r_c ファイルに書くと、M-C-u で readline の _u_n_i_v_e_r_s_a_l_-_a_r_g_u_m_e_n_t コ
       マンドが実行されるようになります。

       以下に示すシンボル名を使うことができます:   _R_U_B_O_U_T,   _D_E_L,   _E_S_C,  _L_F_D,
       _N_E_W_L_I_N_E, _R_E_T, _R_E_T_U_R_N, _S_P_C, _S_P_A_C_E, _T_A_B。

       readline   では、キーにはコマンド名だけでなく文字列を割り当てることもで
       き、 その場合には、そのキーが押されると割り当てられた文字列が挿入されま
       す (_マ_ク_ロ)。

   RReeaaddlliinnee ののキキーー割割りり当当てて
       _i_n_p_u_t_r_c   ファイルにおける制御キーの割り当て方は単純です。   必要なもの
       は、コマンド名あるいはマクロの文字列と、 これらが割り当てられるキーシー
       ケンスだけです。 名前は 2 通りの方法で指定できます。 つまり、シンボリッ
       クなキーの名前  (たいていは、_M_e_t_a_- や _C_o_n_t_r_o_l_- プレフィックスと組み合わ
       せて使われる) による指定と、 キーシーケンスによる指定です。

       「kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e」あるいは   「kkeeyynnaammee:_m_a_c_r_o」の形式を使うときに
       は、  _k_e_y_n_a_m_e  は英語で書き下したキーの名前となります。例を以下に示しま
       す:

              Control-u: universal-argument
              Meta-Rubout: backward-kill-word
              Control-o: "> output"

       この例では、 _C_-_u が uunniivveerrssaall--aarrgguummeenntt に、 _M_-_D_E_L が bbaacckkwwaarrdd--kkiillll--wwoorrdd
       に割り当てられます。  また、 _C_-_o はマクロの実行に割り当てられ、右辺値に
       展開されます (つまり、テキスト ``> output'' が編集行に挿入されます)。

       後者の形式である「""kkeeyysseeqq"":_f_u_n_c_t_i_o_n_-_n_a_m_e」または 「""kkeeyysseeqq"":_m_a_c_r_o」にお
       いては、  kkeeyysseeqq  は先程の  kkeeyynnaammee とは異なり、 ダブルクォートで括って
       キーシーケンス全体を示す文字列を表記しています。     以下の例で示すよう
       に、GNU Emacs 形式のキーエスケープの一部を使えます。 ただしシンボリック
       な文字名は認識されません。

              "\C-u": universal-argument
              "\C-x\C-r": re-read-init-file
              "\e[11~": "Function Key 1"

       この例でも、 _C_-_u が uunniivveerrssaall--aarrgguummeenntt 機能に割り当てられています。 _C_-_x
       _C_-_r は rree--rreeaadd--iinniitt--ffiillee 機能に割り当てられ、 _E_S_C _[ _1 _1 _~ は ``Function
       Key 1'' という文字列の挿入に割り当てられています。

       GNU Emacs 形式のエスケープシーケンスを以下に全て示します:
              \\CC--    コントロールプレフィックス
              \\MM--    メタプレフィックス
              \\ee     エスケープ文字
              \\\\     バックスラッシュ
              \\""     " という文字
              \\''     ' という文字

       GNU Emacs 形式のエスケープシーケンスに加えて、 別形式のバックスラッシュ
       エスケープも使えます:
              \\aa     警告 (ベル)
              \\bb     バックスペース
              \\dd     削除 (delete)
              \\ff     フォームフィード
              \\nn     改行 (newline)
              \\rr     復帰 (carriage return)
              \\tt     水平タブ
              \\vv     垂直タブ
              \\_n_n_n   8  進値が  _n_n_n である 8 ビット文字 (1 文字につき数字 1〜3
                     桁)
              \\xx_H_H   16 進値が _H_H である 8 ビット文字 (16 進で 1〜2 桁)。

       マクロのテキストを入力する際には、マクロ定義を示すために シングルクォー
       トやダブルクォートを使わなければなりません。 クォートされていないテキス
       トは関数名とみなされます。 マクロ本体では、前述のバックスラッシュによる
       エスケープは展開されます。 バックスラッシュはマクロのテキスト内の他の文
       字を全てエスケープします。 これには " や ' も含まれます。

       bbaasshh では、組み込みコマンドの bbiinndd を使って、readline の現在の キー割り
       当ての表示と変更を行えます。  また、組み込みコマンド sseett に対して --oo オ
       プションを使えば、編集モードを対話的利用の途中に切り替え可能です  (後述
       の シシェェルルのの組組みみ込込みみココママンンドド を参照)。

   RReeaaddlliinnee のの変変数数
       Readline  には、動作を細かくカスタマイズするために変数があります。 変数
       は _i_n_p_u_t_r_c ファイル中に

              sseett _v_a_r_i_a_b_l_e_-_n_a_m_e _v_a_l_u_e

       という形式の文で設定できます。 特に断らない限り、readline  の変数がとる
       値は  OOnn か OOffff のいずれかです。大文字と小文字の違いは考慮しません。 認
       識できない変数名は無視されます。 変数の値を読み取るとき、設定されてない
       場合や、空文字列、"on" (大文字と小文字は区別しない)、"1" は OOnn とみなさ
       れます。それ以外の値は OOffff とみなされます。  変数とそのデフォルト値を以
       下に示します:

       bbeellll--ssttyyllee ((aauuddiibbllee))
              readline    が端末のベルを鳴らそうとしたときの動作を制御します。
              nnoonnee   が設定されている場合は、readline   はベルを鳴らしません。
              vviissiibbllee  が設定されている場合には、可能であれば可視ベル (visible
              bell)     が用いられます。aauuddiibbllee     が設定されている場合には、
              readline は端末のベルを鳴らそうとします。
       bbiinndd--ttttyy--ssppeecciiaall--cchhaarrss ((OOnn))
              OOnn が設定されていると、 カーネルの端末ドライバによって特別扱いさ
              れるコントロール文字の機能の代わりに readline の同等の機能を割り
              当てようとします。
       ccoommmmeenntt--bbeeggiinn ((““##””))
              readline  の iinnsseerrtt--ccoommmmeenntt コマンドが実行されたときに挿入される
              文字列です。 このコマンドは emacs  モードでは  MM--##  に割り当てら
              れ、vi コマンドモードでは ## に割り当てられます。
       ccoommpplleettiioonn--iiggnnoorree--ccaassee ((OOffff))
              OOnn  が設定されていると、 readline がファイル名のマッチングと補完
              を行う際に 大文字と小文字が区別されません。
       ccoommpplleettiioonn--pprreeffiixx--ddiissppllaayy--lleennggtthh ((00))
              補完候補のリストでそのまま表示される共通先頭部分の文字数。 0  よ
              り大きい値が設定されると、補完候補を表示するときに、  この値より
              長い共通先頭部分は省略記号で置き換えられます
       ccoommpplleettiioonn--qquueerryy--iitteemmss ((110000))
              ppoossssiibbllee--ccoommpplleettiioonnss コマンドが生成した補完候補の数が、 いくつを
              越えると表示の可否をユーザに問い合わせるのかを決めます。  この変
              数には 0 以上の任意の整数を設定できます。 補完の候補数がこの変数
              の値以上の場合には、  ユーザに対して候補を表示するかどうかの問い
              合わせがなされます。  そうでない場合には、単に端末に補完の候補が
              リスト表示されます。
       ccoonnvveerrtt--mmeettaa ((OOnn))
              OOnn  を設定すると、readline は 8 番目のビットがセットされている文
              字を ASCII のキーシーケンスに変換します。 変換は、8 番目のビット
              を落として、    エスケープ文字を前に追加することによって行います
              (実際にはエスケープ文字を_メ_タ_プ_レ_フ_ィ_ッ_ク_スとして用います)。
       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
              OOnn を設定すると、readline は単語の補完を行わなくなります。  補完
              される文字の編集行への挿入は、 その文字を sseellff--iinnsseerrtt に割り当て
              たかのように行われます。
       eeddiittiinngg--mmooddee ((eemmaaccss))
              readline の起動時に _e_m_a_c_s と _v_i のどちらに似たキー割り当てを使う
              のかを制御します。  eeddiittiinngg--mmooddee には eemmaaccss と vvii のいずれかを指
              定できます。
       eecchhoo--ccoonnttrrooll--cchhaarraacctteerrss ((OOnn))
              OOnn が設定されていると、サポートしている OS では、 キーボード操作
              でシグナルが起こされたときに相当する文字を画面に出力します。
       eennaabbllee--kkeeyyppaadd ((OOffff))
              OOnn  を設定すると、 readline は呼び出されたときにアプリケーション
              キーパッドを有効にしようとします。  一部のシステムでは、矢印キー
              を使うためにこれを有効にする必要があります。
       eennaabbllee--mmeettaa--kkeeyy ((OOnn))
              OOnn  が設定されていると、 readline は端末がサポートを要求するメタ
              修飾キーを有効にしようとします。  多くの端末では、メタキーは   8
              ビット文字を送信するのに使われます。
       eexxppaanndd--ttiillddee ((OOffff))
              OOnn  を設定すると、 readline が単語の補完を試みるときにチルダ展開
              が行われます。
       hhiissttoorryy--pprreesseerrvvee--ppooiinntt ((OOffff))
              OOnn が設定されていると、 pprreevviioouuss--hhiissttoorryy や nneexxtt--hhiissttoorryy  で履歴
              行を取り出したときに、    ポイントを行内の同じ位置に置こうとしま
              す。
       hhiissttoorryy--ssiizzee ((00))
              履歴リストに保存する履歴エントリの最大数を設定する。 0  が設定さ
              れていると、履歴リストのエントリの数は制限されません。
       hhoorriizzoonnttaall--ssccrroollll--mmooddee ((OOffff))
              OOnn が設定されていると、readline は表示の際に 1 行しか 使わないよ
              うになります。つまり、行がスクリーンの幅より長くなると、  新しい
              行に折り返すのではなく、1 つの入力行の中で横にスクロールします。
       iinnppuutt--mmeettaa ((OOffff))
              OOnn  が設定されていると、readline は 8 ビットの入力が可能になりま
              す(つまり、読み込んだ文字の再上位ビットを落としません)。この動作
              は、端 末のサポートとは無関係に行われます。 mmeettaa--ffllaagg という名前
              は、この変数の別名です。
       iisseeaarrcchh--tteerrmmiinnaattoorrss ((““CC--[[CC--JJ””))
              インクリメンタル検索を終了させる文字からなる文字列です (終了後に
              その文字がコマンドとして実行されることもありません)。 この変数に
              値が設定されていなければ、 _E_S_C と _C_-_J でインクリメンタル検索が終
              わります。
       kkeeyymmaapp ((eemmaaccss))
              現在の  readline  のキーマップを設定します。  有効なキーマップ名
              は、  _e_m_a_c_s_,   _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,   _e_m_a_c_s_-_m_e_t_a_,   _e_m_a_c_s_-_c_t_l_x_,   _v_i_,
              _v_i_-_c_o_m_m_a_n_d, .IR vi-insert です。_v_i は _v_i_-_c_o_m_m_a_n_d と等価で、_e_m_a_c_s
              は  _e_m_a_c_s_-_s_t_a_n_d_a_r_d  と等価です。  デフォルト値は  _e_m_a_c_s   です。
              eeddiittiinngg--mmooddee の値もデフォルトキーマップに影響を与えます。
       mmaarrkk--ddiirreeccttoorriieess ((OOnn))
              OOnn  が設定されていると、  補完されたディレクトリ名の末尾にスラッ
              シュが追加されます。
       mmaarrkk--mmooddiiffiieedd--lliinneess ((OOffff))
              OOnn が設定されていると、履歴行を表示する際に、 以前に変更されたも
              のの先頭にアスタリスク (**) を付けて表示します。
       mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess ((OOffff))
              OOnn が設定されていると、 ディレクトリへのシンボリックリンクが補完
              されたときに、 (mmaarrkk--ddiirreeccttoorriieess が有効であれば)  名前の末尾にス
              ラッシュが追加されます。
       mmaattcchh--hhiiddddeenn--ffiilleess ((OOnn))
              OOnn  が設定されていると、  ファイル名の補完で  `.' で始まる名前の
              ファイル (隠しファイル) にもマッチします。 OOffff  が設定されている
              ときには、`.' で始まる名前のファイルを 補完するには先頭の `.' を
              ユーザが入力する必要があります。
       mmeennuu--ccoommpplleettee--ddiissppllaayy--pprreeffiixx ((OOffff))
              OOnn が設定されていると、 メニュー補完 (menu completion)  で補完候
              補のリスト (空の場合も含む) を順番に表示する前に、共通先頭部分を
              表示します。
       oouuttppuutt--mmeettaa ((OOffff))
              OOnn が設定されていると、 readline は 8 番目のビットが立っている文
              字を直接表示します。  メタ文字を前置したエスケープシーケンスでの
              表示は行いません。
       ppaaggee--ccoommpplleettiioonnss ((OOnn))
              OOnn が設定されていると、 一度に一画面分の補完候補を表示するために
              readline は組み込みの _m_o_r_e 風ページャを使います。
       pprriinntt--ccoommpplleettiioonnss--hhoorriizzoonnttaallllyy ((OOffff))
              OOnn  が設定されていると、  readline  は補完でマッチするものをアル
              ファベット順にして、 縦方向ではなく横方向に並べて表示します。
       rreevveerrtt--aallll--aatt--nneewwlliinnee ((OOffff))
              OOnn が設定されていると、 aacccceepptt--lliinnee が実行されて readline から戻
              るときに、 履歴に加えられた全ての変更を元に戻します。 デフォルト
              では、rreeaaddlliinnee  の各呼び出しを通じて  履歴行が変更され単一のアン
              ドゥリストが保持されます。
       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
              これは補完機能のデフォルトの挙動を変えます。 OOnn が設定されている
              場合、単語に対する補完候補が複数個あると、      ベルは鳴らされず
              に、マッチするものが即座にリスト表示されます。
       sshhooww--aallll--iiff--uunnmmooddiiffiieedd ((OOffff))
              これは sshhooww--aallll--iiff--aammbbiigguuoouuss と同様に 補完機能のデフォルトの挙動
              を変えます。 OOnn が設定されている場合、単語に対する補完候補が複数
              個あって、  部分的な補完ができない (補完候補が共通先頭部分を持た
              ない) と、 マッチするものが即座にリスト表示されます。 ベルは鳴ら
              されません。
       sskkiipp--ccoommpplleetteedd--tteexxtt ((OOffff))
              OOnn が設定されていると、 これは補完機能がマッチしたものを行に挿入
              するときのデフォルトの挙動を変えます。  単語の途中で補完を実行し
              たときにだけ意味があります。 有効になっていると、readline は、単
              語のカーソル以後の部分が重複しないように、  補完された単語のうち
              ポイント以後の文字を挿入しません。
       vviissiibbllee--ssttaattss ((OOffff))
              OOnn が設定されていると、 _s_t_a_t(2) で得られるファイルの種類を表す文
              字が、 補完候補のリスト表示の際に追加されます。

   RReeaaddlliinnee のの条条件件構構文文
       Readline には、 C 言語のプリプロセッサの条件付きコンパイル機能と 似たコ
       ンセプトに基づく機能が実装されています。 これを使うと、条件に応じてキー
       割り当てや変数の設定を実行できます。 パーザディレクティブは 4  つありま
       す。

       $$iiff    $$iiff 構文を使うと、編集モードや使用中の端末、 readline を使ってい
              るアプリケーションに応じた割り当てを行えます。  行末までの全テキ
              ストが評価対象となります。  これを分離するには文字は必要ありませ
              ん。

              mmooddee   $$iiff ディレクティブの mmooddee==  形式は、  readline  が  emacs
                     モードか  vi モードのどちらになっているかを調べるために使
                     います。 例えば、これを sseett kkeeyymmaapp コマンドと一緒に使い、
                     readline が emacs モードで始まったときだけ キーの割り当て
                     を _e_m_a_c_s_-_s_t_a_n_d_a_r_d  や  _e_m_a_c_s_-_c_t_l_x  キーマップに設定できま
                     す。

              tteerrmm   tteerrmm== 形式を使うと、 端末固有のキー割り当てを入れることが
                     できます。 これは端末のファンクションキーが出力する  キー
                     シーケンスを割り当てる場合などに使えます。 == の右辺の単語
                     の評価は、 端末の完全な名前および最初の --  の前までの部分
                     的な名前の両方に対して行われます。 例えば、 _s_u_n は _s_u_n と
                     _s_u_n_-_c_m_d の両方にマッチします。

              aapppplliiccaattiioonn
                     aapppplliiccaattiioonn  はアプリケーション固有の設定を入れるために使
                     います。  readline ライブラリを使っているプログラムはそれ
                     ぞれ _ア_プ_リ_ケ_ー_シ_ョ_ン_名 _(_a_p_p_l_i_c_a_t_i_o_n  _n_a_m_e_)  を設定するの
                     で、   初期化ファイルはそれが特定の値かどうかを調べられま
                     す。 これを使って、特定のプログラム用で便利な機能に  キー
                     シーケンスを割り当てできます。例えば、以下のコマンドは、
                     bbaasshh   の場合に、現在の単語または直前の単語をクォートする
                     キーシーケンスを追加します。

                     $$iiff Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $$eennddiiff

       $$eennddiiff このコマンドは $$iiff コマンドを終了させます (上記の例の通り)。

       $$eellssee  $$iiff  ディレクティブのこの分岐内に書かれたコマンドは、 評価が失敗
              したときに実行されます。

       $$iinncclluuddee
              このディレクティブはファイル名 1 つを引き数に取り、 そのファイル
              からコマンドとキー割り当てを読み込みます。  例えば以下のディレク
              ティブを使うと _/_e_t_c_/_i_n_p_u_t_r_c が読み込まれます:

              $$iinncclluuddee  _/_e_t_c_/_i_n_p_u_t_r_c

   検検索索
       readline   には、指定した文字列を含む行をコマンド履歴内から探すコマンド
       が用意されています (後述の 履履歴歴 を参照)。 検索のモードには、 _イ_ン_ク_リ_メ
       _ン_タ_ル _(_i_n_c_r_e_m_e_n_t_a_l_) モードと _非_イ_ン_ク_リ_メ_ン_タ_ル _(_n_o_n_-_i_n_c_r_e_m_e_n_t_a_l_) モー
       ドの 2 つがあります。

       インクリメンタル検索では、 ユーザが検索文字列全体の入力が終わるより前に
       検索が開始されます。 検索文字列に文字が追加されるたびに、 readline はそ
       れまでに入力した文字列にマッチする履歴から   次のエントリを表示します。
       インクリメンタル検索では、探している履歴エントリを見つけるために 必要な
       数の文字を入力すれば十分です。 iisseeaarrcchh--tteerrmmiinnaattoorrss の値に含まれる文字を
       入力すると、 インクリメンタル検索は終了します。  この変数に値が代入され
       ていない場合には、エスケープ文字または Control-J でインクリメンタル検索
       が終了します。 Control-G はインクリメンタル検索を異常終了させ、元の行を
       復元します。 検索が終了すると、検索文字列を含む履歴エントリが現在の行に
       なります。

       マッチした他の履歴リストのエントリを見つけるには、Control-S      または
       Control-R を適宜入力します。これにより、 今まで入力した検索文字列にマッ
       チする次のエントリを 履歴の前方または後方に向かって探します。  readline
       に割り当てられた他のキーシーケンスを入力すると検索が終わり、   入力した
       キーシーケンスに対応するコマンドが実行されます。 例えば、_改_行は検索を終
       了させて、その行を入力します。 これにより、履歴リスト中のコマンドが実行
       されます。

       readline は前回のインクリメンタル検索で入力された  検索文字列を覚えてい
       ます。  新しい検索文字を間に挟まずに Control-R を 2 回入力すると、 覚え
       ている検索文字列が使われます。

       インクリメンタルでない検索の場合には、検索文字列全体を読み込んでから、
       履歴行にマッチするものの検索を始めます。 検索文字列には、ユーザが入力し
       たものか、現在の行の内容の一部が使えます。

   RReeaaddlliinnee ののココママンンドド名名
       以下は、  コマンドの名前およびそれらが割り当てられている   デフォルトの
       キーシーケンスの一覧です。 対応するキーシーケンスがないコマンド名には、
       デフォルトではキーは割り当てられていません。   以下の説明では、_ポ_イ_ン_ト
       _(_p_o_i_n_t_) は現在のカーソルの位置を表し、 _マ_ー_ク _(_m_a_r_k_) は sseett--mmaarrkk コマン
       ドによって保存されたカーソル位置を表します。 ポイントとマークの間のテキ
       ストは、_リ_ー_ジ_ョ_ン _(_r_e_g_i_o_n_) と呼びます。

   移移動動ココママンンドド
       bbeeggiinnnniinngg--ooff--lliinnee ((CC--aa))
              現在の行の先頭に移動します。
       eenndd--ooff--lliinnee ((CC--ee))
              行の末尾に移動します。
       ffoorrwwaarrdd--cchhaarr ((CC--ff))
              1 文字進みます。
       bbaacckkwwaarrdd--cchhaarr ((CC--bb))
              1 文字戻ります。
       ffoorrwwaarrdd--wwoorrdd ((MM--ff))
              次の単語の最後に進みます。単語は英数字  (英字と数字)  からなりま
              す。
       bbaacckkwwaarrdd--wwoorrdd ((MM--bb))
              現在あるいは直前の単語の先頭に戻ります。 単語は英数字  (英字と数
              字) からなります。
       sshheellll--ffoorrwwaarrdd--wwoorrdd
              次の単語の最後に進みます。  単語はクォートされていないシェルのメ
              タ文字で区切られます。
       sshheellll--bbaacckkwwaarrdd--wwoorrdd
              現在の単語あるいは前の単語の先頭に戻ります。  単語はクォートされ
              ていないシェルのメタ文字で区切られます。
       cclleeaarr--ssccrreeeenn ((CC--ll))
              現在の行を画面の一番上の行に残したまま、画面をクリアします。  引
              き数を付けると、画面をクリアせずに現在の行を再描画します。
       rreeddrraaww--ccuurrrreenntt--lliinnee
              現在の行を再描画します。

   履履歴歴操操作作ののたためめののココママンンドド
       aacccceepptt--lliinnee ((NNeewwlliinnee,, RReettuurrnn))
              カーソルの位置に関わらず、行を確定します。この行が空でなけれ
              ば、変数  HHIISSTTCCOONNTTRROOLL の状態に従って、これが履歴リストに追加され
              ます。  行が履歴リストを変更したものならば、履歴行は元の状態に戻
              されます。
       pprreevviioouuss--hhiissttoorryy ((CC--pp))
              履歴リストを戻り、履歴リストから前の行を取り出します。
       nneexxtt--hhiissttoorryy ((CC--nn))
              履歴リストを進み、履歴リストから次の行を取り出します。
       bbeeggiinnnniinngg--ooff--hhiissttoorryy ((MM--<<))
              履歴の最初の行に移動します。
       eenndd--ooff--hhiissttoorryy ((MM-->>))
              入力履歴の最後に移動します。つまり、現在入力中の行に移動します。
       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
              現在の行を開始点にして後方に向かって検索を行い、  必要に応じて履
              歴を「遡って」いきます。これはインクリメンタル検索です。
       ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((CC--ss))
              現在の行を開始点にして前方に向かって検索を行い、  必要に応じて履
              歴を「下って」いきます。これはインクリメンタル検索です。
       nnoonn--iinnccrreemmeennttaall--rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((MM--pp))
              現在の行を開始点にして、履歴リストを後方に向かって検索を行いま
              す。  ユーザが入力した文字列を非インクリメンタルモードで検索しま
              す。
       nnoonn--iinnccrreemmeennttaall--ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((MM--nn))
              現在の行を開始点にして、履歴リストを前方に向かって検索を行いま
              す。  ユーザが入力した文字列を非インクリメンタルモードで検索しま
              す。
       hhiissttoorryy--sseeaarrcchh--ffoorrwwaarrdd
              履歴を前方に向かって検索し、  現在の行の先頭とポイントの間の文字
              列を探します。 これは非インクリメンタル検索です。
       hhiissttoorryy--sseeaarrcchh--bbaacckkwwaarrdd
              履歴を後方に向かって検索し、  現在の行の先頭およびポイントの間の
              文字列を探します。 これは非インクリメンタル検索です。
       yyaannkk--nntthh--aarrgg ((MM--CC--yy))
              前のコマンドに対する最初の引き数  (通常は前の行の  2 番目の単語)
              をポイントに挿入します。引き数 _n  が付いていると、前のコマンドの
              _n  番目の単語 (前のコマンドの単語は 0 から数えます)。 引き数が負
              ならば、前のコマンドの最後から _n 番目の単語が挿入されます。 引き
              数  _n が一度決まると、コマンドの引き数が履歴の展開での "!_n" の指
              定のように展開されます。
       yyaannkk--llaasstt--aarrgg ((MM--..,, MM--__))
              前のコマンドの最後の引き数 (一つ前の履歴エントリの最後の単語) を
              挿入します。 引き数があると、yyaannkk--nntthh--aarrgg と全く同じように動作し
              ます。 yyaannkk--llaasstt--aarrgg を繰り返して呼び出すと、 履歴リストを遡って
              参照が行われ、  それぞれの行の最後の引き数が順番に挿入されます。
              繰り返して呼び出すときの引き数は、履歴の中を動く方向を決めます。
              負の引き数は、履歴の中を動く方向 (後方または前方) を反転します。
              履歴の展開での "!$" の指定のように、  最後の引き数の展開に履歴の
              展開の機能が使われます。
       sshheellll--eexxppaanndd--lliinnee ((MM--CC--ee))
              シェルが行うのと同じように行の展開を行います。  エイリアスや履歴
              の展開を含め、シェルの行う全ての単語展開が行われます。  履歴の展
              開の説明については、後述の 履履歴歴のの展展開開 を参照してください。
       hhiissttoorryy--eexxppaanndd--lliinnee ((MM--^^))
              現在の行で履歴の展開を行います。  履歴の展開の説明については、後
              述の 履履歴歴のの展展開開 を参照してください。
       mmaaggiicc--ssppaaccee
              現在の行で履歴の展開を行い、空白を挿入します。  履歴の展開の説明
              については、後述の 履履歴歴のの展展開開 を参照してください。
       aalliiaass--eexxppaanndd--lliinnee
              現在の行でエイリアスの展開を行います。  エイリアスの展開の説明に
              ついては、前述の エエイイリリアアスス を参照してください。
       hhiissttoorryy--aanndd--aalliiaass--eexxppaanndd--lliinnee
              現在の行で履歴とエイリアスの展開を行います。
       iinnsseerrtt--llaasstt--aarrgguummeenntt ((MM--..,, MM--__))
              yyaannkk--llaasstt--aarrgg と同じものです。
       ooppeerraattee--aanndd--ggeett--nneexxtt ((CC--oo))
              現在の行を実行し、    履歴内の現在の行の次の行を編集用に取得しま
              す。 引き数は全て無視されます。
       eeddiitt--aanndd--eexxeeccuuttee--ccoommmmaanndd ((CC--xxCC--ee))
              エディタを起動して現在のコマンドラインの内容を開き、  その結果を
              シェルのコマンドとして実行します。     bbaasshh     はエディタとして
              $$VVIISSUUAALL, $$EEDDIITTOORR, _e_m_a_c_s の順で起動を試みます。

   テテキキスストト編編集集ののたためめののココママンンドド
       ddeelleettee--cchhaarr ((CC--dd))
              ポイントの文字を削除します。  ポイントが行の先頭であり、その行に
              文字がなく、 さらに打ち込んだ最後の文字が ddeelleettee--cchhaarr に割り当て
              られていなければ、 EEOOFF が返されます。
       bbaacckkwwaarrdd--ddeelleettee--cchhaarr ((RRuubboouutt))
              カーソルの前の文字を削除します。数値の引き数を与えると、  削除し
              たテキストをキルリングに保存します。
       ffoorrwwaarrdd--bbaacckkwwaarrdd--ddeelleettee--cchhaarr
              カーソルが行末になければカーソルがある位置の文字を削除します。
              カーソルが行末にある場合には、カーソルの前の文字を削除します。
       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
              次に打ち込んだ文字をそのまま行に追加します。 これは CC--qq 等の文字
              を挿入するために使います。
       ttaabb--iinnsseerrtt ((CC--vv TTAABB))
              タブ文字を挿入します。
       sseellff--iinnsseerrtt ((aa,, bb,, AA,, 11,, !!,, ......))
              打ち込んだ文字を挿入します。
       ttrraannssppoossee--cchhaarrss ((CC--tt))
              ポイントの前にある文字を動かし、  現在ポイントがある文字の後ろに
              持っていきます。  同時にポイントも前に進みます。ポイントが行の最
              後にある場合は、 ポイントの前の 2 文字が交換されます。  負の引き
              数を指定すると、何も起こりません。
       ttrraannssppoossee--wwoorrddss ((MM--tt))
              ポイントの前にある単語を動かし、  ポイントの後ろにある単語の後ろ
              に持っていきます。  この際には、ポイントも始めに前にあった単語の
              後ろまで移動します。  ポイントが行の最後にある場合は、行の最後の
              2 単語が交換されます。
       uuppccaassee--wwoorrdd ((MM--uu))
              現在の (または後ろの) 単語を大文字にします。  負の引き数を指定す
              ると、前の単語を大文字にしますが、 ポイントは動きません。
       ddoowwnnccaassee--wwoorrdd ((MM--ll))
              現在の  (または後ろの) 単語を小文字にします。 負の引き数を指定す
              ると、前の単語を小文字にしますが、 ポイントは動きません。
       ccaappiittaalliizzee--wwoorrdd ((MM--cc))
              現在の (または後ろの) 単語をキャピタライズします (単語の先頭の文
              字を大文字にします)。 負の引き数を指定すると前の単語をキャピタラ
              イズしますが、 ポイントは動きません。
       oovveerrwwrriittee--mmooddee
              上書きモードをトグルさせます。  正の引き数を指定すると上書きモー
              ドに切り替えます。  負の引き数を指定すると挿入モードに切り替えま
              す。 このコマンドは eemmaaccss モードでのみ有効です。  vvii  モードでは
              違った形で上書きします。 _r_e_a_d_l_i_n_e_(_) を呼び出したときは毎回、挿入
              モードで始まります。 上書きモードでは、sseellff--iinnsseerrtt  が割り当てら
              れた文字は、  ポイントの位置のテキストを右に押し出すのではなく置
              き換えます。 bbaacckkwwaarrdd--ddeelleettee--cchhaarr が割り当てられた文字は、  ポイ
              ントの前の文字をスペースで置き換えます。  このコマンドはデフォル
              トではキーに割り当てられていません。

   キキルルととヤヤンンクク
       kkiillll--lliinnee ((CC--kk))
              ポイントから行末までのテキストをキルします。
       bbaacckkwwaarrdd--kkiillll--lliinnee ((CC--xx RRuubboouutt))
              現在のカーソル位置から行頭までをキルします。
       uunniixx--lliinnee--ddiissccaarrdd ((CC--uu))
              ポイントから行頭までをキルします。  キルされたテキストはキルリン
              グ (kill-ring) に入ります。
       kkiillll--wwhhoollee--lliinnee
              現在の行の文字を全てキルします。ポイントの位置は関係ありません。
       kkiillll--wwoorrdd ((MM--dd))
              ポイントから現在の単語の終わりまでをキルします。  ポイントが単語
              と単語の間であれば、後ろの単語の終わりまでをキルします。  単語の
              境界は ffoorrwwaarrdd--wwoorrdd で使われているものと同じです。
       bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
              ポイントの前にある単語をキルします。  単語の境界は bbaacckkwwaarrdd--wwoorrdd
              で使われているものと同じです。
       sshheellll--kkiillll--wwoorrdd ((MM--dd))
              ポイントから現在の単語の終わりまでをキルします。  ポイントが単語
              と単語の間であれば、後ろの単語の終わりまでをキルします。  単語の
              境界は sshheellll--ffoorrwwaarrdd--wwoorrdd で使われているものと同じです。
       sshheellll--bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
              ポイントの前にある単語をキルします。                単語の境界は
              sshheellll--bbaacckkwwaarrdd--wwoorrdd で使われているものと同じです。
       uunniixx--wwoorrdd--rruubboouutt ((CC--ww))
              ポイントの前にある単語をキルします。  その際には空白を単語の境界
              として用います。 キルされたテキストはキルリングに入ります。
       uunniixx--ffiilleennaammee--rruubboouutt
              ポイントの前にある単語をキルします。  その際には空白とスラッシュ
              を単語の境界として用います。  キルされたテキストはキルリングに入
              ります。
       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
              ポイントの周りの空白とタブを全て削除します。
       kkiillll--rreeggiioonn
              現在のリージョン中のテキストをキルします。
       ccooppyy--rreeggiioonn--aass--kkiillll
              リージョン中のテキストをキルバッファにコピーします。
       ccooppyy--bbaacckkwwaarrdd--wwoorrdd
              ポイントの前の単語をキルバッファにコピーします。単語の境界は
              bbaacckkwwaarrdd--wwoorrdd と同じです。
       ccooppyy--ffoorrwwaarrdd--wwoorrdd
              ポイントの後ろの単語をキルバッファにコピーします。単語の境界は
              ffoorrwwaarrdd--wwoorrdd と同じです。
       yyaannkk ((CC--yy))
              キルリングの先頭のテキストをバッファ中のポイントにヤンクします。
       yyaannkk--ppoopp ((MM--yy))
              キルリングの順番を 1  つ移動し、新たに先頭になったテキストをヤン
              クします。 yyaannkk または yyaannkk--ppoopp の後にしか使えません。

   数数値値のの引引きき数数
       ddiiggiitt--aarrgguummeenntt ((MM--00,, MM--11,, ......,, MM----))
              すでに入力された引き数にこの数字を追加するか、  またはこの数字に
              よって新しい引き数を始めます。 M--  を使うと、負の値を指定できま
              す。
       uunniivveerrssaall--aarrgguummeenntt
              引き数を指定する別の方法です。 このコマンドに続けて 1 つ以上の数
              字が入力された場合 (頭にマイナス記号を付けることもできます)、 こ
              れらの数字で引き数が定義されます。  このコマンドの後に数字が続い
              た場合、 uunniivveerrssaall--aarrgguummeenntt を再び実行すると数値の引き数を終了し
              ますが、  そうでない場合は無視されます。 特殊なケースとして、 こ
              のコマンドの直後に数字でもマイナス記号でもない文字がある場合に
              は、  次のコマンドに対する引き数カウントが 4 倍になります。 引き
              数カウントは最初は 1 なので、 この機能を一度実行すると引き数カウ
              ントは 4 になり、 もう一度実行すると引き数カウントは 16 になりま
              す。 それ以降も同様です。

   補補完完
       ccoommpplleettee ((TTAABB))
              ポイントの前のテキストについて補完を試みます。 bbaasshh が補完を行う
              際には、 変数 (テキストが $$ で始まる場合)、 ユーザ名 (テキストが
              ~~ で始まる場合)、 ホスト名 (テキストが @@ で始まる場合)、  コマン
              ド  (エイリアスや関数も含みます) の順序でマッチを行います。 いず
              れにもマッチしない場合には、 ファイル名補完を試みます。
       ppoossssiibbllee--ccoommpplleettiioonnss ((MM--??))
              ポイントの前のテキストの補完候補を列挙します。
       iinnsseerrtt--ccoommpplleettiioonnss ((MM--**))
              ポイントの前のテキストを補完して得られるものを全て挿入します。
              挿入されるものは、ppoossssiibbllee--ccoommpplleettiioonnss  で列挙されるものと同じで
              す。
       mmeennuu--ccoommpplleettee
              ccoommpplleettee コマンドに似ていますが、 補完される単語を補完候補リスト
              のうちの  1  つと置換します。 mmeennuu--ccoommpplleettee を繰り返して実行する
              と、 補完候補のリストが次々と順番に挿入されます。 補完リストの最
              後まで来るとベルが (bbeellll--ssttyyllee の設定に基づいて)  鳴らされ、元の
              テキストに戻ります。 引き数 _n  を指定すると、リスト中の位置が  _n
              個進みます。    負の引き数を指定すると、リスト中を逆向きに戻れま
              す。 このコマンドは TTAABB に割り当てることを意図して用意されたもの
              ですが、 デフォルトでは割り当ては行われていません。
       mmeennuu--ccoommpplleettee--bbaacckkwwaarrdd
              mmeennuu--ccoommpplleettee  コマンドに似ていますが、 mmeennuu--ccoommpplleettee に負の引き
              数を与えたときのように、 補完候補のリストを逆向きに進みます。 こ
              のコマンドはデフォルトではキーに割り当てられていません。
       ddeelleettee--cchhaarr--oorr--lliisstt
              カーソルが行頭や行末に無ければ、カーソルの下の文字を削除します
              (ddeelleettee--cchhaarr     と同様です)。      カーソルが行末にある場合は、
              ppoossssiibbllee--ccoommpplleettiioonnss と同じ動作をします。 このコマンドはデフォル
              トではキーに割り当てられていません。
       ccoommpplleettee--ffiilleennaammee ((MM--//))
              ポイントの前のテキストについてファイル名の補完を試みます。
       ppoossssiibbllee--ffiilleennaammee--ccoommpplleettiioonnss ((CC--xx //))
              ポイントの前のテキストについて補完候補を列挙します。  テキストは
              ファイル名として扱われます。
       ccoommpplleettee--uusseerrnnaammee ((MM--~~))
              ポイントの前のテキストについて補完を試みます。  テキストはユーザ
              名として扱われます。
       ppoossssiibbllee--uusseerrnnaammee--ccoommpplleettiioonnss ((CC--xx ~~))
              ポイントの前のテキストについて補完候補を列挙します。  テキストは
              ユーザ名として扱われます。
       ccoommpplleettee--vvaarriiaabbllee ((MM--$$))
              ポイントの前のテキストについて補完を試みます。  テキストはシェル
              変数として扱われます。
       ppoossssiibbllee--vvaarriiaabbllee--ccoommpplleettiioonnss ((CC--xx $$))
              ポイントの前のテキストについて補完候補を列挙します。  テキストは
              シェル変数として扱われます。
       ccoommpplleettee--hhoossttnnaammee ((MM--@@))
              ポイントの前のテキストについて補完を試みます。  テキストはホスト
              名として扱います。
       ppoossssiibbllee--hhoossttnnaammee--ccoommpplleettiioonnss ((CC--xx @@))
              ポイントの前のテキストについて補完候補を列挙します。  テキストは
              ホスト名として扱います。
       ccoommpplleettee--ccoommmmaanndd ((MM--!!))
              ポイントの前のテキストについて補完を試みます。  テキストはコマン
              ド名として扱います。    コマンド補完の際にマッチングを試みる順序
              は、  エイリアス、予約語、シェル関数、シェルの組み込みコマンド、
              実行ファイルです。
       ppoossssiibbllee--ccoommmmaanndd--ccoommpplleettiioonnss ((CC--xx !!))
              ポイントの前のテキストについて補完候補を列挙します。  テキストは
              コマンド名として扱います。
       ddyynnaammiicc--ccoommpplleettee--hhiissttoorryy ((MM--TTAABB))
              ポイントの前のテキストについて補完を試みます。  履歴リストの各行
              に対してテキストの比較が行われ、  マッチしたものが補完の候補とな
              ります。
       ddaabbbbrreevv--eexxppaanndd
              ポイントの前のテキストについてメニュー補完を試みます。  履歴リス
              トの各行に対してテキストの比較が行われ、  マッチしたものが補完の
              候補となります。
       ccoommpplleettee--iinnttoo--bbrraacceess ((MM--{{))
              ファイル名補完を実行し、補完候補のリストを挿入します。  シェルか
              ら利用可能なリストとなるように、  返される候補はブレースで括られ
              ます (前述の ブブレレーースス展展開開 を参照)。

   キキーーボボーードドママククロロ
       ssttaarrtt--kkbbdd--mmaaccrroo ((CC--xx (())
              現在のキーボードマクロに対して入力される文字列の保存を開始しま
              す。
       eenndd--kkbbdd--mmaaccrroo ((CC--xx ))))
              現在のキーボードマクロに対して入力された文字列の保存を終了し、
              その定義を格納します。
       ccaallll--llaasstt--kkbbdd--mmaaccrroo ((CC--xx ee))
              最後に定義されたキーボードマクロを再実行します。  マクロ内の各文
              字があたかもキーボードから入力されたかのように出力されます。

   そそのの他他
       rree--rreeaadd--iinniitt--ffiillee ((CC--xx CC--rr))
              _i_n_p_u_t_r_c ファイルの内容を読み込み、  このファイル中の割り当てや変
              数設定を取り込みます。
       aabboorrtt ((CC--gg))
              現在の編集行を捨て、端末のベルを鳴らします (動作は bbeellll--ssttyyllee の
              設定に従います)。
       ddoo--uuppppeerrccaassee--vveerrssiioonn ((MM--aa,, MM--bb,, MM--_x,, ......))
              メタ文字と共に入力された文字 _x が小文字であれば、 _x に対応する大
              文字に割り当てられているコマンドを実行します。
       pprreeffiixx--mmeettaa ((EESSCC))
              次に入力される文字を、    メタ文字と共に入力されたことにします。
              EESSCC ff は MMeettaa--ff と同じ意味です。
       uunnddoo ((CC--__,, CC--xx CC--uu))
              インクリメンタルアンドゥを行います。  履歴は行ごとに別々に記憶さ
              れています。
       rreevveerrtt--lliinnee ((MM--rr))
              この行に対して行った変更を全て取り消します。  このコマンドは、行
              が初期状態に戻るまで uunnddoo コマンドを実行するようなものです。
       ttiillddee--eexxppaanndd ((MM--&&))
              現在の単語についてチルダ展開を実行します。
       sseett--mmaarrkk ((CC--@@,, MM--<<ssppaaccee>>))
              ポイントにマークを設定します。    数字の引き数が与えられた場合に
              は、 マークはその位置に設定されます。
       eexxcchhaannggee--ppooiinntt--aanndd--mmaarrkk ((CC--xx CC--xx))
              ポイントをマークと入れ換えます。  保存されている位置が現在のカー
              ソル位置になり、 古いカーソル位置がマークとして保存されます。
       cchhaarraacctteerr--sseeaarrcchh ((CC--]]))
              文字を 1 つ読み込み、 その文字が次に現われる場所にポイントを移動
              させます。  負のカウントを与えると、その文字が前に現われた場所を
              探します。
       cchhaarraacctteerr--sseeaarrcchh--bbaacckkwwaarrdd ((MM--CC--]]))
              文字を 1 つ読み込み、 その文字が前に現われた場所にポイントを移動
              させます。  負のカウントを与えると、その文字が次に現われる場所を
              探します。
       sskkiipp--ccssii--sseeqquueennccee
              Home や End などのキーに定義されるような複数キーからなるシーケン
              スを 使い切るだけの文字を読み込みます。 これらのシーケンスは、通
              常 ESC-[ で表されるコントロールシーケンス (CSI)   で始まります。
              このシーケンスが  "\[" に割り当てられているとすると、 キーが明示
              的に readline のコマンドに割り当てられている場合を除き、  それら
              のシーケンスを生み出すキーは、  はぐれた文字を編集バッファに挿入
              されず、何もしません。  このコマンドはデフォルトではキーに割り当
              てられていませんが、 多くの場合 ESC-[ に割り当てられます。
       iinnsseerrtt--ccoommmmeenntt ((MM--##))
              数字の引き数を指定しない場合、readline の ccoommmmeenntt--bbeeggiinn 変数の値
              が現在の行の先頭に挿入されます。  数字の引き数を指定すると、トグ
              ル状に動作します。 つまり、行の先頭の文字が ccoommmmeenntt--bbeeggiinn の値に
              マッチしない場合には、    その値が挿入されます。マッチする場合に
              は、ccoommmmeenntt--bbeeggiinn  の文字が行の先頭から削除されます。 いずれの場
              合も、改行が打ち込まれたのと同じように行の入力が完了します。
              ccoommmmeenntt--bbeeggiinn  のデフォルト値によって、 このコマンドは現在の行を
              シェルのコメントとします。  数字の引き数を指定したことでコメント
              の文字が削除されると、 行はシェルにより実行されます。
       gglloobb--ccoommpplleettee--wwoorrdd ((MM--gg))
              ポイントの前の単語がパス名展開のパターンとして扱われます。  末尾
              に暗黙のアスタリスクが付いているものとみなされます。  このパター
              ンを使って補完候補のファイル名のリストが生成されます。
       gglloobb--eexxppaanndd--wwoorrdd ((CC--xx **))
              ポイントの前の単語がパス名展開のパターンとして扱われ、  この単語
              と置き換えられる形でマッチするファイル名のリストが挿入されます。
              数字の引き数を与えると、パス名展開の前に末尾にアスタリスクを追加
              します。
       gglloobb--lliisstt--eexxppaannssiioonnss ((CC--xx gg))
              gglloobb--eexxppaanndd--wwoorrdd    で生成されるのと同じ展開結果のリストが表示さ
              れ、 行が再描画されます。 数字の引き数を与えると、パス名展開の前
              に末尾にアスタリスクを追加します。
       dduummpp--ffuunnccttiioonnss
              全ての関数とそのキー割り当てを、 readline の出力ストリームに出力
              します。  数値の引き数を与えると、 出力は _i_n_p_u_t_r_c に書き込める形
              に整形されます。
       dduummpp--vvaarriiaabblleess
              全ての設定可能な readline の変数とその値を、 readline の出力スト
              リームに出力します。  数値の引き数を与えると、 出力は _i_n_p_u_t_r_c に
              書き込める形に整形されます。
       dduummpp--mmaaccrrooss
              マクロに割り当てられた readline のキーシーケンスと  マクロが出力
              する文字列を全て出力します。   数値の引き数を与えると、   出力は
              _i_n_p_u_t_r_c に書き込める形に整形されます。
       ddiissppllaayy--sshheellll--vveerrssiioonn ((CC--xx CC--vv))
              現在実行している bbaasshh のバージョン情報を表示します。

   ププロロググララムム補補完完
       ccoommpplleettee 組み込みコマンドで 補完仕様 (_c_o_m_p_s_p_e_c)  が定義されているコマン
       ドに対して  引き数の単語補完が試みられると、 プログラム補完の機能が呼び
       出されます (組み込みコマンド ccoommpplleettee については、後述する シシェェルルのの組組みみ
       込込みみココママンンドド を参照)。

       まず、コマンド名が特定されます。 コマンド名の単語が空文字列であれば (空
       の行の先頭で補完しようとしたとき)、 ccoommpplleettee の --EE オプションで定義され
       た補完仕様が使われます。   そのコマンドに対して補完仕様が定義されていれ
       ば、 その補完仕様がその単語の補完候補のリスト生成に使われます。  コマン
       ドの単語がフルパス名であれば、   最初にフルパス名の補完仕様が検索されま
       す。 フルパス名に対する補完仕様が見つからなかった場合は、  最後のスラッ
       シュ以降の部分に対して該当する補完仕様を見つけようとします。 補完仕様が
       見つからなかった場合は、 ccoommpplleettee の --DD  オプションで定義された補完仕様
       が使われます。

       補完仕様が見つかると、その補完仕様を使って マッチする単語のリストが生成
       されます。 補完仕様が見つからなかった場合は、 前述の 補補完完  の節で説明し
       たような bbaasshh のデフォルトの補完が行われます。

       まず、補完仕様で指定された動作が用いられます。 補完される単語の前置部分
       にマッチするものだけが返されます。   ファイル名やディレクトリ名の補完に
       --ff  や  --dd  オプションが使用された場合は、シェル変数 FFIIGGNNOORREE がマッチの
       フィルタとして使用されます。

       続いて --GG オプションによって指定された ファイル名展開パターンの補完が生
       成されます。  パターンによって生成された単語は、 補完される単語とマッチ
       する必要はありません。 GGLLOOBBIIGGNNOORREE  シェル変数はマッチのフィルタとしては
       使われませんが、 FFIIGGNNOORREE 変数は使用されます。

       次に、  --WW  オプションで指定された引き数の文字列が考慮されます。 文字列
       は、最初に IIFFSS 特殊変数の文字を区切り文字として分割されます。  シェルの
       クォート処理は考慮されます。 それぞれの単語は、前述の 展展開開 で示したよう
       に、ブレース展開、チルダ展開、パラメータと変数の展開、 コマンド置換、算
       術式展開、パス名展開が行われます。 結果は、前述の単単語語のの分分割割で示した規則
       によって分割されます。 展開の結果は補完される単語の前置部分とマッチが行
       われ、 マッチした単語が補完候補となります。

       これらのマッチが生成された後、 シェル関数や --FF や --CC オプションで指定さ
       れたコマンドが呼び出されます。     コマンドや関数が呼び出されるときは、
       CCOOMMPP__LLIINNEE, CCOOMMPP__PPOOIINNTT, CCOOMMPP__KKEEYY, CCOOMMPP__TTYYPPEE 変数に前述のシシェェルル変変数数で示す
       ように値が設定されます。 シェル関数が呼び出される場合は、 CCOOMMPP__WWOORRDDSS と
       CCOOMMPP__CCWWOORRDD 変数も設定されます。 関数やコマンドが呼び出されるときは、 最
       初の引き数は引き数が補完されるコマンドの名前、 二番目の引き数は補完され
       る単語、  三番目の引き数は現在のコマンドラインで補完中の単語の 前に置か
       れる単語となります。 補完される単語に対して生成された補完の候補はフィル
       タリングされません。 関数やコマンドは生成されたマッチとは無関係に補完さ
       れます。

       --FF で指定された関数がまず呼び出されます。 関数は、後述する ccoommppggeenn 組み
       込みコマンドを含めた、   全てのシェルの機能を使ってマッチを生成します。
       補完候補は必ず CCOOMMPPRREEPPLLYY 配列変数に格納されます。

       続いて --CC オプションで指定されたコマンドが呼び出され、 環境変数をコマン
       ド置換します。  このコマンドは、補完候補を 1 行にひとつずつ標準出力に出
       力します。 必要があれば、バックスラッシュが改行をエスケープするために使
       用されます。

       全ての補完候補が生成された後で、  --XX オプションで指定されたフィルタが補
       完候補に作用します。 フィルタは、パス名展開で使用されたようなパターンで
       す。パターン中の && は補完される単語に置換されます。 文字通りの && はバッ
       クスラッシュでエスケープします。 バックスラッシュはマッチを試みる前に削
       除されます。  パターンにマッチした補完は候補から削除されます。 先行する
       !! はパターンを否定します。 この場合、パターンにマッチしなかった補完が削
       除されます。

       最後に、--PP  と --SS オプションで指定された 前置部分と後置部分が補完候補の
       それぞれに加えられます。 そして結果が readline 補完コードに補完候補のリ
       ストとして返されます。

       直前に行われた動作が何にもマッチせず、   補完仕様が定義されたときに  --oo
       ddiirrnnaammeess オプションが ccoommpplleettee に与えられていれば、  ディレクトリ名への
       補完が試みられます。

       補完仕様が定義されたときに --oo pplluussddiirrss オプションが ccoommpplleettee に与えられ
       ていれば、 ディレクトリ名への補完が試みられ、マッチした候補が全て  ほか
       の動作の結果に付け加えられます。

       デフォルトでは、補完仕様が見つかった場合、 それが生成したものがなんであ
       れ、 全ての補完候補のリストとして、補完コードに返されます。  デフォルト
       の  bbaasshh 補完は試みられず、 readline のデフォルトのファイル名補完は無効
       になります。  補完仕様が定義されたときに  --oo  bbaasshhddeeffaauulltt  オプションが
       ccoommpplleettee  に与えられていれば、 補完仕様が何にもマッチしなければ bbaasshh の
       デフォルトの補完が試みられます。 補完仕様が定義されたときに --oo  ddeeffaauulltt
       オプションが  ccoommpplleettee  に与えられていれば、 補完仕様が (試みられていれ
       ば、デフォルトの bbaasshh の補完も)  何にもマッチしなければ  readline  のデ
       フォルトの補完が行われます。

       補完仕様でディレクトリ名の補完が必要とされる場合、 プログラム補完の関数
       は readline に、 ディレクトリへのシンボリックリンクに補完された名前の最
       後に      スラッシュを追加させます。      これは      readline     の変
       数mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess   の設定に関わらず、    readline    の変数
       mmaarrkk--ddiirreeccttoorriieess の値に左右されます。

       動的に補完を変えるための方法があります。  これは ccoommpplleettee --DD で指定され
       たデフォルトの補完と 組み合わせたときに非常に便利です。  補完の処理のた
       めに実行されたシェル関数は、終了ステータスとして 124 を返すことで、補完
       を再度試みることを指示できます。 シェル関数が 124  を返し、補完が試みら
       れるコマンド (関数が実行されるときの第 1 引き数) に対して定義された補完
       仕様が 変更されていれば、プログラム補完はコマンドの新しい補完仕様を  探
       すために最初からやり直されます。 これにより一連の補完が、一度に読み込ま
       れるのではなく、 補完が試みられるときに動的に組み立てられます。

       例えば、補完仕様のライブラリがあり、それぞれがコマンドの名前に 合わせた
       ファイルに保存されていると仮定すると、 以下のデフォルトの補完関数は補完
       を動的に読み込みます。

       _completion_loader()
       {
            . "/etc/bash_completion.d/$1.sh" >/dev/null 2>&1 && return 124
       }
       complete -D -F _completion_loader

履履歴歴 ((HHIISSTTOORRYY))
       --oo hhiissttoorryy オプションを組み込みコマンドの sseett で有効にすると、 _コ_マ_ン_ド
       _履_歴 _(_c_o_m_m_a_n_d _h_i_s_t_o_r_y_) (以前に入力したコマンドのリスト)  にアクセスでき
       るようになります。 変数 HISTSIZE の値が、履歴リストに保存するコマンドの
       数になります。 過去に入力したコマンドのうち、最新 HHIISSTTSSIIZZEE 個分 (デフォ
       ルトは 500  個)  のテキストが保存されます。  シェルは各コマンドを、パラ
       メータ展開や変数展開  (前述の 展展開開 を参照) を行う前の形で履歴リストに格
       納します。 ただし、履歴展開は実行してから格納します。  履歴展開はシェル
       変数 HHIISSTTIIGGNNOORREE と HHIISSTTCCOONNTTRROOLL の値に従って実行されます。

       起動時に、履歴は変数 HHIISSTTFFIILLEE (デフォルトは _~_/_._b_a_s_h___h_i_s_t_o_r_y) が示すファ
       イルの内容で初期化されます。     HHIISSTTFFIILLEE      で指定されたファイルは、
       HHIISSTTFFIILLEESSIIZZEE で指定された行数を越えないように、必要に応じて切り詰められ
       ます。 履歴ファイルを読み込むときに、履歴のコメント文字で始まり直後に数
       字が続く行は、  直前の履歴行のタイムスタンプとして解釈されます。 こうし
       たタイムスタンプを表示するかどうかは、変数 HHIISSTTTTIIMMEEFFOORRMMAATT  の値により決
       まります。  対話的なシェルが終了する際には、最近の $$HHIISSTTSSIIZZEE 個の行が履
       歴リストから $$HHIISSTTFFIILLEE にコピーされます。 シェルオプション hhiissttaappppeenndd (
       シシェェルルのの組組みみ込込みみココママンンドド  の項の sshhoopptt の説明を参照) が有効になっている
       と、 これらの行が履歴ファイルの末尾に追加されます。  このオプションが無
       効ならば、履歴ファイルは上書きされます。   HHIISSTTFFIILLEE  が設定されていない
       か、履歴ファイルが書き込めない状態だと、  履歴は保存されません。   変数
       HHIISSTTTTIIMMEEFFOORRMMAATT が設定されている場合、シェルのセッションを越えて保持され
       るよう、 タイムスタンプが履歴のコメント文字を付けて履歴ファイルに書き込
       まれます。 履歴のコメント文字は、タイムスタンプをほかの履歴行と区別する
       ために使われます。       履歴の保存を行った後には、履歴ファイルは行数が
       HHIISSTTFFIILLEESSIIZZEE 行を越えないように切り詰められます。 HHIISSTTFFIILLEESSIIZZEE が設定さ
       れていなければ、切り詰めは行われません。

       組み込みコマンド ffcc (後述の シシェェルルのの組組みみ込込みみココママンンドド  を参照)  を用いる
       と、履歴リストの一部を表示・編集して再実行できます。 組み込みコマンドの
       hhiissttoorryy を用いると、履歴リストを表示・編集したり、 履歴ファイルを操作し
       たりできます。  コマンドライン編集を使っている場合には、 各編集モードで
       いろいろな検索コマンドが利用でき、 履歴リストへアクセスできます。

       このシェルでは、どのコマンドが履歴リストに保存されるかを制御できます。
       HHIISSTTCCOONNTTRROOLL 変数と HHIISSTTIIGGNNOORREE 変数を設定すると、 シェルは入力されたコマ
       ンドの一部しか保存しなくなります。 シェルオプションの ccmmddhhiisstt  を有効に
       すると、シェルは複数行に別れているコマンドの各行を 同じ履歴エントリに保
       存しようとします。 この際には、文法的な正しさを保つためにセミコロンが必
       要に応じて追加されます。  シェルオプションの lliitthhiisstt を有効にすると、こ
       のシェルは行の途中に セミコロンではなく改行文字を置く形でコマンドを保存
       します。  シェルオプションの設定と設定取り消しについては、後述の シシェェルル
       のの組組みみ込込みみココママンンドド における説明を参照してください。

履履歴歴のの展展開開
       このシェルは、 ccsshh の履歴展開と同じような履歴機能をサポートしています。
       このセクションでは、履歴展開で使用できる記法・機能を説明します。 この機
       能は対話的シェルならばデフォルトで有効になっていますが、 組み込みコマン
       ド sseett の ++HH オプション (後述の シシェェルルのの組組みみ込込みみココママンンドド を参照) で無効
       にできます。 非対話的シェルの場合は、デフォルトでは履歴展開は行われませ
       ん。

       履歴展開は、履歴リスト中の単語を入力ストリームに入れます。 この機能を利
       用すると、コマンドを繰り返したり、 前のコマンドで指定したオプションを現
       在の入力行に挿入したり、  前のコマンドの誤りを手早く直したり、 といった
       ことが簡単にできるようになります。

       履歴展開が実行されるのは、入力行全体を読み込んだ直後であり、 シェルが行
       を単語に分割するよりも前です。 履歴展開の動作は 2 段階で行われます。 ま
       ず最初に、置換に使う行を履歴リストから選びます。 次に、その行のどの部分
       を現在の行に書き込むかを選択します。 履歴リストから選ばれた行は_イ_ベ_ン_ト
       _(_e_v_e_n_t_) と呼ばれ、 この行のうち動作の対象となる部分を_単_語_列 _(_w_o_r_d_s_)と呼
       びます。  様々な_修_飾_子 _(_m_o_d_i_f_i_e_r_) が利用でき、 選択された単語列の操作が
       可能になっています。 行の単語への分割は入力を読み込むときと同じように行
       われるので、  _メ_タ_文_字で区切られた複数の単語をクォートで括ったものは  1
       つの単語とみなされます。 履歴展開が行われるのは、履歴展開文字が現われた
       ときです。 履歴展開文字はデフォルトでは !! です。 履歴展開文字をクォート
       できるのは、 バックスラッシュ (\\) とシングルクォートだけです。

       履歴展開文字の直後にあって、クォートされていなくても、 履歴展開されない
       文字があります。  空白文字、タブ文字、改行文字、復帰文字、== です。 シェ
       ルオプションの eexxttgglloobb  が有効になっている場合には、  ((  も展開されませ
       ん。

       組み込みコマンドの sshhoopptt を用いて、何種類かあるシェルオプションを設定す
       ると、 履歴展開の動作を調整できます。 シェルオプションの hhiissttvveerriiffyy  が
       有効で  (組み込みコマンド sshhoopptt の説明を参照)、かつ rreeaaddlliinnee が使われて
       いる場合には、 履歴置換を行った結果はすぐにはシェルのパーザに渡されませ
       ん。 展開された行は rreeaaddlliinnee の編集バッファに再び読み込まれ、さらに編集
       が行える状態になります。 rreeaaddlliinnee  を使用しており、かつシェルオプション
       の hhiissttrreeeeddiitt が有効である場合、履歴置換が失敗してもその結果は rreeaaddlliinnee
       の編集バッファに再び読み込まれ、訂正できる状態となります。 組み込みコマ
       ンド  hhiissttoorryy の --pp オプションを使うと、実際に履歴展開を行う前に、 どの
       ように展開されるのかを見ることができます。 組み込みコマンド hhiissttoorryy  の
       --ss  オプションを使うと、実際にコマンドの実行をせずに、 コマンドを履歴リ
       ストの末尾に追加でき、 それ以降の呼び出しで利用できるようになります。

       このシェルでは、履歴展開機構で使ういろいろな文字を制御できます  (前述の
       シシェェルル変変数数  の項目における hhiissttcchhaarrss の説明を参照)。 シェルは、履歴ファ
       イルに書き込むときに、履歴のコメント文字を使って、 履歴のタイムスタンプ
       であることが分かるようにします。

   イイベベンントト指指示示子子 ((EEvveenntt DDeessiiggnnaattoorr))
       イベント指示子は、 履歴リスト中のコマンドラインエントリを参照するもので
       す。 絶対位置の参照でない限り、イベントは履歴リスト内の  現在の位置から
       の相対的な位置を示します。

       !!      履歴置換を開始します。ただし、  ブブラランンクク文文字字、 改行文字、 = 、 (
              (シェルオプション eexxttgglloobb が組み込みコマンド sshhoopptt  によって有効
              になっている場合) のいずれかが後に続く場合は除きます。
       !!_n     _n 個目のコマンドラインを参照します。
       !!--_n    現在から _n 個前のコマンドを参照します。
       !!!!     直前のコマンドを参照します。`!-1' と同義です。
       !!_s_t_r_i_n_g
              _s_t_r_i_n_g で始まるコマンドのうち、履歴リスト中の現在位置以前で、 一
              番近いところで実行したものを参照します。
       !!??_s_t_r_i_n_g[[??]]
              _s_t_r_i_n_g を含むコマンドのうち、履歴リスト中の現在位置以前で、 一番
              近いところで実行したものを参照します。 _s_t_r_i_n_g の直後が改行文字な
              らば、最後の ?? は省略してもかまいません。
       ^^_s_t_r_i_n_g_1^^_s_t_r_i_n_g_2^^
              簡易置換。 _s_t_r_i_n_g_1 を _s_t_r_i_n_g_2 に置換して直前のコマンドを繰り返し
              ます。 “!!:s/_s_t_r_i_n_g_1/_s_t_r_i_n_g_2/” と同義です (後述の修修飾飾子子を参照)。
       !!##     これまでに打ち込んだコマンドライン全体。

   単単語語指指示示子子 ((WWoorrdd DDeessiiggnnaattoorrss))
       単語指示子  (word designator) は、 イベントから所望の欲しい単語を選ぶと
       きに用いられます。 イベント指定と単語指示子のセパレータには ::  を用いま
       す。  単語指示子が  ^^,  $$, **, --, %% のいずれかで始まる場合には、このセパ
       レータは省略できます。 単語には行の先頭から順に番号が振られ、  先頭の単
       語が  0  になります。 単語は現在の行に、空白 1 つで区切られて挿入されま
       す。

       00 ((ゼゼロロ))
              0 番目の単語。シェルにとっては、コマンドを表す単語になります。
       _n      _n 番目の単語。
       ^^      最初の引き数。つまり 1 番目の単語です。
       $$      最後の引き数。
       %%      `?_s_t_r_i_n_g?' 検索にマッチする、一番現在に近い単語。
       _x--_y    単語の範囲。`0-_y' の省略形として `-_y' が使えます。
       **      0 番目を除く全ての単語。これは `_1_-_$' の別表現です。 イベント中に
              単語が  1 つしかない場合に ** を使ってもエラーにはなりません。 こ
              の場合には空文字列が返されます。
       xx**     _x_-_$ の省略形です。
       xx--     xx** と同様に _x_-_$ の省略形ですが、 ただし最後の単語は含みません。

       イベント指定なしに単語指示子が与えられた場合、 直前のコマンドがイベント
       として使われます。

   修修飾飾子子 ((MMooddiiffiieerrss))
       単語指示子 (省略可能) の後には、 1 個以上の以下に示す修飾子を並べて置く
       ことができます。 それぞれの修飾子の前には `:' を付けます。

       hh      パス名から末尾にある部分 (ファイル名) を取り除き、 前の方  (ディ
              レクトリ部) だけを残します。
       tt      パス名から前の方  (ディレクトリ部)  を取り除き、  末尾にある部分
              (ファイル名) だけを残します。
       rr      末尾にある    _._x_x_x    形式のサフィックスを取り除き、    ベース名
              (basename) だけを残します。
       ee      末尾のサフィックスだけを残して、全ての部分を取り除きます。
       pp      新しいコマンドを表示しますが、実行はしません。
       qq      置換が行われた単語をクォートし、それ以上の置換が行われないように
              します。
       xx      qq と同じように置換後の単語をクォートしますが、 空空白白文文字字 と改行文
              字のところで単語に分割します。
       ss//_o_l_d//_n_e_w//
              イベント行で最初に現われた _o_l_d を _n_e_w に置き換えます。/ の代わり
              に任意の区切り文字を使うこともできます。  最後の区切り文字がイベ
              ント行の最後の文字ならば、 これは省略できます。 バックスラッシュ
              1 つでクォートすれば、 _o_l_d と  _n_e_w  の中で区切り文字も使えます。
              _n_e_w  に & が含まれている場合には、 & は _o_l_d に置き換えられます。
              バックスラッシュ 1 つを前に置けば & をクォートできます。 _o_l_d  が
              空文字列ならば、最後に置換された _o_l_d が設定されます。 以前に履歴
              置換が全く行われていない場合には、現在に一番近い !!??_s_t_r_i_n_g[[??]]  の
              検索で使われた _s_t_r_i_n_g が設定されます。
       &&      直前の置換を繰り返します。
       gg      変更をイベント行全体に適用します。          これは          `::ss'
              (例:`::ggss//_o_l_d//_n_e_w//') や `::&&' と組み合わせて使われます。 `::ss' と一
              緒に使った場合には、 / の代わりに任意の区切り文字を使えます。 ま
              た、最後の区切り文字がイベント行の最後の文字ならば、  これは省略
              できます。 gg の別名として aa を使うこともできます。
       GG      この修飾子に続く `ss' 修飾子をイベント行の各単語に 1 回ずつ適用し
              ます。

シシェェルルのの組組みみ込込みみココママンンドド
       特に断らない限り、このセクションで説明されている組み込みコマンドのうち
       --  で始まるオプションを受け付けるものは、オプションの終わりを表す ---- も
       受け付けます。 組み込みコマンド ::, ttrruuee, ffaallssee, tteesstt はオプションを持た
       ず、----   を特別扱いしません。  組み込みコマンド  eexxiitt,  llooggoouutt,  bbrreeaakk,
       ccoonnttiinnuuee, lleett, sshhiifftt は、-- で始まる引き数として受け取るのに、 ---- を必要
       としません。  そのほかの組み込みコマンドは、 受け取ると明記されているオ
       プション以外を引き数として受け取り、 -- で始まる引き数を不正なオプション
       をとて解釈します。 この解釈を防ぐには ---- が必要です。
       :: [_a_r_g_u_m_e_n_t_s]
              何もしません。このコマンドは  _a_r_g_u_m_e_n_t_s を展開し、指定されたリダ
              イレクトを実行する以外には何も行いません。 終了コード 0 を返しま
              す。

        ..  _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
       ssoouurrccee _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
              _f_i_l_e_n_a_m_e  からコマンドを読み込み、現在のシェル環境の下で実行しま
              す。 _f_i_l_e_n_a_m_e 内の最後に実行したコマンドの終了ステータスを返しま
              す。  _f_i_l_e_n_a_m_e  にスラッシュが含まれていない場合、  _f_i_l_e_n_a_m_e  は
              PPAATTHH に含まれるディレクトリから探されます。 PPAATTHH  内で検索される
              ファイルは、実行可能である必要はありません。  bbaasshh が _p_o_s_i_x _モ_ー
              _ド  以外で動作しているときは、  PPAATTHH  中でファイルを見つけられな
              かった場合に、 カレントディレクトリが検索されます。 組み込みコマ
              ンド sshhoopptt  に対する  ssoouurrcceeppaatthh  オプションが無効にされている場
              合、 PPAATTHH の検索は行われません。 何らかの _a_r_g_u_m_e_n_t_s が指定された
              場合、これらの引き数は _f_i_l_e_n_a_m_e を実行したときの位置パラメータと
              なります。  指定されなかった場合は、位置パラメータは変更されませ
              ん。    返却ステータスはスクリプト内で最後に実行したコマンドのス
              テータスです  (コマンドが全く実行されなければ 0 です)。 _f_i_l_e_n_a_m_e
              が見つからない場合や読み込めない場合には偽となります。

       aalliiaass [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              aalliiaass コマンドを引き数を付けずに (あるいは  --pp  オプションを付け
              て)  実行すると、エイリアスのリストが 「aalliiaass _n_a_m_e=_v_a_l_u_e」の形で
              標準出力に出力されます。 引き数を与えた場合には、_v_a_l_u_e  を与えら
              れた  _n_a_m_e それぞれに対するエイリアスが定義されます。 _v_a_l_u_e の末
              尾に空白があると、エイリアスが展開されたときに、  空白の次の単語
              についてエイリアス置換があるかどうか調べられます。  引き数リスト
              中に _v_a_l_u_e が与えられていない _n_a_m_e があった場合は、 それぞれに対
              して名前とエイリアスの値が出力されます。  エイリアスが定義されて
              いない _n_a_m_e が指定された場合以外は、 aalliiaass は真を返します。

       bbgg [_j_o_b_s_p_e_c ...]
              サスペンドされているジョブ _j_o_b_s_p_e_c を バックグラウンドで実行再開
              します。このジョブは、初めから  && を付けて起動されていたかのよう
              に動作を続けます。 _j_o_b_s_p_e_c がない場合には、 シェルが記録している
              _カ_レ_ン_ト_ジ_ョ_ブ  _(_c_u_r_r_e_n_t _j_o_b_) が使われます。 bbgg _j_o_b_s_p_e_c は通常 0
              を返しますが、ジョブ制御が無効であるときに実行した場合や、  ジョ
              ブ制御が有効であっても  _j_o_b_s_p_e_c が有効なジョブを指定していない場
              合や _j_o_b_s_p_e_c  がジョブ制御なしで開始したジョブを指定している場合
              は異なる値を返します。

       bbiinndd [--mm _k_e_y_m_a_p] [--llppssvvPPSSVV]
       bbiinndd [--mm _k_e_y_m_a_p] [--qq _f_u_n_c_t_i_o_n] [--uu _f_u_n_c_t_i_o_n] [--rr _k_e_y_s_e_q]
       bbiinndd [--mm _k_e_y_m_a_p] --ff _f_i_l_e_n_a_m_e
       bbiinndd [--mm _k_e_y_m_a_p] --xx _k_e_y_s_e_q:_s_h_e_l_l_-_c_o_m_m_a_n_d
       bbiinndd [--mm _k_e_y_m_a_p] _k_e_y_s_e_q:_f_u_n_c_t_i_o_n_-_n_a_m_e
       bbiinndd _r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d
              rreeaaddlliinnee  の現在のキー割り当てと関数割り当てを表示したり、  キー
              シーケンスを rreeaaddlliinnee の関数やマクロに割り当てたり、 rreeaaddlliinnee の
              変数を設定したりします。        オプション以外の引き数はすべて、
              _._i_n_p_u_t_r_c _, に書くのと同じ形式のコマンドですが、 それぞれの割り当
              てやコマンドは独立した引き数として渡さなければなりません。  例え
              ば '"\C-x\C-r": re-read-init-file' のように指定します。 オプショ
              ンを指定した場合には、以下のような意味を持ちます:
              --mm _k_e_y_m_a_p
                     キーマップ  _k_e_y_m_a_p を、以降の割り当てによって変更します。
                     指定できる   _k_e_y_m_a_p   名は、    _e_m_a_c_s_,    _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,
                     _e_m_a_c_s_-_m_e_t_a_,    _e_m_a_c_s_-_c_t_l_x_,   _v_i_,   _v_i_-_m_o_v_e_,   _v_i_-_c_o_m_m_a_n_d,
                     _v_i_-_i_n_s_e_r_t です。 _v_i は _v_i_-_c_o_m_m_a_n_d と同じです。 また _e_m_a_c_s
                     は _e_m_a_c_s_-_s_t_a_n_d_a_r_d と同じです。
              --ll     rreeaaddlliinnee 関数の名前を全てリスト表示します。
              --pp     rreeaaddlliinnee  の関数の名前と割り当てを表示します。 表示は、再
                     び読み込みできる形式で出力されます。
              --PP     rreeaaddlliinnee の関数の現在の名前と割り当てをリスト表示します。
              --ss     マクロに割り当てられた rreeaaddlliinnee のキーシーケンスと、 マク
                     ロが出力する文字列を表示します。 表示は、再び読み込みでき
                     る形式で出力されます。
              --SS     マクロに割り当てられた rreeaaddlliinnee のキーシーケンスと、 マク
                     ロが出力する文字列を表示します。
              --vv     rreeaaddlliinnee  の変数名と値を表示します。 表示は、再び読み込み
                     できる形式で出力されます。
              --VV     rreeaaddlliinnee の現在の変数名と値をリスト表示します。
              --ff _f_i_l_e_n_a_m_e
                     キー割り当てを _f_i_l_e_n_a_m_e から読み込みます。
              --qq _f_u_n_c_t_i_o_n
                     指定された _f_u_n_c_t_i_o_n を呼び出すキーを問い合わせます。
              --uu _f_u_n_c_t_i_o_n
                     指定された _f_u_n_c_t_i_o_n  に割り当てられているキーの割り当てを
                     全て取り消します。
              --rr _k_e_y_s_e_q
                     _k_e_y_s_e_q に対する現在の割り当てを削除します。
              --xx _k_e_y_s_e_q::_s_h_e_l_l_-_c_o_m_m_a_n_d
                     _k_e_y_s_e_q  が押されるたびに、 _s_h_e_l_l_-_c_o_m_m_a_n_d が実行されるよう
                     にします。   _s_h_e_l_l_-_c_o_m_m_a_n_d   を実行するとき、シェルは変数
                     RREEAADDLLIINNEE__LLIINNEE   に   rreeaaddlliinnee  の編集バッファの内容を設定
                     し、変数 RREEAADDLLIINNEE__PPOOIINNTT  に現在の挿入ポイントの位置を設定
                     します。      実行したコマンドが     RREEAADDLLIINNEE__LLIINNEE     や
                     RREEAADDLLIINNEE__PPOOIINNTT の値を変更した場合、新しい値が編集の状態に
                     反映されます。

              認識できないオプションが与えられた場合やエラーが起きた場合以外
              は、 返り値は 0 になります。

       bbrreeaakk [_n]
              ffoorr, wwhhiillee, uunnttiill, sseelleecctt のループから抜けます。_n が指定されてい
              れば、_n レベル分 のループを break します。 _n は 1 以上でなければ
              なりません。 _n  がループの深さよりも大きい場合には、全てのループ
              から抜けます。 _n が 1 未満の場合を除けば、返り値は 0 です。

       bbuuiillttiinn _s_h_e_l_l_-_b_u_i_l_t_i_n [_a_r_g_u_m_e_n_t_s]
              指定されたシェル組み込みコマンドを実行します。コマンドには
              _a_r_g_u_m_e_n_t_s を引き数として渡し、このコマンドの終了ステータスを返し
              ます。  これはシェル組み込みコマンドと同じ名前の関数を定義すると
              きに便利で、  その関数内で組み込みコマンドの機能を使うことができ
              ます。  組み込みコマンド ccdd は普通、これを使って再定義されます。
              _s_h_e_l_l_-_b_u_i_l_t_i_n がシェル組み込みコマンドでなければ、終了ステータス
              は偽となります。

       ccaalllleerr [_e_x_p_r]
              実行中のサブルーチン (シェル関数や、組み込みコマンド .. か ssoouurrccee
              で呼び出したスクリプト) 呼び出しのコンテキストを返します。  _e_x_p_r
              が指定されていなければ、ccaalllleerr は 現在のサブルーチン呼び出しの行
              番号とソースファイル名を表示します _e_x_p_r に負でない整数が与えられ
              た場合、ccaalllleerr は、 現在の呼び出しスタック中で指定した位置の行番
              号、サブルーチン名、 ソースファイルを表示します。 スタックトレー
              スを表示する場合などに、範囲外の情報が使われるかもしれません。
              現在のフレームはフレーム 0 です。 シェルがサブルーチンを呼び出し
              ていない場合や、 _e_x_p_r が呼び出しスタックの有効な位置に相当しない
              場合を除けば、 返り値は 0 です。

       ccdd [--LL|[--PP [--ee]]] [_d_i_r]
              カレントディレクトリを _d_i_r に変更します。 変数 HHOOMMEE  の値が  _d_i_r
              のデフォルト値です。変数  CCDDPPAATTHH は、 _d_i_r を含むディレクトリの検
              索パスを定義します。 CCDDPPAATTHH 内では候補ディレクトリ名はコロン (:)
              で区切ります。 CCDDPPAATTHH 中に空のディレクトリ名がある場合、これはカ
              レントディレクトリ (つまり “..”)  を意味します。 _d_i_r がスラッシュ
              (/)  で始まる場合には、  CCDDPPAATTHH  は使われません。  --PP オプション
              は、シンボリックリンクを辿らないで物理的なディレクトリ構造を  使
              うように指示します  (組み込みコマンド  sseett  の --PP オプションも参
              照)。 --LL  オプションを指定すると、シンボリックリンクを辿るように
              なります。 --ee オプションを --PP オプションと同時に指定すると、ディ
              レクトリの変更が成功した後に  カレントディレクトリが判定できない
              場合、ccdd  は失敗のステータスを返します。 引き数に -- を指定するの
              は、 $$OOLLDDPPWWDD  を指定するのと同じ意味です。  CCDDPPAATTHH  内の空以外の
              ディレクトリ名が使われたときや、  -- が最初の引き数のときに、ディ
              レクトリの変更が成功すると、  新しいディレクトリの絶対パス名が標
              準出力に書かれます。  ディレクトリの変更が成功した場合には返り値
              は真になり、 そうでない場合には偽になります。

       ccoommmmaanndd [--ppVVvv] _c_o_m_m_a_n_d [_a_r_g ...]
              _c_o_m_m_a_n_d に引き数 _a_r_g_s を付けて実行します。ただし、シェル関数の通
              常の参照は行いません。  組み込みコマンドと PPAATTHH 内で見つかるコマ
              ンドだけが実行されます。 --pp  オプションが与えられると、  _c_o_m_m_a_n_d
              の検索を行う際に  PPAATTHH  のデフォルト値が使われます。これにより、
              全ての標準ユーティリティを確実に見つけられます。 --VV オプションま
              たは --vv オプションを与えると、 _c_o_m_m_a_n_d の説明が出力されます。 --vv
              オプションでは、 _c_o_m_m_a_n_d  を起動するときに使われるコマンドやファ
              イル名を示す単語が表示されます。 --VV ではさらに詳しい説明が表示さ
              れます。 --VV オプションや --vv オプションを与えた場合、終了ステータ
              スは  _c_o_m_m_a_n_d が見つかれば 0 となり、見つからなければ 1 となりま
              す。  どちらのオプションも与えなかった場合に、エラーが起きたり、
              _c_o_m_m_a_n_d  を見つけられなかったりすると、終了ステータスは 127 にな
              ります。 それ以外の場合には、組み込みコマンド  ccoommmmaanndd  の終了ス
              テータスは、 _c_o_m_m_a_n_d の終了ステータスです。

       ccoommppggeenn [_o_p_t_i_o_n] [_w_o_r_d]
              _o_p_t_i_o_n に従って、_w_o_r_d にマッチする補完候補のリストを生成します。
              オプションには ccoommpplleettee 組み込みコマンドと同じものが指定できます
              が、  --pp と --rr は指定できません。 マッチのリストは標準出力に出力
              されます。 --FF や --CC オプションを使用したときは、  プログラム補完
              機能によって設定された様々なシェル変数は、  利用可能であっても有
              用な値を持ちません。

              マッチのリストは、同じフラグによる補完仕様で    プログラム補完の
              コードが直接生成したかのように  生成されます。 _w_o_r_d が指定される
              と、_w_o_r_d にマッチする補完だけが表示されます。

              戻り値は、  無効なオプションが指定された場合やマッチが生成されな
              かった場合以外は 真になります。

       ccoommpplleettee   [--aabbccddeeffggjjkkssuuvv]  [--oo  _c_o_m_p_-_o_p_t_i_o_n]  [--DDEE]  [--AA  _a_c_t_i_o_n]  [--GG
       _g_l_o_b_p_a_t] [--WW _w_o_r_d_l_i_s_t] [--FF _f_u_n_c_t_i_o_n] [--CC _c_o_m_m_a_n_d]
              [--XX _f_i_l_t_e_r_p_a_t] [--PP _p_r_e_f_i_x] [--SS _s_u_f_f_i_x] _n_a_m_e [_n_a_m_e _._._.]
       ccoommpplleettee --pprr [--DDEE] [_n_a_m_e ...]
              各 _n_a_m_e の引き数を、どのように補完するのかを指定します。 --pp オプ
              ションが指定された場合や、  何もオプションが指定されなかった場合
              は、  現在の補完仕様が  (入力として再利用できる形で)  出力されま
              す。  --rr  オプションは、それぞれの _n_a_m_e の補完指定を削除します。
              _n_a_m_e が指定されなかった場合は全ての補完指定を削除します。 --DD  オ
              プションは、残りのオプションと動作を “デフォルトの” コマンド補完
              (補完が定義されていないコマンドに対して 試みられる補完) に適用す
              ることを示します。 --EE オプションは、残りのオプションと動作を “空
              の” コマンド補完 (空行に対して試みられる補完) に適用することを示
              します。

              単語補完が試みられたときに、補完指定が適用される流れは、  前述の
              ププロロググララムム補補完完 で説明されています。

              他のオプションは、指定された場合、以下のような意味を持ちます。
              --GG,  --WW, --XX オプションの引き数 (必要ならば --PP と --SS オプションの
              場合も) はクォートして、 組み込みコマンド ccoommpplleettee  が呼び出され
              る前に展開されないようにすべきです。
              --oo _c_o_m_p_-_o_p_t_i_o_n
                      _c_o_m_p_-_o_p_t_i_o_n は補完仕様の動作をいくつかの観点から制御し、
                      単純な補完生成以外ができるようにします。 _c_o_m_p_-_o_p_t_i_o_n  に
                      は以下のどれかひとつを指定できます。
                      bbaasshhddeeffaauulltt
                              補完仕様がマッチを全く生成しなかった場合に、
                              bbaasshh のデフォルトの補完を用います。
                      ddeeffaauulltt 補完仕様がマッチを全く生成しなかった場合に、
                              readline のデフォルトの補完を用います。
                      ddiirrnnaammeess
                              補完仕様がマッチを全く生成しなかった場合に、
                              ディレクトリ名を補完しようとします。
                      ffiilleennaammeess
                              補完仕様がファイル名を生成することを readline に
                              伝え、 readline がファイル名特有の処理 (ディレク
                              トリ名にスラッシュを加えたり、特殊文字をクォート
                              したり、  末尾の空白を削除したり、など) を行える
                              ようにします。  シェル関数と共に用いることを想定
                              しています。
                      nnoossppaaccee 行末で単語を補完したときに空白を付け加える動作
                              (デフォルトの動作) を やめるように readline に伝
                              えます。
                      pplluussddiirrss
                              補完仕様で定義されたマッチした候補が生成された後
                              に、  ディレクトリ名の補完を試み、ほかの動作の結
                              果にマッチした候補が 全て追加されます。
              --AA _a_c_t_i_o_n
                      _a_c_t_i_o_n は補完候補リストの生成動作で、 以下のどれかひとつ
                      を指定します。
                      aalliiaass   エイリアス名。--aa でも指定できます。
                      aarrrraayyvvaarr
                              配列変数名。
                      bbiinnddiinngg rreeaaddlliinnee キー割り当て名。
                      bbuuiillttiinn シェル組み込みコマンド名。--bb でも指定できます。
                      ccoommmmaanndd コマンド名。--cc でも指定できます。
                      ddiirreeccttoorryy
                              ディレクトリ名。--dd でも指定できます。
                      ddiissaabblleedd
                              無効にされているシェル組み込みコマンドの名前。
                      eennaabblleedd 有効にされているシェル組み込みコマンドの名前。
                      eexxppoorrtt  エクスポートされたシェル変数の名前。 --ee でも指定
                              できます。
                      ffiillee    ファイル名。--ff でも指定できます。
                      ffuunnccttiioonn
                              シェル関数の名前。
                      ggrroouupp   グループ名。--gg でも指定できます。
                      hheellppttooppiicc
                              組み込みコマンド hheellpp に指定できるヘルプのトピッ
                              ク名。
                      hhoossttnnaammee
                              HHOOSSTTFFIILLEE  シェル変数で指定されたファイルから得ら
                              れたホスト名。
                      jjoobb     ジョブ名 (ジョブ制御が有効な場合)。--jj でも指定で
                              きます。
                      kkeeyywwoorrdd シェルの予約語。--kk でも指定できます。
                      rruunnnniinngg ジョブ制御が有効であれば、実行中のジョブ名。
                      sseerrvviiccee サービス名。--ss でも指定できます。
                      sseettoopptt  組み込みコマンド sseett の --oo  オプションで有効な引
                              き数。
                      sshhoopptt   組み込みコマンド   sshhoopptt  に指定できるシェルオプ
                              ション名。
                      ssiiggnnaall  シグナル名。
                      ssttooppppeedd 停止しているジョブ名 (ジョブ制御が有効な場合)。
                      uusseerr    ユーザ名。--uu でも指定できます。
                      vvaarriiaabbllee
                              全てのシェル変数名。--vv でも指定できます。
              --CC _c_o_m_m_a_n_d
                      _c_o_m_m_a_n_d がサブシェル環境で実行され、  その出力が補完候補
                      として使用されます。
              --FF _f_u_n_c_t_i_o_n
                      シェル関数  _f_u_n_c_t_i_o_n  は現在のシェル環境で実行されます。
                      関数が終了したときに、補完候補が CCOOMMPPRREEPPLLYY  配列変数から
                      取得されます。
              --GG _g_l_o_b_p_a_t
                      パス名展開パターン _g_l_o_b_p_a_t を展開し、 補完候補のリストを
                      生成します。
              --PP _p_r_e_f_i_x
                      ほかの全てのオプションが適用された後で、  それぞれの補完
                      候補の先頭に _p_r_e_f_i_x が付け加えられます。
              --SS _s_u_f_f_i_x
                      ほかの全てのオプションが適用された後で、  それぞれの補完
                      候補の後に _s_u_f_f_i_x が付け加えられます。
              --WW _w_o_r_d_l_i_s_t
                      _w_o_r_d_l_i_s_t は IIFFSS 特殊変数に含まれる文字を区切り文字として
                      分割され、 分割された単語がそれぞれ展開されます。 展開結
                      果のリストのメンバのうち、補完中の単語がマッチするもの
                      が、 補完候補となります。
              --XX _f_i_l_t_e_r_p_a_t
                      _f_i_l_t_e_r_p_a_t  がパス名展開のパターンとして使用されます。 先
                      行するオプション・引き数によって生成された補完候補のリス
                      トに適用され、  _f_i_l_t_e_r_p_a_t とマッチするそれぞれの補完候補
                      がリストから削除されます。 _f_i_l_t_e_r_p_a_t  が  !!   で始まる場
                      合、パターンの否定の意味になります。   つまり、_f_i_l_t_e_r_p_a_t
                      にマッチしない補完対象が削除されます。

              不正なオプションが指定された場合、--pp  と  --rr  以外のオプションで
              _n_a_m_e が指定されなかった場合、 存在しない _n_a_m_e の指定によって補完
              が削除されようとした場合、  補完の指定の追加に失敗した場合、を除
              いては、返り値は真になります。

       ccoommppoopptt [--oo _o_p_t_i_o_n] [--DDEE] [++oo _o_p_t_i_o_n] [_n_a_m_e]
              _n_a_m_e  の補完オプションを _o_p_t_i_o_n に従って変更します。 _n_a_m_e が指定
              されない場合は、実行中の補完が対象になります。 _o_p_t_i_o_ns  が与えら
              れない場合は、_n_a_m_e  または現在の補完の  補完オプションを表示しま
              す。 _o_p_t_i_o_n に指定できる値は、前述の組み込みコマンド ccoommpplleettee で
              有効なものです。 --DD オプションは、残りのオプションを “デフォルト
              の” コマンド補完 (補完が定義されていないコマンドに対して  試みら
              れる補完) に適用することを示します。 --EE オプションは、残りのオプ
              ションを “空の” コマンド補完 (空行に対して試みられる補完) に適用
              することを示します。

              不正なオプションが指定された場合、    補完仕様が定義されていない
              _n_a_m_e のオプションを変更しようとした場合、 出力エラーが起こった場
              合、を除いては、返り値は真になります。

       ccoonnttiinnuuee [_n]
              ffoorr, wwhhiillee, uunnttiill, sseelleecctt ループの次の繰り返し分から実行を継続し
              ます。 _n を指定すると、深さを _n 個分上がったループで実行を継続し
              ます。  _n は 1 以上でなければなりません。 _n がループの深さよりも
              大きい場合、 最後のループ (「トップレベル」のループ)  で実行が継
              続されます。 _n が 1 未満の場合を除けば、返り値は 0 です。

       ddeeccllaarree [--aaAAffFFggiillrrttuuxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
       ttyyppeesseett [--aaAAffFFggiillrrttuuxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              変数を宣言したり、変数に属性を与えたりします。 _n_a_m_e を指定しなけ
              れば、変数の値が表示されます。   --pp   オプションを指定すると、各
              _n_a_m_e  の属性と値が表示されます。  --pp  に  _n_a_m_e  引き数を指定する
              と、他のオプションは無視されます。 --pp オプションが _n_a_m_e 引き数な
              しで指定されると、 他のオプションで指定された属性を持っている 全
              ての変数の属性と値を表示します。 --pp 以外のオプションが指定されな
              い場合、  ddeeccllaarree  は全てのシェル変数の属性と値を表示します。 --ff
              オプションは表示をシェル関数に限定します。 --FF オプションを指定す
              ると、関数定義の表示を止めます。  関数の名前と属性だけが出力され
              ます。 sshhoopptt によってシェルオプション eexxttddeebbuugg  が有効になってい
              れば、  関数が定義されているソースファイルの名前と行番号も表示さ
              れます。 --FF オプションを指定すると、 --ff オプションも指定したこと
              になります。 --gg オプションを指定すると、ddeeccllaarree がシェル関数の中
              で実行されたときであっても、  グローバルスコープで変数の作成、変
              更を行います。 ほかの場合には無視されます。 以下のオプションを使
              うと、 指定した属性を持つ変数の出力を限定したり、 変数に属性を与
              えたりできます:
              --aa     各 _n_a_m_e は配列変数です (前述の 配配列列 を参照)。
              --AA     各 _n_a_m_e は連想配列変数です (前述の 配配列列 を参照)。
              --ff     関数名だけを使います。
              --ii     変数を整数として扱います。変数に値が代入されたときに算術
                     式評価 ( 算算術術式式評評価価 を参照) が実行されます。
              --ll     変数に値が代入されると、全ての大文字は小文字に変換されま
                     す。 大文字属性は無効になります。
              --rr     _n_a_m_e  を読み込み専用にします。 これ以降、代入文を用いて値
                     を代入したり unset したりできなくなります。
              --tt     各 _n_a_m_e に _t_r_a_c_e 属性を与えます。 trace  属性を付与された
                     関数は  DDEEBBUUGG と RREETTUURRNN のトラップを 呼び出したシェルから
                     受け継ぎます trace 属性は変数には意味を持ちません。
              --uu     変数に値が代入されると、全ての小文字は大文字に変換されま
                     す。 小文字属性は無効になります。
              --xx     _n_a_m_e  に印を付け、 これ以降に実行するコマンドに環境経由で
                     エクスポートします。

              `-' ではなく `+'  を使うと属性を消します。  ただし例外として、++aa
              を使って配列変数を破棄することはできず、 ++rr を使って読み込み専用
              属性を消すことはできません。 関数内で使った場合、 --gg  オプション
              が与えられなかった場合、 llooccaall コマンドを使った場合と同様に _n_a_m_e
              はローカル変数となります。 変数名に =_v_a_l_u_e が続く場合、 変数の値
              として  _v_a_l_u_e が設定されます。 返り値は基本的には 0 ですが、不正
              なオプションに出会った場合、 ``-f foo=bar'',  を使って関数を定義
              しようとした場合、 読み込み専用の変数に代入しようとした場合、 複
              合代入構文を使わずに配列変数に値を代入しようとした場合   (前述の
              配配列列 を参照)、_n_a_m_e のいずれかが正しいシェル変数名でない場合、 読
              み込み専用変数の読み込み専用属性を無効にしようとした場合、  配列
              変数の配列属性を無効にしようとした場合、  存在しない関数を --ff オ
              プションで表示しようとした場合は除きます。

       ddiirrss [[++_n]] [[--_n]] [[--ccllppvv]]
              オプションがないときは、  現在記憶しているディレクトリのリストが
              表示されます。    デフォルトでは、全てのディレクトリ名は空白で区
              切って 1 行で表示されます。 ディレクトリは ppuusshhdd  コマンドによっ
              てリストに追加されます。 ppooppdd コマンドはリストからエントリを削除
              します。
              ++_n     オプションなしで  ddiirrss   を起動したときに表示されるリスト
                     の、 左から数えて _n 番目のエントリを表示します。 エントリ
                     は 0 から始まります。
              --_n     オプションなしで  ddiirrss   を起動したときに表示されるリスト
                     の、 右から数えて _n 番目のエントリを表示します。 エントリ
                     は 0 から始まります。
              --cc     全てのエントリを削除し、ディレクトリスタックをクリアしま
                     す。
              --ll     長い形式のリスト表示を行います。   デフォルトのリスト表示
                     フォーマットでは、 チルダを使ってホームディレクトリを表し
                     ます。
              --pp     1 行に 1 エントリの形でディレクトリスタックを出力します。
              --vv     1 行に 1 エントリの形でディレクトリスタックを出力します。
                     各エントリの前にはスタック内での番号が表示されます。

              不正なオプションが与えられた場合とインデックス _n  がディレクトリ
              スタックの末尾を越えている場合を除き、 返り値は 0 となります。

       ddiissoowwnn [--aarr] [--hh] [_j_o_b_s_p_e_c ...]
              オプションなしの場合には、それぞれの  _j_o_b_s_p_e_c がアクティブなジョ
              ブのテーブルから削除されます。 _j_o_b_s_p_e_c がなく、かつ --aa  オプショ
              ンも  --rr オプションも 与えられていない場合には、_カ_レ_ン_ト_ジ_ョ_ブが
              使われます。 --hh オプションが与えられている場合、どの _j_o_b_s_p_e_c  も
              テーブルから削除されず、  シェルが SSIIGGHHUUPP を受け取ってもそのジョ
              ブには SSIIGGHHUUPP が送られないように印が付けられます。 _j_o_b_s_p_e_c  が与
              えられていない場合、  --aa オプションは全てのジョブを削除するか 全
              てのジョブに印を付けるという意味 となります。 _j_o_b_s_p_e_c 引き数なし
              で  --rr オプションを指定すると、 実行中のジョブだけが操作の対象と
              なります。 _j_o_b_s_p_e_c  が有効なジョブを指定していない場合を除き、返
              り値は 0 となります。

       eecchhoo [--nneeEE] [_a_r_g ...]
              _a_r_g  を空白で区切って出力し、最後に改行を出力します。 終了ステー
              タスは常に 0 です。 --nn  が指定された場合、最後の改行は出力されま
              せん。  --ee  オプションを指定した場合、  以下に示す、バックスラッ
              シュのエスケープ文字が解釈されるようになります。 --EE オプションを
              指定すると、  デフォルトでこのようなエスケープ文字が解釈されるシ
              ステムであっても、  エスケープ文字が解釈されないようになります。
              xxppgg__eecchhoo  シェルオプションを用いると、 eecchhoo がこれらのエスケープ
              文字を展開するかどうかの    デフォルト動作を動的に決定できます。
              eecchhoo  は ---- をオプションの終わりと解釈しません。 eecchhoo は以下のエ
              スケープシーケンスを解釈します:
              \\aa     警告 (ベル)
              \\bb     バックスペース
              \\cc     行末に改行を付けない
              \\ee
              \\EE     エスケープ文字
              \\ff     フォームフィード
              \\nn     改行
              \\rr     復帰 (carriage return)
              \\tt     水平タブ
              \\vv     垂直タブ
              \\\\     バックスラッシュ
              \\00_n_n_n  8 進値で _n_n_n である 8 ビット文字 (8 進数で 0〜3 桁)。
              \\xx_H_H   16 進値が _H_H である 8 ビット文字 (16 進で 1〜2 桁)。
              \\uu_H_H_H_H 16 進値が _H_H_H_H であるユニコード (ISO/IEC 10646) 文字  (16
                     進 1〜4 桁)。
              \\UU_H_H_H_H_H_H_H_H
                     16  進値が _H_H_H_H_H_H_H_H であるユニコード (ISO/IEC 10646) 文字
                     (16 進 1〜8 桁)。

       eennaabbllee [--aa] [--ddnnppss] [--ff _f_i_l_e_n_a_m_e] [_n_a_m_e ...]
              組み込みコマンドの有効/無効を設定します。 シェルは通常はディスク
              コマンドの前に組み込みコマンドを探しますが、  組み込みコマンドを
              無効にすると、  シェルの組み込みコマンドと同じ名前を持つディスク
              コマンドを、  完全なパス名を指定しなくても実行できます。 --nn を用
              いると、それぞれの  _n_a_m_e   は無効となります。   それ以外の場合に
              は、_n_a_m_e  は有効となります。  例えば、シェル組み込みのものでなく
              PPAATTHH 上にある tteesstt バイナリを使うには ``enable -n test''.   を実
              行します。 --ff オプションは新しい組み込みコマンド _n_a_m_e を共有オブ
              ジェクト _f_i_l_e_n_a_m_e からロードするという意味です。  これは動的ロー
              ドをサポートしているシステムで使えます。 --dd オプションは、以前に
              --ff  オプションでロードした組み込みコマンドを削除します。  引き数
              _n_a_m_e  が与えられなかった場合や、 --pp オプションが与えられた場合、
              シェルの組み込みコマンドのリストが表示されます。  他にオプション
              引き数が指定されていない場合には、  有効になっているシェル組み込
              みコマンド全てからなるリストが表示されます。 --nn を与えると、無効
              にされている組み込みコマンドだけが出力されます。 --aa を与えると、
              それぞれ有効かどうかの表示付きで全ての組み込みコマンドが出力され
              ます。  --ss を与えると、出力されるのは POSIX の_特_殊組み込みコマン
              ドだけに制限されます。  _n_a_m_e  がシェル組み込みコマンドでない場合
              と、  共有オブジェクトからの新しい組み込みコマンドのロードに失敗
              した場合を除き、 返り値は 0 となります。

       eevvaall [_a_r_g ...]
              _a_r_g を読み込み、1 つのコマンドに結合し、  このコマンドを読み込ん
              で実行します。  その終了ステータスが eevvaall の値として返されます。
              _a_r_g_s がない場合や空の引き数しかない場合には eevvaall は  0  を返しま
              す。

       eexxeecc [--ccll] [--aa _n_a_m_e] [_c_o_m_m_a_n_d [_a_r_g_u_m_e_n_t_s]]
              _c_o_m_m_a_n_d が指定されていると、シェルはこのコマンドに置き換えられま
              す。 新しいプロセスは生成されません。 _a_r_g_u_m_e_n_t_s は _c_o_m_m_a_n_d  に対
              する引き数となります。 --ll オプションを与えると、シェルは _c_o_m_m_a_n_d
              に渡す 0  番目のオプションの先頭にダッシュを設定します。  これは
              _l_o_g_i_n(1)   が行う動作です。 --cc オプションを与えると、 _c_o_m_m_a_n_d は
              空の環境で実行されます。 --aa を与えると、シェルは実行するコマンド
              に  0 番目の引き数として _n_a_m_e を渡します。何らかの理由で _c_o_m_m_a_n_d
              が実行できない場合には非対話的シェルは終了します。  ただしシェル
              オプション eexxeeccffaaiill が設定されている場合は終了せず、この場合には
              偽が返されます。  ファイルが実行できない場合には、対話的シェルは
              偽を返します。  _c_o_m_m_a_n_d が指定されていない場合、任意のリダイレク
              トはカレントシェルで効果を持ち、 終了ステータスは 0 となります。
              リダイレクトのエラーが起きた場合には、終了ステータスは  1 となり
              ます。

       eexxiitt [_n]
              ステータス _n でシェルを終了させます。  _n  を省略すると、  終了ス
              テータスは最後に実行したコマンドの終了ステータスとなります。
              シェルが終了する前には、 EEXXIITT に対するトラップが実行されます。

       eexxppoorrtt [--ffnn] [_n_a_m_e[=_w_o_r_d]] ...
       eexxppoorrtt --pp
              指定された _n_a_m_e には印が付けられ、  これ以降に実行するコマンドの
              環境に  自動的にエクスポートされるようになります。 --ff オプション
              を与えると、 _n_a_m_e は関数を参照します。  _n_a_m_e  を与えなかった場合
              や、  --pp オプションを与えた場合には、 このシェル内でエクスポート
              されている全ての名前のリストが出力されます。 --nn オプションを与え
              ると、指定した変数からエクスポート属性が取り除かれます。  変数名
              に =_w_o_r_d が続くと、変数の値に _w_o_r_d  が設定されます。  不正なオプ
              ションがあった場合、 _n_a_m_e のいずれかが不正なシェル変数名であった
              場合、 関数でない名前に対して --ff  オプションを与えた場合を除き、
              eexxppoorrtt は終了ステータス 0 を返します。

       ffcc [--ee _e_n_a_m_e] [--llnnrr] [_f_i_r_s_t] [_l_a_s_t]
       ffcc --ss [_p_a_t=_r_e_p] [_c_m_d]
              フィックスコマンド  (Fix  Command)。 最初の形式では、 _f_i_r_s_t から
              _l_a_s_t までの範囲のコマンドが履歴リストから選択されます。 _f_i_r_s_t と
              _l_a_s_t には文字列か数値を指定します。 文字列はその文字列で始まる最
              後のコマンドを表し、  数値は履歴リスト中でのインデックスを表しま
              す     (負の値は現在のコマンド番号からのオフセットとして扱われま
              す)。 _l_a_s_t が指定されていない場合、リスト表示の場合には 現在のコ
              マンドが  _l_a_s_t に設定され (したがって ``fc -l -10'' で最近のコマ
              ンド 10 個が出力されます)、それ以外の場合には _f_i_r_s_t が設定されま
              す。  _f_i_r_s_t が指定されていなければ、編集の場合には前のコマンドが
              _f_i_r_s_t に設定され、 リスト表示の場合には -16 が設定されます。

              --nn オプションを与えるとリスト表示でコマンド番号が付きません。 --rr
              オプションを与えるとコマンドの順序が逆になります。 --ll オプション
              を与えると、コマンドは標準出力にリスト表示されます。  それ以外の
              場合には、これらのコマンドが書かれたファイルに対し、  _e_n_a_m_e で指
              定したエディタが起動されます。   _e_n_a_m_e    が与えられていない場合
              は、変数 FFCCEEDDIITT の値が使われ、 FFCCEEDDIITT も設定されていない場合には
              EEDDIITTOORR  の値が使われます。  どちらの変数も設定されていなければ、
              _v_i が使われます。 編集が終了すると、編集後のコマンドがエコー表示
              され、実行されます。

              2  番目の形式では、_p_a_t  の部分をそれぞれ  _r_e_p   で置き換えてから
              _c_o_m_m_a_n_d  が再実行されます。 これを利用している便利なエイリアスの
              例として ``r="fc -s"'', があります。 これを用いると ``r cc''  と
              入力すれば  ``cc''  で始まる最も新しいコマンドを実行でき、 ``r''
              と入力すれば直前のコマンドを再実行できます。

              最初の形式を用いた場合、不正なオプションがあるか、 _f_i_r_s_t  または
              _l_a_s_t  が履歴行の範囲外を指定していなければ、返り値は  0 となりま
              す。 --ee オプションが与えられた場合、  返り値は最後に実行されたコ
              マンドの返り値となります。    ただし、コマンドの一時ファイルでエ
              ラーが起きた場合には返り値は偽 (失敗) となります。 2  番目の形式
              を用いた場合、  終了ステータスは再実行されたコマンドの終了ステー
              タスとなります。 ただし、 _c_m_d が有効な履歴行を指定していない場合
              は、 ffcc は偽 (失敗) を返します。

       ffgg [_j_o_b_s_p_e_c]
              _j_o_b_s_p_e_c の実行をフォアグラウンドで再開し、これをカレントジョブと
              します。 _j_o_b_s_p_e_c  がない場合、シェルが記録している_カ_レ_ン_ト_ジ_ョ_ブ
              が使われます。  返り値はフォアグラウンドで再開されたコマンドの返
              り値ですが、 ジョブ制御が無効であるときに実行した場合や、 ジョブ
              制御が有効であっても  _j_o_b_s_p_e_c が有効なジョブを指定していない場合
              や _j_o_b_s_p_e_c  がジョブ制御なしで実行したジョブを指定している場合に
              は偽となります。

       ggeettooppttss _o_p_t_s_t_r_i_n_g _n_a_m_e [_a_r_g_s]
              ggeettooppttss       は位置パラメータを解釈するシェルの処理で使います。
              _o_p_t_s_t_r_i_n_g は識別の対象であるオプション文字列です。  ある文字の後
              にコロンがある場合、  そのオプションは引き数を一つ取ることが期待
              されます。  引き数は空白でオプション文字と区切られていなければな
              りません。 コロンと疑問符はオプション文字として使えません。 呼び
              出されるたびに、 ggeettooppttss  は次に見つかったオプションをシェル変数
              _n_a_m_e に格納し (_n_a_m_e が存在しなければ初期化を行います)、 次に処理
              される引き数のインデックスを変数 OOPPTTIINNDD に格納します。 OOPPTTIINNDD は
              シェルまたはシェルスクリプトが呼び出されるたびに  1 に初期化され
              ます。 オプションが引き数を必要とする場合には、 ggeettooppttss はその引
              き数を変数  OOPPTTAARRGG に格納します。 シェルが OOPPTTIINNDD を自動的に再設
              定することはありません。 1  つのシェルが呼び出されている間に別の
              パラメータの組み合わせを使う場合には、 再度 ggeettooppttss を呼び出す前
              に手動で OOPPTTIINNDD の再設定を行わなければなりません。

              オプションの終わりに到達すると、 ggeettooppttss は 0 より大きい返り値で
              終了します。 OOPPTTIINNDD にはオプションでない最初の引き数のインデック
              スが設定され、 _n_a_m_e には ? が設定されます。

              ggeettooppttss は通常位置パラメータを展開しますが、他の引き数が _a_r_g_s に
              指定されている場合には、  ggeettooppttss は位置パラメータでなくこれらの
              引き数を解釈対象とします。

              ggeettooppttss は 2 通りの方法でエラーを報告します。 _o_p_t_s_t_r_i_n_g の最初の
              文字がコロンならば、 _静_か_な _(_s_i_l_e_n_t_) エラー報告が行われます。 通
              常の動作では、不正なオプションがある場合や  オプションの引き数が
              足りない場合に診断メッセージが出力されます。 変数 OOPPTTEERRRR に 0 が
              設定されている場合、 _o_p_t_s_t_r_i_n_g  の最初の文字がコロンでない場合で
              あっても、 エラーメッセージは全く出力されません。

              不正なオプションがあった場合、  ggeettooppttss  は ? を _n_a_m_e に設定しま
              す。  さらに、静かなモードでない場合にはエラーメッセージが出力さ
              れ、  OOPPTTAARRGG が削除されます。 ggeettooppttss が静かなモードであれば、見
              つかったオプション文字は OOPPTTAARRGG に設定され、診断メッセージは出力
              されません。

              必要な引き数が見つからず、かつ  ggeettooppttss が静かなモードでない場合
              には、疑問符 (??) が _n_a_m_e  に設定され、  OOPPTTAARRGG  が削除され、診断
              メッセージが出力されます。  ggeettooppttss が静かなモードならば、コロン
              (::) が _n_a_m_e に設定され、 OOPPTTAARRGG には見つかったオプション文字が設
              定されます。

              (指定の有無に関係なく) オプションが見つかった場合、 ggeettooppttss は真
              を返します。  オプションの最後に到達した場合や、エラーが起きた場
              合には、 偽を返します。

       hhaasshh [--llrr] [--pp _f_i_l_e_n_a_m_e] [--ddtt] [_n_a_m_e]
              hhaasshh が実行される度に、 $$PPAATTHH に含まれるディレクトリの検索を行っ
              てコマンド _n_a_m_e の完全なパス名を調べ、 その結果を記憶します。 そ
              れまでに記憶されていたパス名は捨てられます。 --pp オプションが指定
              されると、パス検索は実行されず、 _f_i_l_e_n_a_m_e がそのコマンドの完全な
              ファイル名として使われます。 --rr オプションを与えると、シェルは記
              憶しているパス名を全て忘れます。 --dd オプションを与えると、シェル
              は各 _n_a_m_e について記憶しているパス名を忘れます。 --tt オプションを
              与えると、_n_a_m_e に対応する完全なファイル名が表示されます。 --tt  に
              複数の  _n_a_m_e 引き数が指定された場合、 記憶されている完全なファイ
              ル名の前に _n_a_m_e が表示されます。 --ll オプションを与えると、入力と
              して再利用できる形で出力されます。  引き数が与えられていない場合
              や、--ll だけが与えられた場合は、 記憶しているコマンドに関する情報
              が出力されます。 _n_a_m_e が見つからない場合と不正なオプションが与え
              られた場合を除き、 返却ステータスは真となります。

       hheellpp [--ddmmss] [_p_a_t_t_e_r_n]
              組み込みコマンドのヘルプ情報を表示します。 _p_a_t_t_e_r_n  が指定された
              場合には、  hheellpp は _p_a_t_t_e_r_n にマッチする全てのコマンドに関する詳
              しいヘルプを出力します。 指定されなかった場合には、 全ての組み込
              みコマンドと制御構造についての説明が出力されます。
              --dd     _p_a_t_t_e_r_n それぞれの短い説明を表示します。
              --mm     _p_a_t_t_e_r_n それぞれの説明を manpage 風のフォーマットで表示し
                     ます。
              --ss     _p_a_t_t_e_r_n それぞれの短い書式のみを表示します。

              _p_a_t_t_e_r_n にマッチするコマンドが全くない場合を除き、返却ステータス
              は 0 です。

       hhiissttoorryy [[_n]]
       hhiissttoorryy --cc
       hhiissttoorryy --dd _o_f_f_s_e_t
       hhiissttoorryy --aannrrww [_f_i_l_e_n_a_m_e]
       hhiissttoorryy --pp _a_r_g [_a_r_g _._._.]
       hhiissttoorryy --ss _a_r_g [_a_r_g _._._.]
              オプションがない場合には、行番号付きでコマンド履歴を表示します。
              ** 付きでリスト表示されている行は変更された行です。 引き数 _n を指
              定すると、最新の   _n   行だけがリスト表示されます。   シェル変数
              HHIISSTTTTIIMMEEFFOORRMMAATT  に空でない値が設定されると、履歴エントリを表示す
              るときに タイムスタンプを表示するための _s_t_r_f_t_i_m_e(3) の書式文字列
              として使われます。  タイムスタンプと履歴行の間には空白は表示され
              ません。  _f_i_l_e_n_a_m_e が指定されている場合、 履歴ファイルの名前とし
              て使われます。 指定されていない場合には HHIISSTTFFIILLEE  の値が使われま
              す。指定された場合、オプションは以下の意味を持ちます:
              --cc     全てのエントリを削除し、履歴リストをクリアします。
              --dd _o_f_f_s_e_t
                     _o_f_f_s_e_t 番目にある履歴エントリを削除します。
              --aa     「新しい」履歴行 (bbaasshh の現在のセッションの開始以降に入力
                     された履歴行)  を履歴ファイルに追加します。
              --nn     まだ履歴ファイルから読み込んでいない履歴行を 現在の履歴リ
                     ストに読み込みます。  読み込まれるのは、bbaasshh の現在のセッ
                     ションの開始以降に 履歴ファイルに追加された行です。
              --rr     履歴ファイルの内容を読み込み、これらを現在の履歴として用
                     います。
              --ww     現在の履歴を履歴ファイルに書き込みます。履歴ファイルの内
                     容は上書きされます。
              --pp     後に続く _a_r_g_s に対して履歴置換を行い、 その結果を標準出力
                     に表示します。   この結果は履歴リストには格納されません。
                     通常の履歴展開が行われないようにするため、 _a_r_g はそれぞれ
                     クォートしなければなりません。
              --ss     _a_r_g_s を 1 つのエントリとして履歴リストに格納します。 履歴
                     リストの最後のコマンドは、 _a_r_g_s  が追加される前に削除され
                     ます。

              HHIISSTTTTIIMMEEFFOORRMMAATT  変数が設定されていると、履歴エントリのタイムスタ
              ンプの情報は、  履歴のコメント文字を付けて履歴ファイルに書き込ま
              れます。  履歴ファイルを読み込むときに、履歴のコメント文字で始ま
              り直後に数字が続く行は、  直前の履歴行のタイムスタンプとして解釈
              されます。 不正なオプションがある場合、 履歴ファイルの読み書き時
              にエラーが起きた場合、 --dd オプションの引き数として不正な  _o_f_f_s_e_t
              の値が与えられた場合、 --pp オプションの引き数として与えられた履歴
              展開が失敗した場合を除き、 返り値は 0 になります。

       jjoobbss [--llnnpprrss] [ _j_o_b_s_p_e_c ... ]
       jjoobbss --xx _c_o_m_m_a_n_d [ _a_r_g_s ... ]
              最初の形式を実行すると、アクティブなジョブがリスト表示されます。
              オプションは以下の意味を持ちます:
              --ll     通常の情報に加えて、プロセス ID をリスト表示します。
              --nn     ユーザがステータスを最後に通知されて以降に、 ステータスの
                     変更があったジョブに関する情報だけを表示します。
              --pp     そのジョブが属するプロセスグループのリーダーのプロセス ID
                     だけを表示します。
              --rr     実行中のジョブだけを出力します。
              --ss     停止中のジョブだけを出力します。

              _j_o_b_s_p_e_c  が指定された場合、 そのジョブに関する情報だけが出力され
              ます。 不正なオプションがある場合や、不正な _j_o_b_s_p_e_c が与えられた
              場合を除き、返却ステータスは 0 です。

              --xx  オプションが指定されると、  jjoobbss  は  _c_o_m_m_a_n_d  や  _a_r_g_s 中の
              _j_o_b_s_p_e_c を対応するプロセスのグループ ID で置き換え、 _c_o_m_m_a_n_d  に
              _a_r_g_s を与えて実行し、その終了ステータスを返します。

       kkiillll [--ss _s_i_g_s_p_e_c | --nn _s_i_g_n_u_m | --_s_i_g_s_p_e_c] [_p_i_d | _j_o_b_s_p_e_c] ...
       kkiillll --ll [_s_i_g_s_p_e_c | _e_x_i_t___s_t_a_t_u_s]
              _s_i_g_s_p_e_c   または   _s_i_g_n_u_m  で指定されたシグナルを、  _p_i_d  または
              _j_o_b_s_p_e_c で指定されたプロセスに送ります。 _s_i_g_s_p_e_c は、 SSIIGGKKIILLLL の
              ようなシグナル名 (先頭の SSIIGG は省略可能)、またはシグナルの番号で
              す。 _s_i_g_n_u_m  はシグナルの番号です。  _s_i_g_s_p_e_c  が存在しない場合に
              は、 SSIIGGTTEERRMM が指定されたものとします。 引き数に --ll を与えるとシ
              グナル名がリスト表示されます。 --ll と同時に引き数を与えると、  引
              き数に対応するシグナルの名前がリスト表示され、  返却ステータスは
              0 となります。 --ll  に対する引き数  _e_x_i_t___s_t_a_t_u_s  は、  シグナル番
              号、またはシグナルによって終了させられた  プロセスの終了ステータ
              スを指定する数です。 少なくとも  1  つのシグナルを正常に送れた場
              合、  kkiillll は真を返します。 エラーが起きた場合や不正なオプション
              があった場合には、 kkiillll は偽を返します。

       lleett _a_r_g [_a_r_g ...]
              各 _a_r_g は評価を行う算術式です (算算術術式式展展開開 を参照)。  最後の  _a_r_g
              を評価した結果が 0 であれば、 lleett は 1 を返します。 それ以外の場
              合には 0 が返されます。

       llooccaall [_o_p_t_i_o_n] [_n_a_m_e[=_v_a_l_u_e] ...]
              それぞれの引き数に対して  _n_a_m_e  という名前のローカル変数が生成さ
              れ、 _v_a_l_u_e が代入されます。 _o_p_t_i_o_n には、 ddeeccllaarree コマンドに使え
              るオプションが全て使えます。 関数内で llooccaall を使った場合、この変
              数 _n_a_m_e の可視スコープは、この関数とこの関数の子に制限されます。
              オペランドがない場合、 llooccaall  はローカル変数の一覧を標準出力に出
              力します。   関数の内部以外で  llooccaall  を使うとエラーになります。
              llooccaall が関数の外部で使われた場合、  不正な  _n_a_m_e  が与えられた場
              合、  _n_a_m_e が読み取り専用の変数であった場合以外は、 llooccaall の返却
              ステータスは 0 となります。

       llooggoouutt ログインシェルを終了します。

       mmaappffiillee [--nn _c_o_u_n_t] [--OO _o_r_i_g_i_n] [--ss _c_o_u_n_t] [--tt] [--uu  _f_d]  [--CC  _c_a_l_l_b_a_c_k]
       [--cc _q_u_a_n_t_u_m] [_a_r_r_a_y]
       rreeaaddaarrrraayy  [--nn _c_o_u_n_t] [--OO _o_r_i_g_i_n] [--ss _c_o_u_n_t] [--tt] [--uu _f_d] [--CC _c_a_l_l_b_a_c_k]
       [--cc _q_u_a_n_t_u_m] [_a_r_r_a_y]
              標準入力の各行を配列変数 _a_r_r_a_y に読み込みます。 --uu  オプションが
              指定されたときは、ファイル・ディスクリプター  _f_d  から読み込みま
              す。 変数 MMAAPPFFIILLEE がデフォルトの _a_r_r_a_y です。 オプションが指定さ
              れた場合、以下の意味を持ちます:
              --nn     最大  _c_o_u_n_t 行をコピーします。_c_o_u_n_t が 0 であれば、全ての
                     行をコピーします。
              --OO     _a_r_r_a_y のインデックス _o_r_i_g_i_n  から代入を始めます。デフォル
                     トのインデックスは 0 です。
              --ss     最初の _c_o_u_n_t 行を読み捨てます。
              --tt     読み込んだ各行の末尾にある改行文字を削除します。
              --uu     標準入力の代わりにファイル・ディスクリプター  _f_d から行を
                     読み込みます。
              --CC     _q_u_a_n_t_u_m 行が読み込まれるごとに _c_a_l_l_b_a_c_k  を評価します。--cc
                     オプションで _q_u_a_n_t_u_m を指定します。
              --cc     _c_a_l_l_b_a_c_k を呼び出す間隔の行数を指定します。

              --cc  なしで  --CC  が指定されたとき、デフォルトの間隔は 5000 です。
              _c_a_l_l_b_a_c_k が評価されるとき、 次に代入される配列要素のインデックス
              と、        その要素に代入される行が、引き数として与えられます。
              _c_a_l_l_b_a_c_k は、行が読み込まれてから 配列の要素に代入されるまでの間
              に評価されます。

              始点が明示的に指定されない場合、mmaappffiillee は値を代入する前に _a_r_r_a_y
              をクリアします。

              mmaappffiillee は、  不正なオプションやオプション引き数が指定された場合
              や、 _a_r_r_a_y が不正か代入できない場合や、 _a_r_r_a_y がインデックスによ
              る配列でない場合でなければ、 成功の状態を返します。

       ppooppdd [-nn] [+_n] [-_n]
              ディレクトリスタックからエントリを削除します。  引き数がない場合
              には、スタック先頭のディレクトリが削除され、  新しく先頭となった
              ディレクトリへの  ccdd  が実行されます。  引き数が指定された場合に
              は、これは以下の意味を持ちます:
              --nn     スタックからディレクトリを削除する際に、 通常のディレクト
                     リ変更を行いません。 したがって、スタックだけが操作されま
                     す。
              ++_n     ddiirrss  で表示されるリストの左から数えて _n 番目のエントリを
                     削除します。 エントリは 0  から数えます。例えば、  ``popd
                     +0'' は最初のディレクトリを削除し、 ``popd +1'' は 2 番目
                     のディレクトリを削除します。
              --_n     ddiirrss で表示されるリストの右から数えて _n  番目のエントリを
                     削除します。  エントリは  0 から数えます。例えば、 ``popd
                     -0'' は最後のディレクトリを削除し、 ``popd -1''  は最後の
                     1 つ前のディレクトリを削除します。

              ppooppdd  コマンドが成功した場合、 ddiirrss も実行され、返却ステータスは
              0 となります。  ppooppdd  が偽を返すのは、不正なオプションがあった場
              合、 ディレクトリスタックが空の場合、 ディレクトリスタックの存在
              しないエントリが指定された場合、  ディレクトリ変更に失敗した場合
              です。

       pprriinnttff [--vv _v_a_r] _f_o_r_m_a_t [_a_r_g_u_m_e_n_t_s]
              _a_r_g_u_m_e_n_t_s    を整形して標準出力に書き出します。   フォーマットは
              _f_o_r_m_a_t で制御します。 --vv  オプションが与えられると、標準出力に書
              き出す代わりに、 変数 _v_a_r に代入されます。

              _f_o_r_m_a_t  は 3 つのタイプのオブジェクトを含む文字列です。 3 つのオ
              ブジェクトとは、普通の文字 (そのまま標準出力にコピーされる)、 文
              字エスケープシーケンス (変換されて標準出力にコピーされる)、 表示
              フォーマット指定 (_f_o_r_m_a_t の後に続く各引き数 _a_r_g_u_m_e_n_t  の表示を行
              う)、です。  _p_r_i_n_t_f(1)  標準のフォーマット指定以外に、以下の拡張
              フォーマットが使えます。
              %%bb     pprriinnttff は対応する  _a_r_g_u_m_e_n_t  中の  バックスラッシュのエス
                     ケープシーケンスを展開します。   ただし、\\cc  で出力を終了
                     し、\\'', \\"", \\?? のバックスラッシュは削られず、 \\00 で始まる
                     8 進数のエスケープシーケンスは 4 桁までです。
              %%qq     pprriinnttff は対応する _a_r_g_u_m_e_n_t をシェルの入力として再利用でき
                     るフォーマットで出力します。
              %%((_d_a_t_e_f_m_t))TT
                     pprriinnttff は _d_a_t_e_f_m_t を _s_t_r_f_t_i_m_e(3)   の書式文字列として使っ
                     て日付と時刻の文字列を出力します。    対応する   _a_r_g_u_m_e_n_t
                     は、紀元 (1970年 1 月 1 日 00:00:00 UTC)   からの秒数を表
                     す整数値です。_a_r_g_u_m_e_n_t には 2 つの特別な値が使えます。 -1
                     は現在時刻を表します。-2   はシェルが起動した時刻を表しま
                     す。

              文字列でないフォーマット指定に対する引き数は、C の定数として扱わ
              れます。  ただし、先頭のプラスとマイナスの記号は許されます。  ま
              た、先頭の文字がシングルクォートやダブルクォートであれば、  続く
              文字の ASCII コードの値が引き数の値となります。

              _f_o_r_m_a_t は必要に応じて再利用され、  全ての  _a_r_g_u_m_e_n_t_s  を処理しま
              す。  与えられたよりも多くの  _a_r_g_u_m_e_n_t_s を _f_o_r_m_a_t が必要とする場
              合、余分のフォーマット指定は、 0  と空文字列のうち、適切な方が指
              定されたかのように動作します。 成功した場合の返り値は 0 で、失敗
              した場合の返り値は 0 以外です。

       ppuusshhdd [--nn] [+_n] [-_n]
       ppuusshhdd [--nn] [_d_i_r]
              ディレクトリをディレクトリのスタックに追加するか、    スタックを
              ローテートさせます。  このとき、新しいスタックの最も上にあるもの
              を  カレントの作業ディレクトリにします。  引き数を与えなければ、
              一番上の 2 つのディレクトリを交換し、0 を返します。 ただし、ディ
              レクトリスタックが空の場合を除きます。      引き数を与えた場合に
              は、以下の意味を持ちます:
              --nn     ディレクトリをスタックに追加したときに、 通常のディレクト
                     リ変更を行いません。 したがって、スタックだけが操作されま
                     す。
              ++_n     スタックをローテートさせ、_n  番目のディレクトリを一番上に
                     します。  このとき  ddiirrss   が表示するリストは左から数え始
                     め、その左端は 0 となります。
              --_n     スタックをローテートさせ、_n  番目のディレクトリを一番上に
                     します。  このとき  ddiirrss   が表示するリストは右から数え始
                     め、その右端は 0 となります。
              _d_i_r    _d_i_r をディレクトリスタックの一番上に追加し、 そのディレク
                     トリを新しいカレントの作業ディレクトリにします。

              ppuusshhdd コマンドが成功すると、 ddiirrss コマンドも実行されます。 2  番
              目の形式を使った場合、 _d_i_r への cd が失敗しなければ、 ppuusshhdd は 0
              を返します。 最初の形式を使った場合には、 ディレクトリスタックが
              空の場合、    ディレクトリスタックの存在しない要素が指定された場
              合、 指定された新しいカレントディレクトリへの ディレクトリ変更が
              失敗した場合以外は、 ppuusshhdd は基本的には 0 を返します。

       ppwwdd [--LLPP]
              現在の作業ディレクトリの絶対パス名を出力します。 --PP オプションが
              指定された場合や、組み込みコマンド sseett の --oo pphhyyssiiccaall オプション
              が有効になっている場合には、  シンボリックリンクを展開したパス名
              が出力されます。 --LL オプションを使うと、  出力されるパス名にはシ
              ンボリックリンクが含まれているかもしれません。  カレントディレク
              トリの名前を読む際にエラーが起きたり、  不正なオプションが指定さ
              れたりしなければ、返却ステータスは 0 となります。

       rreeaadd [--eerrss] [--aa _a_n_a_m_e] [--dd _d_e_l_i_m] [--ii _t_e_x_t] [--nn _n_c_h_a_r_s] [--NN _n_c_h_a_r_s] [--pp
       _p_r_o_m_p_t] [--tt _t_i_m_e_o_u_t] [--uu _f_d] [_n_a_m_e ...]
              標準入力、  または  --uu  オプションの引き数として指定されたファイ
              ル・ディスクリプター  _f_d から 1 行を読み込み、最初の単語を最初の
              _n_a_m_e に代入し、2 番目の単語を 2 番目の _n_a_m_e に代入します。以降も
              同様です。  余った単語とそれらの間の区切り文字は、最後の _n_a_m_e に
              代入されます。 _n_a_m_e よりも標準入力から読み込んだ単語の方が少ない
              場合には、  余っている _n_a_m_e には空文字列が値として代入されます。
              IIFFSS  中の文字が、行を単語に分割するために使われます。   バックス
              ラッシュ文字 (\\) を使うと、 次に読み込んだ文字の特殊な意味を消し
              たり、行を連結したりできます。  オプションが与えられていれば、以
              下の意味を持ちます:
              --aa _a_n_a_m_e
                     単語を配列変数  _a_n_a_m_e  にインデックス順に代入します。イン
                     デックスは  0  から始まります。  新しい値が代入される前に
                     _a_n_a_m_e は削除されます。他の _n_a_m_e 引き数は無視されます。
              --dd _d_e_l_i_m
                     改行ではなく、_d_e_l_i_m  の最初の文字が、入力行を終了するため
                     に使われます。
              --ee     標準入力を端末から読み込む場合、     rreeaaddlliinnee     (前述の
                     RREEAADDLLIINNEE  ラライイブブララリリ のセクションを参照) を使って行を取得
                     します。 readline は現在の  (行編集がそれまで有効になって
                     いなければデフォルトの)  編集設定を使います。
              --ii _t_e_x_t
                     行を取得するのに  rreeaaddlliinnee が使われるとき、入力を開始する
                     前に編集バッファに _t_e_x_t が置かれます。
              --nn _n_c_h_a_r_s
                     組み込みコマンド rreeaadd は、 入力行全体が読み込まれるのを待
                     たず、   _n_c_h_a_r_s   文字を読み込んだ時点で戻ります。   ただ
                     し、_n_c_h_a_r_s 文字が読み込まれる前に区切り文字が現われたとき
                     は、 区切り文字を優先します。
              --NN _n_c_h_a_r_s
                     入力行全体が読み込まれるのを待たず、  _n_c_h_a_r_s 文字を読み込
                     んだ時点で戻ります。 ただし、入力に EOF  が現れたときや、
                     rreeaadd  がタイムアウトになったときを除きます。 入力に区切り
                     文字が現れても特別扱いはせず、 _n_c_h_a_r_s  文字を読み込むまで
                     は rreeaadd が戻ることはありません。
              --pp _p_r_o_m_p_t
                     入力を読み込もうとする前に標準エラー出力に  _p_r_o_m_p_t を表示
                     します。 末尾に改行は付きません。  プロンプトが表示される
                     のは、入力を端末から読み込む場合だけです。
              --rr     バックスラッシュはエスケープ文字として作用しません。 バッ
                     クスラッシュは行の一部とみなされます。 特に、バックスラッ
                     シュと改行の組み合わせを使って 複数の行を接続することはで
                     きません。
              --ss     静かな (silent)  モード。端末に入力が行われても、文字はエ
                     コーされません。
              --tt _t_i_m_e_o_u_t
                     入力行全体が _t_i_m_e_o_u_t 秒以内で読み込まれない場合、 rreeaadd を
                     タイムアウトさせて、失敗の状態を返します。 _t_i_m_e_o_u_t は小数
                     部を持つ十進数でもかまいません。  このオプションは、 rreeaadd
                     が入力を端末やパイプ、その他の特殊ファイルから 読み込んで
                     いる場合にのみ効果があります。 通常のファイルから読み込ん
                     でいる場合には影響ありません。  _t_i_m_e_o_u_t   が   0   のとき
                     は、rreeaadd  は指定したファイル・ディスクリプター から読み込
                     める状態であれば成功の状態を返し、そうでなければ失敗の状
                     態を返します。 タイムアウト時間を超えた場合、終了ステータ
                     スは 128 より大きい値になります。
              --uu _f_d  ファイル・ディスクリプター _f_d から入力を読み込みます。

              _n_a_m_e が全く与えられていない場合、読み込まれた行は変数 RREEPPLLYY に代
              入されます。  ファイル末尾に到達した場合、 rreeaadd がタイムアウトし
              た場合  (この場合には終了ステータスは  128  より大きい値になりま
              す)、  --uu の引き数として不正なファイル・ディスクリプターが指定し
              た場合以外は、 終了コードは 0 です。

       rreeaaddoonnllyy [--aaAAff] [--pp] [_n_a_m_e[=_w_o_r_d] ...]
              指定された _n_a_m_e に読み込み専用の印を付けます。  それ以降は、これ
              らの _n_a_m_e の値を変更することはできません。 --ff オプションを与えた
              場合、_n_a_m_e に対応する関数に同様の印が付きます。 --aa  オプションを
              与えると、配列変数だけが対象となります。  --AA  オプションを与える
              と、連想配列変数だけが対象となります。  両方のオプションを与える
              と、 --AA が優先されます。 _n_a_m_e 引き数が全く与えられてない場合、ま
              たは --pp オプションが与えられた場合、読み込み専用の名前全ての一覧
              が出力されます。  ほかのオプションを合わせて指定すると、出力を読
              み込み専用の名前の一部に限定します。 --pp オプションを使うと、  入
              力として再利用できるようなフォーマットで出力が行われます。  変数
              名に =_w_o_r_d が続くと、変数の値に _w_o_r_d が設定されます。 返却ステー
              タスは基本的に 0 ですが、 無効なオプションがあった場合、 _n_a_m_e の
              いずれかが有効なシェル変数名でなかった場合、 --ff オプションの際に
              関数でない _n_a_m_e を与えた場合は除きます。

       rreettuurrnn [_n]
              指定した返り値  _n  で関数を終了させます。 _n を省略すると、返却ス
              テータスは  関数内で最後に実行したコマンドの返却ステータスになり
              ます。  関数の外側で使われているが、 .. (ssoouurrccee) コマンドによるス
              クリプトの実行中である場合、    シェルはそのスクリプトの実行を止
              め、  _n またはスクリプト内で最後に実行されたコマンドの終了ステー
              タスを スクリプトの終了ステータスとして返します。 関数の外側で ..
              によるスクリプトの実行中以外に使われた場合、  返却ステータスは偽
              となります。 関数やスクリプトから実行が戻る前に、 RREETTUURRNN  トラッ
              プ に設定されたコマンドが実行されます。

       sseett [----aabbeeffhhkkmmnnppttuuvvxxBBCCEEHHPPTT] [--oo _o_p_t_i_o_n_-_n_a_m_e] [_a_r_g ...]
       sseett [++aabbeeffhhkkmmnnppttuuvvxxBBCCEEHHPPTT] [++oo _o_p_t_i_o_n_-_n_a_m_e] [_a_r_g ...]
              オプションなしの場合は、シェル変数全ての名前と値の組が表示されま
              す。 表示は、現在設定されている変数を設定や再設定をする入力 とし
              て再利用できるフォーマットで行われます。  読み込み専用の変数は再
              設定できません。 _p_o_s_i_x _モ_ー_ド ではシェル変数だけが表示されます。
              出力は現在のロケールに従ってソートされます。  オプションが指定さ
              れている場合、  オプションはシェルの属性を設定または解除します。
              オプションが処理された後に残っている引き数があれば、  これは位置
              パラメータの値として扱われ、 $$11, $$22, ...... $$_n の順に代入されます。
              オプションが指定されていれば、以下の意味を持ちます:
              --aa      値を変更したり新規に設定したりした変数および関数が、 (こ
                      れ以降に実行するコマンドの)  環境として   自動的にエクス
                      ポートされます。
              --bb      終了したバックグラウンドジョブのステータス報告を、  次の
                      プライマリプロンプトの前ではなく、即座に行います。  これ
                      はジョブ制御が有効な場合に限り有効です。
              --ee      _パ_イ_プ_ラ_イ_ン  (1  つの _単_純_な_コ_マ_ン_ド からなるものでもよ
                      い)、 括弧で囲まれた  _サ_ブ_シ_ェ_ル  のコマンド、  ブレース
                      (前述の  シシェェルルのの文文法法 を参照) で囲まれたコマンドのリスト
                      の一部として実行されたコマンドの 1 つ が 0  でないステー
                      タスで終了した場合、即座に終了します。  ただし、失敗した
                      コマンドが、キーワード wwhhiillee または uunnttiill の直後のコマン
                      ドの一部である場合、予約語 iiff または eelliiff に続く条件式の
                      一部である場合、 &&&& または |||| によるコマンドのリストの一
                      部である場合 (最後の &&&& や |||| の後のコマンドを除く)、 パ
                      イプラインの中の最後のコマンド以外である、  コマンドの返
                      り値が  !! で反転されている場合、のいずれかであれば、シェ
                      ルは終了しません。 EERRRR  に対するトラップが設定されていれ
                      ば、シェルが終了する前に実行されます。  このオプションは
                      シェルの環境と各サブシェルの環境に別々に適用され (前述の
                      ココママンンドド実実行行環環境境  を参照)、 サブシェルはサブシェル内の全
                      てのコマンドを実行する前に終了するかもしれません。
              --ff      パス名展開を無効にします。
              --hh      実行時に参照できるようにコマンドの位置を記憶します。  こ
                      れはデフォルトで有効になっています。
              --kk      コマンド名の前にある代入文だけでなく、  引数として指定さ
                      れた全て代入文も、  そのコマンドに対する環境変数に追加さ
                      れます。
              --mm      監視モード。ジョブ制御は有効になります。ジョブ制御 (前述
                      の ジジョョブブ制制御御 セクションを参照) をサポートしているシステ
                      ム上の対話的シェルでは、  このオプションはデフォルトで有
                      効です。  別のプロセスグループで実行されたバックグラウン
                      ドプロセスと、  これらの終了ステータスが書かれた行が、プ
                      ロセスの終了時に表示されます。
              --nn      コマンドを読み込みますが実行はしません。    これを使うと
                      シェルスクリプトの文法エラーをチェックできます。  このオ
                      プションは対話的シェルでは無視されます。
              --oo _o_p_t_i_o_n_-_n_a_m_e
                      _o_p_t_i_o_n_-_n_a_m_e には、以下のいずれかを指定できます:
                      aalllleexxppoorrtt
                              --aa と同じです。
                      bbrraacceeeexxppaanndd
                              --BB と同じです。
                      eemmaaccss   emacs 形式のコマンド行編集インタフェースを使いま
                              す。  これはシェルが対話的な場合には、デフォルト
                              で有効です。 ただし、 ----nnooeeddiittiinngg オプション付き
                              でシェルを実行した場合は除きます。  これは、rreeaadd
                              --ee での編集インタフェースにも影響します。
                      eerrrreexxiitt --ee と同じです。
                      eerrrrttrraaccee
                              --EE と同じです。
                      ffuunnccttrraaccee
                              --TT と同じです。
                      hhaasshhaallll --hh と同じです。
                      hhiisstteexxppaanndd
                              --HH と同じです。
                      hhiissttoorryy コマンド履歴を有効にします。コマンド履歴について
                              は  履履歴歴  セクションで説明しています。  このオプ
                              ションは、対話的シェルではデフォルトで有効です。
                      iiggnnoorreeeeooff
                              シェルコマンドの ``IGNOREEOF=10'' を実行した場合
                              と同じ効果を持ちます   (前述の  シシェェルル変変数数  を参
                              照)。
                      kkeeyywwoorrdd --kk と同じです。
                      mmoonniittoorr --mm と同じです。
                      nnoocclloobbbbeerr
                              --CC と同じです。
                      nnooeexxeecc  --nn と同じです。
                      nnoogglloobb  --ff と同じです。
                      nnoolloogg   現在は無視されます。
                      nnoottiiffyy  --bb と同じです。
                      nnoouunnsseett --uu と同じです。
                      oonneeccmmdd  --tt と同じです。
                      pphhyyssiiccaall
                              --PP と同じです。
                      ppiippeeffaaiill
                              設定されている場合、パイプラインの返り値は、   0
                              以外のステータスで終了した最後の (一番右の) コマ
                              ンドの値になります。  パイプラインの全てのコマン
                              ドが成功の状態で終了すると 0 になります。 このオ
                              プションは、デフォルトで無効です。
                      ppoossiixx   bbaasshh の動作のうち、デフォルトの振舞いが POSIX 標
                              準と異なる部分を、POSIX 標準に準拠するように変更
                              します (_p_o_s_i_x _モ_ー_ド)。
                      pprriivviilleeggeedd
                              --pp と同じです。
                      vveerrbboossee --vv と同じです。
                      vvii      vi    形式のコマンド行編集インタフェースを使いま
                              す。  これは、rreeaadd --ee での編集インタフェースにも
                              影響します。
                      xxttrraaccee  --xx と同じです。
                      _o_p_t_i_o_n_-_n_a_m_e なしで --oo オプションを与えた場合、現在のオプ
                      ションが出力されます。  _o_p_t_i_o_n_-_n_a_m_e なしで ++oo オプション
                      を与えた場合、現在のオプション設定を再生成する sseett  コマ
                      ンドの列が標準出力に出力されます。
              --pp      _特_権  _(_p_r_i_v_i_l_e_g_e_d_) モードを有効にします。 このモードでは
                      $$EENNVV と $$BBAASSHH__EENNVV ファイルは処理されず、シェル関数は環境
                      から継承されず、 SSHHEELLLLOOPPTTSS, BBAASSHHOOPPTTSS, CCDDPPAATTHH, GGLLOOBBIIGGNNOORREE
                      環境変数は定義されていても無視されます。  実ユーザ   (グ
                      ループ) ID と異なる実効ユーザ (グループ) ID でシェルが起
                      動され、 かつ --pp オプションが与えられていない場合、 これ
                      らの動作が行われ、実効ユーザ ID には実ユーザ ID が設定さ
                      れます。 起動時に --pp  オプションが与えられた場合、  実効
                      ユーザ  ID は再設定されません。 このオプションを無効にす
                      ると、 実効ユーザ ID と実効グループ ID  には、  実ユーザ
                      ID と 実グループ ID が設定されます。
              --tt      コマンドを 1 つ読み込み、実行してから終了します。
              --uu      パラメータ展開の実行中に、特殊パラメータ "@" と "*" 以外
                      で  設定されていない変数やパラメータをエラーとして扱いま
                      す。  設定されていない変数やパラメータを展開しようとした
                      場合、 シェルはエラーメッセージを出力します。 シェルが対
                      話的でなければ、0 でないステータスで終了します。
              --vv      シェルの入力行を、読み込んだ際に表示します。
              --xx      _単_純_な_コ_マ_ン_ド、ffoorr  コマンド、ccaassee コマンド、 sseelleecctt コ
                      マンド、算術 ffoorr コマンドをそれぞれ展開した後、 PPSS44 を展
                      開した値を表示し、その後にそのコマンドと展開した引き数
                      や、 結び付いた単語のリストを表示します。
              --BB      シェルはブレース展開 (前述の ブブレレーースス展展開開 を参照) を実行
                      します。これはデフォルトで有効です。
              --CC      設定されている場合、 bbaasshh はリダイレクト演算子 >>, >>&&, <<>>
                      で既存のファイルを上書きしません。      上書きができるの
                      は、リダイレクト演算子  >>||  を  >> の代わりに使ったときで
                      す。
              --EE      設定されている場合、EERRRR のトラップは、  シェル関数、コマ
                      ンド置換、サブシェル環境で実行されるコマンド  に継承され
                      ます。 通常、このような場面では EERRRR のトラップは継承され
                      ません。
              --HH      !!  形式の履歴置換を有効にします。 このオプションは、シェ
                      ルが対話的なときにはデフォルトで有効です。
              --PP      設定されている場合、 ccdd のような現在の作業ディレクトリを
                      変更するコマンドを実行するときに、  シェルはシンボリック
                      リンクを辿りません。  代わりに物理的ディレクトリ構造が使
                      われます。  デフォルトでは、 bbaasshh がカレントディレクトリ
                      を変更するコマンドを実行する際には、  ディレクトリの論理
                      的な接続が辿られます。
              --TT      設定されている場合、DDEEBBUUGG  と RREETTUURRNN のトラップは、 シェ
                      ル関数、コマンド置換、サブシェル環境で実行されるコマンド
                      に継承されます。   通常、このような場面では   DDEEBBUUGG   と
                      RREETTUURRNN のトラップは継承されません。
              ----      このオプションの後に引き数が続いていない場合には、  位置
                      パラメータの設定が取り消されます。  引き数が続いている場
                      合には、位置パラメータに _a_r_g が設定されます。 _a_r_g  に  --
                      で始まるものが含まれていても、  オプションではなく位置パ
                      ラメータとして扱われます。
              --       オプションの終わりを示します。 残りの _a_r_g は全て位置パラ
                      メータに代入されます。 --xx オプションと --vv オプションは無
                      効になります。 _a_r_g  がない場合には、位置パラメータの内容
                      は変化しません。

              特に断らない限り、各オプションはデフォルトで無効になっています。
              - の代わりに + を使うと、これらのオプションは無効になります。 オ
              プションはシェルを起動する際の引き数としても指定できます。  現在
              のオプションの集合は、 $$-- で知ることができます。  不正なオプショ
              ンが無ければ、終了ステータスは必ず真となります。

       sshhiifftt [_n]
              _n+1  ... からの位置パラメータの名前を変え、 $$11 ...... とします。 $$##
              から $$##-_n+1 までの数字で表される パラメータは unset されます。 _n
              は  0 以上 $$## 以下の数でなければなりません。 _n が 0 ならば、どの
              パラメータも変更されません。 _n が与えられない場合には、1  が指定
              されたものとみなされます。  _n が $$## より大きい場合、位置パラメー
              タは変化しません。 _n が $$## より大きい場合や  0  より小さい場合に
              は、  返却ステータスは 0 より大きい数になります。 それ以外の場合
              には 0 になります。

       sshhoopptt [--ppqqssuu] [--oo] [_o_p_t_n_a_m_e ...]
              シェルのオプション動作を制御する変数の値をトグルさせます。  オプ
              ションがない場合や、  --pp オプションが指定されている場合には、 設
              定可能なオプション全てのリストが表示されます。  表示の際には、そ
              れぞれが設定されているかどうかも示されます。    オプションの表示
              は、入力として再利用できるフォーマットで行われます。  その他のオ
              プションは、以下の意味を持っています:
              --ss     _o_p_t_n_a_m_e をそれぞれ有効にします (設定します)。
              --uu     _o_p_t_n_a_m_e をそれぞれ無効にします (設定解除します)。
              --qq     通常の出力を止めます   (静かなモード)。  返却ステータスは
                     _o_p_t_n_a_m_e    が設定されているかどうかを示します。    複数の
                     _o_p_t_n_a_m_e  引き数と  --qq  が指定されている場合には、  全ての
                     _o_p_t_n_a_m_e_s  が有効であるときに返却ステータスが  0  となりま
                     す。 それ以外のときには、0 でない値となります。
              --oo     _o_p_t_n_a_m_e の値を、組み込みコマンド sseett の --oo オプションで定
                     義されているものに制限します。

              引き数 _o_p_t_n_a_m_e なしで --ss オプションまたは --uu  オプションを使った
              場合、それぞれ設定されているもの、  または設定されていないものだ
              けに表示が限定されます。 特に断らない限り、sshhoopptt オプションは デ
              フォルトで無効 (設定解除) になっています。

              オプションをリスト表示したときの返却ステータスは、        全ての
              _o_p_t_n_a_m_e_s が有効になっている場合は 0 となります。  それ以外の場合
              には 0 でない値となります。 設定または設定取り消しのオプションの
              ときには、 _o_p_t_n_a_m_e  が不正なシェルオプションでなければ、  返却ス
              テータスは 0 となります。

              sshhoopptt オプションのリストを以下に示します:

              aauuttooccdd  設定されている場合、ディレクトリの名前のコマンド名は、
                      それが ccdd コマンドの引き数に指定されたものとして実行され
                      ます。    このオプションが使われるのは対話的シェルだけで
                      す。
              ccddaabbllee__vvaarrss
                      設定されている場合、組み込みコマンド ccdd への引き数でディ
                      レクトリでないものは変数の名前とみなされ、  その値が変更
                      先のディレクトリとなります。
              ccddssppeellll 設定されている場合、 ccdd コマンドのディレクトリ要素におけ
                      るスペルのちょっとした誤りは修正されます。  チェックされ
                      る誤りは、文字の入れ替わり・文字の欠け・ 1  文字余分にあ
                      ることです。  訂正できた場合には、訂正後のファイル名が表
                      示され、 コマンドは続けて実行されます。 このオプションが
                      使われるのは対話的シェルだけです。
              cchheecckkhhaasshh
                      設定されている場合、 bbaasshh はハッシュ表で見つけたコマンド
                      を実行する前に  実際に存在するかどうかをチェックします。
                      ハッシュされているコマンドが既になくなっている場合、  通
                      常のパス検索が行われます。
              cchheecckkjjoobbss
                      設定されている場合、bbaasshh  は対話的シェルが終了する前に、
                      停止中のジョブや実行中のジョブの状態を一覧します。  実行
                      中のジョブがあれば、シェルの終了は、  間にほかのコマンド
                      を挟まずに  2 回目の終了が試みられるまで延期されます (前
                      述の   ジジョョブブ制制御御   を参照)。   停止中のジョブがある場合
                      は、シェルは常に終了を延期します。
              cchheecckkwwiinnssiizzee
                      設定されている場合、bbaasshh  はコマンドの実行後に毎回ウィン
                      ドウの大きさをチェックし、 必要に応じて LLIINNEESS と CCOOLLUUMMNNSS
                      の値を更新します。
              ccmmddhhiisstt 設定されている場合、 bbaasshh は複数行に分かれているコマンド
                      の全ての行を、 同じ履歴エントリに保存しようとします。 こ
                      れを使うと、複数行に分かれているコマンドの再編集が容易に
                      なります。
              ccoommppaatt3311
                      設定されている場合、 bbaasshh は、条件コマンド [[[[ の ==~~ 演算
                      子のクォートされた引き数に関して bash version 3.1 の動作
                      に変更します。
              ccoommppaatt3322
                      設定されている場合、 bbaasshh は、条件コマンド [[[[ の <<  演算
                      子と   >>  演算子によるロケール固有の文字列比較に関して、
                      version 3.2 の動作に変更します。 bash の bash-4.1 より前
                      のバージョンでは、ASCII コードの照合と _s_t_r_c_m_p(3)  を使い
                      ます。 bash-4.1 およびそれ以後のバージョンでは、  現在の
                      ロケールの照合順序と _s_t_r_c_o_l_l(3)  を使います。
              ccoommppaatt4400
                      設定されている場合、  bbaasshh は、条件コマンド [[[[ の << 演算
                      子と >> 演算子によるロケール固有の文字列比較 (前項を参照)
                      とコマンドリストの解釈の効果に関して、  version 4.0 の動
                      作に変更します。
              ccoommppaatt4411
                      設定されている場合、 bbaasshh は posix モードのときに、 ダブ
                      ルクォートの中のパラメータ展開で  シングルクォートを特殊
                      文字として扱います。  シングルクォートは対応が取れている
                      (偶数個) 必要があり、 シングルクォートの間の文字はクォー
                      トされているものとして扱われます。 これは version 4.1 の
                      posix  モードの動作です。  bash のデフォルトの動作は前の
                      バージョンのままです。
              ddiirrssppeellll
                      設定されている場合、 bbaasshh は  指定されたディレクトリ名が
                      存在しなければ、  単語補完のときにディレクトリ名のスペル
                      の訂正を試みます。
              ddoottgglloobb 設定されている場合、 bbaasshh は `.'  で始まるファイル名をパ
                      ス名展開の結果に含めます。
              eexxeeccffaaiill
                      設定されている場合、  組み込みコマンド eexxeecc への引き数と
                      して指定されたファイルが実行できなくても、  対話的でない
                      シェルが終了しません。  対話的シェルは eexxeecc に失敗しても
                      終了しません。
              eexxppaanndd__aalliiaasseess
                      設定されている場合、エイリアスが前述の  エエイイリリアアスス  セク
                      ションで説明したように展開されます。      このオプション
                      は、対話的なシェルではデフォルトで有効です。
              eexxttddeebbuugg
                      設定されている場合、デバッガのための動作が有効になりま
                      す。
                      11..     組み込みコマンド  ddeeccllaarree の --FF オプションが、 引
                             き数で指定された各関数のソースファイル名と行番号
                             を表示します。
                      22..     DDEEBBUUGG のトラップで実行されたコマンドが 0 以外を返
                             したとき、 次のコマンドはスキップされ実行もされま
                             せん。
                      33..     DDEEBBUUGG   のトラップで実行されたコマンドが  2  を返
                             し、かつ、 シェルがサブルーチン (シェル関数や、組
                             み込みコマンドの .. や ssoouurrccee により実行されたシェ
                             ルスクリプト)  を実行しているとき、rreettuurrnn  の呼び
                             出しがシミュレートされます。
                      44..     上記のシェル変数の説明で述べたように、  BBAASSHH__AARRGGCC
                             と BBAASSHH__AARRGGVV が更新されます。
                      55..     関数のトレースが有効になります。       コマンド置
                             換、シェル関数、((  _c_o_m_m_a_n_d )) で起動されたサブシェ
                             ルは、 DDEEBBUUGG と RREETTUURRNN のトラップを継承します。
                      66..     エラーのトレースが有効になります。     コマンド置
                             換、シェル関数、((  _c_o_m_m_a_n_d  ))  から起動されたサブ
                             シェルは、 EERRRR のトラップを継承します。
              eexxttgglloobb 設定されている場合、拡張されたパターンマッチング機能が有
                      効になります。  これについては、前述のパパスス名名展展開開で説明し
                      ています。
              eexxttqquuoottee
                      設定されている場合、ダブルクォート中の $${{_p_a_r_a_m_e_t_e_r}} の展
                      開で、$$'_s_t_r_i_n_g' と $$"_s_t_r_i_n_g" のクォートが機能します。 こ
                      のオプションは、デフォルトで有効です。
              ffaaiillgglloobb
                      設定されている場合、パス名展開でパターンがファイル名の
                      マッチに失敗すると、 展開エラーになります。
              ffoorrccee__ffiiggnnoorree
                      設定されている場合、単語補完において、シェル変数 FFIIGGNNOORREE
                      で指定されたサフィックスの単語は無視されます。  無視され
                      た単語が唯一の補完候補であったとしても無視されます。  詳
                      しい説明については、前述の シシェェルル変変数数 の FFIIGGNNOORREE  の説明
                      を参照してください。  このオプションは、デフォルトで有効
                      です。
              gglloobbssttaarr
                      設定されている場合、****  というパターンがパス名展開で使わ
                      れると、 深さ 0 以上のディレクトリやサブディレクトリの全
                      てのファイルにマッチします。 直後に  //  が続く場合には、
                      ディレクトリとサブディレクトリのみにマッチします。
              ggnnuu__eerrrrffmmtt
                      設定されている場合、シェルのエラーメッセージは  GNU 標準
                      のエラーメッセージの形式で出力されます。
              hhiissttaappppeenndd
                      設定されている場合、シェルの終了時に変数 HHIISSTTFFIILLEE の値で
                      指定しているファイルに履歴リストが追加されます。  ファイ
                      ルへの上書きは行われなくなります。
              hhiissttrreeeeddiitt
                      この変数が設定されており、かつ rreeaaddlliinnee が使われている場
                      合、ユーザは失敗した履歴置換を再編集できます。
              hhiissttvveerriiffyy
                      この変数が設定されており、かつ rreeaaddlliinnee が使われている場
                      合、履歴置換の結果は即座にはシェルのパーザに渡されませ
                      ん。  その代わり、結果として得られた行は rreeaaddlliinnee の編集
                      バッファに読み込まれ、さらに修正できます。
              hhoossttccoommpplleettee
                      この変数が設定されており、かつ rreeaaddlliinnee が使われている場
                      合、bbaasshh は @@ を含む単語を補完するときにホスト名補完を実
                      行しようとします (前述の RREEAADDLLIINNEE ラライイブブララリリ  のセクショ
                      ンにおける 補補完完 を参照)。 これはデフォルトで有効になって
                      います。
              hhuuppoonneexxiitt
                      設定されている場合、bbaasshh  は対話的なログインシェルを終了
                      するときに、 全てのジョブに SSIIGGHHUUPP を送ります。
              iinntteerraaccttiivvee__ccoommmmeennttss
                      設定されている場合、  ## で始まる単語について、その単語と
                      その行の残りの文字を  対話的シェルに無視させることができ
                      ます (前述の ココメメンントト セクションを参照)。 このオプション
                      はデフォルトで有効になっています。
              llaassttppiippee
                      設定されており、かつジョブ制御が有効でなければ、  シェル
                      はバックグラウンドでの実行ではないパイプラインの最後のコ
                      マンドを 現在のシェル環境で実行します。
              lliitthhiisstt 設定されており、かつ ccmmddhhiisstt オプションが有効ならば、 複
                      数行に分かれているコマンドは (セミコロンで区切られるので
                      はなく) できる限り途中に改行を埋め込むことで履歴に保存さ
                      れます。
              llooggiinn__sshheellll
                      シェルがログインシェルとして起動されると         (前述の
                      IINNVVOOCCAATTIIOONN を参照)、このオプションが設定されます。  この
                      値を変更することはできません。
              mmaaiillwwaarrnn
                      設定されており、かつ bbaasshh がメールのチェックに使うファイ
                      ルが  前回のチェック以降にアクセスされている場合、  メッ
                      セージ “The mail in _m_a_i_l_f_i_l_e has been read” が表示されま
                      す。
              nnoo__eemmppttyy__ccmmdd__ccoommpplleettiioonn
                      設定されており、かつ rreeaaddlliinnee が使われている場合、  空行
                      に対してコマンド補完をさせようとしたときに、 bbaasshh は補完
                      候補を PPAATTHH から検索しません。
              nnooccaasseegglloobb
                      設定されている場合、 bbaasshh はパス名展開 (前述の  パパスス名名展展
                      開開 を参照) を行うときに、 ファイル名の大文字と小文字を区
                      別せずにマッチングを行います。
              nnooccaasseemmaattcchh
                      設定されている場合、 bbaasshh は条件コマンド ccaassee や [[[[ 実行
                      時のパターンマッチで    大文字小文字を区別せずにパターン
                      マッチを行います。
              nnuullllgglloobb
                      設定されている場合、 bbaasshh はどのファイルにもマッチしない
                      パターン (前述の パパスス名名展展開開 を参照) を、その文字列自身で
                      はなく、空文字列に展開します。
              pprrooggccoommpp
                      設定されている場合、プログラム補完機能 (前述のププロロググララムム
                      補補完完を参照)  が有効になります。 このオプションはデフォル
                      トで有効になっています。
              pprroommppttvvaarrss
                      設定されている場合、 プロンプト文字列に対して パラメータ
                      展開、コマンド置換、算術式展開、クォート削除  が行われま
                      す。 この展開は前述の ププロロンンププトト  セクションで説明した展
                      開が行われた後に行われます。  このオプションはデフォルト
                      で有効になっています。
              rreessttrriicctteedd__sshheellll
                      シェルが制限モードで起動された場合、  このオプションが設
                      定されます  (後述の 制制限限付付ききののシシェェルル セクションを参照)。
                      この値を変更することはできません。  これは起動ファイルが
                      実行されるときにもリセットされないので、  シェルが制限付
                      きかどうかを起動ファイル内部で知ることができます。
              sshhiifftt__vveerrbboossee
                      設定されている場合、組み込みコマンド sshhiifftt  においてシフ
                      トの回数が位置パラメータの数を超えると、  エラーメッセー
                      ジが出力されます。
              ssoouurrcceeppaatthh
                      設定されている場合、組み込みコマンド ssoouurrccee (..) は  PPAATTHH
                      の値を使って、引き数として与えられたファイルを含むディレ
                      クトリを探します。    このオプションはデフォルトで有効で
                      す。
              xxppgg__eecchhoo
                      設定されている場合、 組み込みコマンド eecchhoo は デフォルト
                      でバックスラッシュによるエスケープシーケンスを展開しま
                      す。

       ssuussppeenndd [--ff]
              SSIIGGCCOONNTT シグナルを受け取るまで、シェルの実行をサスペンドします。
              ログインシェルはサスペンドできません。   --ff   オプションを与える
              と、この動作が上書きされ、ログインシェルがサスペンド  できるよう
              になります。 シェルがログインシェルかつ --ff  が与えられていない場
              合と、ジョブ制御が有効でない場合とを除いて、  返却ステータスは 0
              です。

       tteesstt _e_x_p_r
       [[ _e_x_p_r ]]
              条件式 _e_x_p_r を評価した結果に基づいて、ステータス 0 または 1 を返
              します。  演算子とオペランドそれぞれは別々の引き数でなければなり
              ません。 式は前述の 条条件件式式  セクションで説明したプライマリで構成
              されます。  tteesstt はオプションを受け取らず、 引き数 ---- をオプショ
              ンの終わりを示すものとして受け取りも無視もしません。

              式は次に示す演算子を使って結合できます。  優先度の高い順に示しま
              す。 式の評価は後で述べるように引き数の数に依存します。 引き数が
              5 つ以上のときは演算子の優先度に従います。
              !! _e_x_p_r _e_x_p_r が偽ならば真になります。
              (( _e_x_p_r ))
                     _e_x_p_r の値を返します。  これを使うと、通常の演算子の優先度
                     を変更できます。
              _e_x_p_r_1 -aa _e_x_p_r_2
                     _e_x_p_r_1 と _e_x_p_r_2 が両方とも真ならば真になります。
              _e_x_p_r_1 -oo _e_x_p_r_2
                     _e_x_p_r_1 と _e_x_p_r_2 のいずれかが真ならば真になります。

              tteesstt  および [[ は、 引き数の数に基づいた規則の集合を用いて条件式
              を評価します。

              引き数が 0 個
                     この式は偽です。
              引き数が 1 個
                     引き数が空でない場合に限り真になります。
              引き数が 2 個
                     最初の引き数が !! ならば、 2  番目の引き数が空の場合に限り
                     真になります。 最初の引き数が、既に 条条件件式式 セクションで説
                     明した単項条件演算子のいずれかであれば、 単項の評価が真の
                     場合に式は真となります。 最初の引き数が正しい単項条件演算
                     子でなければ、式は偽となります。
              引き数が 3 個
                     以下の順に条件が適用されます。 2 番目の引き数が、既に  条条
                     件件式式   セクションで説明した二値条件演算子のいずれかであれ
                     ば、 最初の引き数と 3  番目の引き数をオペランドとして使っ
                     た 二値評価の結果が式の結果となります。 引き数が 3 個の場
                     合、 --aa と --oo は二値演算子として扱われます。 最初の引き数
                     が !! であれば、2 番目と 3 番目の引き数を使った、 引き数 2
                     つの評価の結果を否定したものが値となります。 最初の引き数
                     が (( であり、3 番目の引き数が )) ならば、 2 番目の引き数を
                     使って引き数 1 つの評価を行った値が結果となります。  これ
                     ら以外の場合には、式は偽となります。
              引き数が 4 個
                     最初の引き数が !! ならば、 残りの引き数で作った引き数 3 つ
                     の式の値を否定したものが結果となります。 それ以外の場合に
                     は、先に挙げた規則を使った優先度に従って 式が展開・評価さ
                     れます。
              引き数が 5 個以上
                     先に挙げた規則を使った優先度に従って式が展開・評価されま
                     す。

              tteesstt  や  [[  では、演算子 << と >> は ASCII コードに基づき辞書順に
              ソートします

       ttiimmeess  シェルとシェルから実行したプロセスのそれぞれについて、    累積の
              ユーザ時間とシステム時間を加えたものを出力します。  返却ステータ
              スは 0 です。

       ttrraapp [--llpp] [[_a_r_g] _s_i_g_s_p_e_c ...]
              シェルがシグナル _s_i_g_s_p_e_c を受け取ると、コマンド _a_r_g が読み込まれ
              て、実行されます。 _a_r_g が存在しない (かつ _s_i_g_s_p_e_c が一つ指定され
              た) 場合か、 _a_r_g が -- の場合、  指定されたシグナルは全てオリジナ
              ルの動作 (シェルの起動時に設定されていた値) にリセットされます。
              _a_r_g が空文字列である場合、それぞれの _s_i_g_s_p_e_c  で指定されたシグナ
              ルは、 シェルとシェルが起動したコマンドから無視されます。 _a_r_g な
              しで --pp オプションが与えられた場合、 各 _s_i_g_s_p_e_c に関連付けられた
              trap コマンドが表示されます。 引き数が全くないか、 --pp だけが与え
              られた場合、 ttrraapp は各シグナルに関連付けられたコマンドのリストを
              出力します。  --ll オプションを与えると、 シェルはシグナル名と対応
              する番号のリストを出力します。 それぞれの _s_i_g_s_p_e_c は、<_s_i_g_n_a_l_._h>
              で定義されているシグナル名、またはシグナル番号です。  シグナル名
              は大文字小文字は区別されず、先頭の SSIIGG は省略可能です。

              _s_i_g_s_p_e_c が EEXXIITT (0) であれば、シェルの終了時にコマンド _a_r_g  が実
              行されます。  _s_i_g_s_p_e_c  が  DDEEBBUUGG  であれば、各々の  _単_純_な_コ_マ_ン
              _ド、_f_o_r コマンド、_c_a_s_e コマンド、_s_e_l_e_c_t コマンド、各々の算術 _f_o_r
              コマンドの前、およびシェル関数の最初のコマンドの実行前   (前述の
              シシェェルルのの文文法法セクションを参照) に、コマンド _a_r_g  が実行されます。
              DDEEBBUUGG  のトラップの影響についての詳細は組み込みコマンド sshhoopptt の
              eexxttddeebbuugg オプションの説明を参照してください。 _s_i_g_s_p_e_c が  RREETTUURRNN
              であれば、シェル関数の実行、または組み込みコマンドの .. や ssoouurrccee
              で実行されたスクリプトの実行が終わるたびにコマンド _a_r_g  が実行さ
              れます。

              _s_i_g_s_p_e_c  が EERRRR であれば、 単純なコマンドが 0 以外の終了ステータ
              スのときにコマンド _a_r_g が実行されます。 ただし、失敗したコマンド
              が、 wwhhiillee または uunnttiill キーワード直後のコマンドリストに含まれる
              場合、 _i_f 文の条件に含まれる場合、 &&&& や |||| のリスト中で実行する
              コマンドに含まれる場合、  および、コマンドの戻り値が !!  で反転さ
              れている場合には、  EERRRR  のトラップは実行されません。   これらは
              eerrrreexxiitt オプションが従う条件と同じです。

              シェルに入る際に無視されるシグナルは、  トラップもリセットもでき
              ません。 無視されなかったシグナルのトラップは、 サブシェルやサブ
              シェル環境では作られたときに  元の値にリセットされます。 _s_i_g_s_p_e_c
              のいずれかが不正であれば、返却ステータスは偽になります。  それ以
              外の場合には、 ttrraapp は真を返します。

       ttyyppee [--aaffttppPP] _n_a_m_e [_n_a_m_e ...]
              オプションなしの場合には、各  _n_a_m_e  をコマンド名として使ったとき
              に、それがどのように解釈されるかを示します。 --tt オプションを使う
              と、  _n_a_m_e  がエイリアス、シェルの予約語、関数、  組み込みコマン
              ド、ディスク上のファイルのいずれかの場合、    ttyyppee    はそれぞれ
              _a_l_i_a_s,  _k_e_y_w_o_r_d,  _f_u_n_c_t_i_o_n, _b_u_i_l_t_i_n, _f_i_l_e という文字列を出力しま
              す。 _n_a_m_e が見つからない場合は何も出力されず、偽の終了ステータス
              が返されます。 --pp オプションを使うと、 ttyyppee は _n_a_m_e をコマンド名
              として指定した場合に実行されるディスクファイルの名前を返します。
              ただし、 ``type -t name'' が _f_i_l_e を返さない場合は、何も返しませ
              ん。 --PP オプションを使うと、 ``type -t name'' が _f_i_l_e を返さない
              場合でも  _n_a_m_e を PPAATTHH から探します。 コマンドがハッシュされてい
              る場合、 --pp や  --PP  はハッシュされている値を表示します。  この場
              合、表示されるのは、必ずしも PPAATTHH 中で最初に現われるファイルとは
              限りません。 --aa オプションを使うと、 ttyyppee は _n_a_m_e という名前の実
              行ファイルがある場所を全て出力します。 --pp オプションが同時に使わ
              れていない場合に限り、 エイリアスや関数も出力されます。 --aa  を使
              うときには、ハッシュされているコマンドの表は参照されません。  --ff
              オプションを使うと、 組み込みコマンド ccoommmmaanndd と同じように、シェ
              ル関数を探しません。  ttyyppee  は、すべての引き数が見つかれば真を返
              し、 いずれかが見つからなければ偽を返します。

       uulliimmiitt [--HHSSTTaabbccddeeffiillmmnnppqqrrssttuuvvxx [_l_i_m_i_t]]
              これを使うと、シェルおよびシェルが起動するプロセスが  利用できる
              リソースを制御できます。  ただし、このような制御ができるシステム
              の場合に限ります。 --HH オプションと --SS オプションは、  それぞれ指
              定されたリソースに対する  強い制限 (hard limit) と弱い制限 (soft
              limit) を設定します。 強い制限は一度設定すると、root  以外のユー
              ザが増やすことはできません。  弱い制限は強い制限の値までは増やせ
              ます。 --HH と --SS がどちらも指定されていない場合、  強い制限と弱い
              制限が両方とも設定されます。  _l_i_m_i_t の値には、数字 (単位はリソー
              スに応じて規定)、または hhaarrdd, ssoofftt,  uunnlliimmiitteedd  が指定できます。
              hhaarrdd,  ssoofftt,  uunnlliimmiitteedd は、それぞれ現在の強い制限、現在の弱い制
              限、制限なしを表します。 _l_i_m_i_t  を省略すると、リソースの弱い制限
              の現在値が表示されます。 ただし、--HH が与えられている場合は除きま
              す。  複数のリソースが指定されているときは、制限名と単位が値の前
              に出力されます。 他のオプションは以下のように解釈されます:
              --aa     現在の制限を全て表示する
              --bb     ソケットバッファの最大サイズ
              --cc     生成されるコア (core) ファイルの最大サイズ
              --dd     プロセスのデータセグメントの最大サイズ
              --ee     スケジュール優先度 ("nice") の最大値
              --ff     シェルとその子プロセスが生成できるファイルの最大サイズ
              --ii     保留中シグナルの最大数
              --ll     メモリにロックできる最大サイズ
              --mm     常駐セットサイズ (resident set size) の最大値 (多くのシス
                     テムはこの制限を守りません)
              --nn     オープンできるファイル・ディスクリプターの最大数  (ほとん
                     どのシステムでは、この値を設定することはできません)
              --pp     512  バイトブロック単位でのパイプのサイズ (これは設定でき
                     ないかもしれません)
              --qq     POSIX メッセージキューの最大バイト数
              --rr     リアルタイム・スケジューリングの優先度の最大値
              --ss     最大スタックサイズ
              --tt     CPU 時間の最大量 (秒単位)
              --uu     1 人のユーザが使用できる最大のプロセス数
              --vv     そのシェルが使用できる最大の仮想メモリ量  (システムによっ
                     ては、子プロセスも含まれる)
              --xx     ファイルロックの最大数
              --TT     スレッドの最大数

              _l_i_m_i_t が指定された場合、その値が指定されたリソースの新しい値とな
              ります (--aa は表示専用です)。  オプションが全く指定されなかった場
              合は、  --ff が指定されたものとみなされます。 値は 1024 バイト単位
              で増えますが、例外として --tt は秒単位、 --pp  512  バイトブロック単
              位、  --TT, --bb, --nn, --nn, --uu は単位なしの値です。 返却ステータスは基
              本的に 0 ですが、 不正なオプションや引き数が渡された場合、  新し
              い制限を設定する際にエラーが起きた場合は除きます。

       uummaasskk [--pp] [--SS] [_m_o_d_e]
              ユーザのファイル生成マスクに _m_o_d_e を設定します。 _m_o_d_e が数字で始
              まる場合には、これは 8 進数と解釈されます。 それ以外の場合には、
              _c_h_m_o_d(1)  に指定するのと同様のシンボリックなモードマスクと解釈さ
              れます。  _m_o_d_e  が省略されると、現在のマスクの値が出力されます。
              --SS  オプションを指定すると、マスクはシンボリックな形式で表示され
              ます。 デフォルトの出力は 8 進の数値です。 --pp オプションが指定さ
              れ、かつ _m_o_d_e が省略された場合、入力として再利用できる形式で出力
              が行われます。 モードが正常に変更できた場合や、 _m_o_d_e  引き数が全
              く与えられなかった場合には、  返却ステータスは 0 となります。 そ
              れ以外の場合には偽となります。

       uunnaalliiaass [-aa] [_n_a_m_e ...]
              定義されているエイリアスのリストから _n_a_m_e を削除します。 --aa が与
              えられている場合には、エイリアス定義は全て削除されます。  与えら
              れた _n_a_m_e が定義されているエイリアスでない場合以外は、返却ステー
              タスは真になります。

       uunnsseett [-ffvv] [_n_a_m_e ...]
              _n_a_m_e それぞれについて、対応する変数や関数を削除します。 オプショ
              ンが全く指定されていない場合や、  --vv  オプションが指定された場合
              は、各  _n_a_m_e はシェル変数を参照します。 読み込み専用の変数の設定
              を消すことはできません。 --ff が指定されている場合、各 _n_a_m_e はシェ
              ル関数を参照し、その関数の定義が削除されます。  設定が消された変
              数や関数は全て、  それ以降のコマンドに渡される環境変数からも削除
              されます。  CCOOMMPP__WWOORRDDBBRREEAAKKSS,  RRAANNDDOOMM,  SSEECCOONNDDSS, LLIINNEENNOO, HHIISSTTCCMMDD,
              FFUUNNCCNNAAMMEE, GGRROOUUPPSS, DDIIRRSSTTAACCKK  のいずれかの設定を消した場合、これら
              が持つ特別な特性もなくなります。  これは後で再設定しても元に戻る
              ことはありません。 _n_a_m_e が読み込み専用の場合以外は、  終了ステー
              タスは真となります。

       wwaaiitt [_n _._._.]
              指定された各プロセスを  wait  し、その終了ステータスを返します。
              各 _n はプロセス ID  またはジョブ指定です。  ジョブ指定を与えた場
              合、そのジョブのパイプラインに含まれる  全てのプロセスを wait し
              ます。 _n  が与えられていない場合には、現在アクティブな全ての子プ
              ロセスを  wait し、 返却ステータスは 0 となります。 _n が存在しな
              いプロセスやジョブを指定している場合、 返却ステータスは 127 にな
              ります。  それ以外の場合、返却ステータスは wait していた最後のプ
              ロセスまたはジョブの終了ステータスとなります。

制制限限付付ききののシシェェルル ((RREESSTTRRIICCTTEEDD SSHHEELLLL))
       bbaasshh を rrbbaasshh という名前で起動した場合や、起動時に --rr  オプションを指定
       した場合には、シェルは制限された状態になります。   制限付きのシェルは、
       標準のシェルよりも細かく制御された環境を用意したいときに使われます。 制
       限付きのシェルは bbaasshh と全く同じように動作しますが、 以下のようなことが
       許可されなかったり実行されなかったりします。

       •      ccdd を使ってディレクトリを変更すること

       •      SSHHEELLLL, PPAATTHH, EENNVV, BBAASSHH__EENNVV の値の設定や設定取り消しを行うこと

       •      // を含むコマンド名を指定すること

       •      組み込みコマンド .. の引き数として // を含むファイル名を指定するこ
              と

       •      組み込みコマンド  hhaasshh  のオプション  --pp の引き数として // を含む
              ファイル名を指定すること

       •      起動時にシェル環境から関数定義をインポートすること

       •      起動時にシェル環境から SSHHEELLLLOOPPTTSS の値を解釈すること

       •      リダイレクション演算子 >, >|, <>, >&, &>, >>  を使ってリダイレク
              トを行 なうこと

       •      組み込みコマンド eexxeecc を用いて、シェルを別のコマンドに置き換える
              こと

       •      組み込みコマンド eennaabbllee の --ff オプションと  --dd  オプションを使っ
              て、組み込みコマンドを追加・削除すること

       •      組み込みコマンド eennaabbllee を使って、無効になっている組み込みコマン
              ドを有効にすること

       •      組み込みコマンド ccoommmmaanndd に --pp オプションを指定すること

       •      sseett ++rr や sseett ++oo rreessttrriicctteedd を用いて制限モードを解除すること

       これらの制限は、何らかの起動ファイルを読み込んだ後に適用されます。

       シェルスクリプトであると判明したファイルが実行されるとき (前述の ココママンン
       ドドのの実実行行 を参照)、 rrbbaasshh はスクリプト実行用に立ち上げたシェルでは制限を
       全て無効にします。

関関連連項項目目
       _B_a_s_h _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _P_o_r_t_a_b_l_e  _O_p_e_r_a_t_i_n_g  _S_y_s_t_e_m  _I_n_t_e_r_f_a_c_e  _(_P_O_S_I_X_)  _P_a_r_t  _2_:   _S_h_e_l_l   _a_n_d
       _U_t_i_l_i_t_i_e_s, IEEE
       _s_h(1), _k_s_h(1), _c_s_h(1)
       _e_m_a_c_s(1), _v_i(1)
       _r_e_a_d_l_i_n_e(3)

フファァイイルル
       _/_b_i_n_/_b_a_s_h
              bbaasshh の実行ファイル。
       _/_e_t_c_/_p_r_o_f_i_l_e
              システム全体用の初期化ファイル。ログインシェルが実行します。
       _~_/_._b_a_s_h___p_r_o_f_i_l_e
              個人用の初期化ファイル。ログインシェルが実行します。
       _~_/_._b_a_s_h_r_c
              対話シェルごとに実行される、個人用の起動ファイル。
       _~_/_._b_a_s_h___l_o_g_o_u_t
              個人用のログインシェル後処理ファイル。  ログインシェルの終了時に
              実行されます。
       _~_/_._i_n_p_u_t_r_c
              個人用の _r_e_a_d_l_i_n_e 初期化ファイル。

作作者者
       Brian Fox, Free Software Foundation
       bfox@gnu.org

       Chet Ramey, Case Western Reserve University
       chet.ramey@case.edu

ババググ報報告告
       bbaasshh のバグを見つけたら必ず報告してください。  ただし報告の前には、それ
       が本当にバグであることと、 バグが最新版の bbaasshh で起こることを確かめてく
       ださい。 最新版は _f_t_p_:_/_/_f_t_p_._g_n_u_._o_r_g_/_p_u_b_/_g_n_u_/_b_a_s_h_/ から入手できます。

       本当にバグがあると判断した場合には、 _b_a_s_h_b_u_g コマンドを使ってバグ報告を
       行います。  バグを修正してくださった場合には、 ぜひその内容も一緒にメー
       ルしてください! 提案や「哲学上の」バグ報告は、_b_u_g_-_b_a_s_h_@_g_n_u_._o_r_g にメール
       したり、 ニュースグループの ggnnuu..bbaasshh..bbuugg に投稿したりしてくださってもか
       まいません。

       バグ報告には必ず以下のことを書いてください:

       bbaasshh のバージョン
       ハードウェアとオペレーティングシステム
       コンパイルに使ったコンパイラ
       バグ動作の説明
       バグを再現できる「レシピ」 (簡単なシェルスクリプト)

       _b_a_s_h_b_u_g  コマンドは、バグ報告を送るために用意されているテンプレートに、
       最初の 3 項目を自動的に書き込みます。

       このオンラインマニュアルに関するコメントやバグ報告は
       _c_h_e_t_._r_a_m_e_y_@_c_a_s_e_._e_d_u 宛にお願いします。

ババググ
       bbaasshh は大きすぎるし、遅すぎます。

       bbaasshh と昔ながらのバージョンの  sshh  にはちょっとした違いがいくつかありま
       す。この大部分は PPOOSSIIXX の仕様のせいで生じたものです。

       使い方によっては、エイリアスは混乱の元になります。

       シェル組み込みコマンドとシェル関数は、停止したり、実行を再開したりでき
       ません。

       複合コマンドや `a ; b ; c' の形式のコマンド列は、  プロセスのサスペンド
       を行う際に綺麗に扱うことができません。  あるプロセスを停止すると、 シェ
       ルはコマンド列の次のコマンドを即座に実行するからです。 この問題はコマン
       ド列を括弧の中に置いて  サブシェルに実行させることで解決できます。 こう
       すれば、ひとまとまりのものとして停止できます。

       配列変数は (まだ) エクスポートできません。

       一度に 1 つのコプロセスしかアクティブにできません。

GNU Bash-4.2                   2010 December 28                        BASH(1)
